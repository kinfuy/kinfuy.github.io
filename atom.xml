<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿乐去买菜</title>
  
  <subtitle>点点星光。</subtitle>
  <link href="https://kinfuy.github.io/atom.xml" rel="self"/>
  
  <link href="https://kinfuy.github.io/"/>
  <updated>2023-02-18T02:03:43.576Z</updated>
  <id>https://kinfuy.github.io/</id>
  
  <author>
    <name>阿乐去买菜</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue3 Hook 到底是啥黑魔法？</title>
    <link href="https://kinfuy.github.io/dcaa89a4c7f6/"/>
    <id>https://kinfuy.github.io/dcaa89a4c7f6/</id>
    <published>2023-02-18T02:03:43.576Z</published>
    <updated>2023-02-18T02:03:43.576Z</updated>
    
    <content type="html"><![CDATA[<p>早就听说，<code>React</code>社区，已经全面拥抱<code>Hook</code>。<code>Vue3</code>的发布也支持了自定义<code>Hook</code>，作为只会<code>Vue</code>的前端小码农自然要去看看<code>Vue3 Hook</code>到底是啥黑魔法？</p><p>个人博客网站欢迎交流：<a href="https://blog.xkongkeji.com/">萤火之森：https://blog.xkongkeji.com</a></p><h3 id="从不了解React-Hook的角度来看一下啥是Hook？"><a href="#从不了解React-Hook的角度来看一下啥是Hook？" class="headerlink" title="从不了解React Hook的角度来看一下啥是Hook？"></a>从不了解React Hook的角度来看一下啥是Hook？</h3><ul><li>Vue 官方给出的自定义 <code>Hook</code> 的例子是这样的：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useMousePosition</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> y = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    x.<span class="property">value</span> = e.<span class="property">pageX</span>;</span><br><span class="line">    y.<span class="property">value</span> = e.<span class="property">pageY</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, update);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, update);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; x, y &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件中使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useMousePosition &#125; <span class="keyword">from</span> <span class="string">&quot;./mouse&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; x, y &#125; = <span class="title function_">useMousePosition</span>();</span><br><span class="line">    <span class="keyword">return</span> &#123; x, y &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相信写<code>vue2</code>的小伙伴应该都有被<code>Mixin</code>支配过，特别是拿到应该不熟悉的项目的时候，简直是噩梦，各种<code>Mixin</code>，各种变量，方法，完全看不出从哪来的。</p><p>从代码中使用中可以清晰的找到鼠标位置<code>X</code>,<code>Y</code>来自于<code>useMousePosition</code>函数，<code>useMousePosition</code>就是一个函数，使用了<code>composition-api</code>定义了响应式数据<code>X</code>，<code>Y</code>然后导出，个人感觉是将<code>mixin</code>拆分了，将导入的操作交给了开发者，以前是vue直接帮我们把数据合并在了一起，反而导致了数据无从溯源的问题。</p><h4 id="个人理解，欢迎纠正"><a href="#个人理解，欢迎纠正" class="headerlink" title="个人理解，欢迎纠正"></a>个人理解，欢迎纠正</h4><ul><li><code>hook</code>可以当作以前<code>mixin</code>的来用</li><li><code>hook</code>是一个函数，<code>mixin</code>是一个对象</li><li><code>hook</code>就是拆分版的<code>mixin</code>，将导入操作交给开发者，<code>mixin</code>是根据对应的<code>options Api</code>直接merge到组件了</li><li><code>hook</code>可以借用<code>composition-api</code>完全使用<code>vue</code>的能力，简而言之就是你在<code>setup</code>函数用能用的<code>hook</code>都能用.</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、[精读《Vue3.0 Function API》] <a href="https://juejin.cn/post/6844903877574295560">https://juejin.cn/post/6844903877574295560</a></p><p>2、[Vue3 究竟好在哪里？（和 React Hook 的详细对比）])]<a href="https://segmentfault.com/a/1190000022616689">https://segmentfault.com/a/1190000022616689</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;早就听说，&lt;code&gt;React&lt;/code&gt;社区，已经全面拥抱&lt;code&gt;Hook&lt;/code&gt;。&lt;code&gt;Vue3&lt;/code&gt;的发布也支持了自定义&lt;code&gt;Hook&lt;/code&gt;，作为只会&lt;code&gt;Vue&lt;/code&gt;的前端小码农自然要去看看&lt;code&gt;Vue3</summary>
      
    
    
    
    
    <category term="Vuejs" scheme="https://kinfuy.github.io/tags/Vuejs/"/>
    
  </entry>
  
  <entry>
    <title>call、apply、bind详解</title>
    <link href="https://kinfuy.github.io/16154542a339/"/>
    <id>https://kinfuy.github.io/16154542a339/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="call、apply、bind-详解"><a href="#call、apply、bind-详解" class="headerlink" title="call、apply、bind 详解"></a>call、apply、bind 详解</h2><p>三者都是改变函数执行时的上下文，也就是就是改变 this 的指向。</p><h3 id="call-obj-arg1-arg2-x2F-x2F-call-的参数一个一个的传"><a href="#call-obj-arg1-arg2-x2F-x2F-call-的参数一个一个的传" class="headerlink" title="call(obj,arg1,arg2) &#x2F;&#x2F;call()的参数一个一个的传"></a>call(obj,arg1,arg2) &#x2F;&#x2F;call()的参数一个一个的传</h3><p>函数.call(第一个参数:想让函数中 this 指向谁,就传谁进来,<br>后面的参数:本身函数需要传递实参,需要几个实参,就一个一个的传递即可);<br>call 的作用: 1. 调用函数 2.指定函数中 this 指向</p><h3 id="apply-obj-arg1-arg2-x2F-x2F-apply-的第二个参数则是一个数组"><a href="#apply-obj-arg1-arg2-x2F-x2F-apply-的第二个参数则是一个数组" class="headerlink" title="apply(obj,[arg1,arg2] &#x2F;&#x2F;apply()的第二个参数则是一个数组"></a>apply(obj,[arg1,arg2] &#x2F;&#x2F;apply()的第二个参数则是一个数组</h3><p>函数.apply(第一个参数:想让函数中 this 指向谁,就传谁进来,<br>第二个参数:要求传入一个数组,数组中包含了函数需要的实参)<br>apply 的作用: 1. 调用函数 2, 指定函数中 this 的指向</p><h3 id="bind-this-x2F-x2F-bind-返回的其实是一个函数，并不会立即执行。"><a href="#bind-this-x2F-x2F-bind-返回的其实是一个函数，并不会立即执行。" class="headerlink" title="bind(this) &#x2F;&#x2F; bind()返回的其实是一个函数，并不会立即执行。"></a>bind(this) &#x2F;&#x2F; bind()返回的其实是一个函数，并不会立即执行。</h3><p>函数.bind(第一个参数:想让函数中 this 指向谁,就传谁进来,<br>后面的参数:本身函数需要传递实参,需要几个实参,就一个一个的传递即可)<br>bind 的作用: 1. 克隆当前函数,返回克隆出来的新的函数<br>　　　　 2. 新克隆出来的函数,这个函数的 this 被指定了</p><p>看下面例子就明白了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj  = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Thezero&quot;</span>,</span><br><span class="line">  <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;萤火之森&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">say</span>.<span class="title function_">apply</span>(obj2)); <span class="regexp">/ /</span>萤火之森</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">say</span>.<span class="title function_">call</span>(obj2)); <span class="comment">//  萤火之森</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">say</span>.<span class="title function_">bind</span>(obj2)); <span class="comment">// function()&#123;return this.age&#125;</span></span><br></pre></td></tr></table></figure><h2 id="手写实现-call"><a href="#手写实现-call" class="headerlink" title="手写实现 call"></a>手写实现 call</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">myThis, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;not a function!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>(<span class="string">&#x27;fn&#x27;</span>);</span><br><span class="line">  myThis = myThis || <span class="variable language_">window</span>;</span><br><span class="line">  myThis[fn] = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// this指向调用call的对象,即我们要改变this指向的函数</span></span><br><span class="line">  <span class="keyword">const</span> result = myThis[fn](...args);</span><br><span class="line">  <span class="comment">// 执行当前函数</span></span><br><span class="line">  <span class="keyword">delete</span> myThis[fn];</span><br><span class="line">  <span class="comment">// 删除我们声明的fn属性</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">  <span class="comment">// 返回函数执行结果</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="手写实现-apply"><a href="#手写实现-apply" class="headerlink" title="手写实现 apply"></a>手写实现 apply</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">myThis, args = []</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;not a function!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>(<span class="string">&#x27;fn&#x27;</span>);</span><br><span class="line">  myThis = myThis || <span class="variable language_">window</span>;</span><br><span class="line">  myThis[fn] = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// this指向调用call的对象,即我们要改变this指向的函数</span></span><br><span class="line">  <span class="keyword">const</span> result = myThis[fn](...args);</span><br><span class="line">  <span class="comment">// 执行当前函数</span></span><br><span class="line">  <span class="keyword">delete</span> myThis[fn];</span><br><span class="line">  <span class="comment">// 删除我们声明的fn属性</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">  <span class="comment">// 返回函数执行结果</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="手写实现-bind"><a href="#手写实现-bind" class="headerlink" title="手写实现 bind"></a>手写实现 bind</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">myThis, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;not a function!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> fbound = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    self.<span class="title function_">apply</span>(</span><br><span class="line">      <span class="variable language_">this</span> <span class="keyword">instanceof</span> self ? <span class="variable language_">this</span> : myThis,</span><br><span class="line">      args.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>))</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 继承原型上的属性和方法</span></span><br><span class="line">  fbound.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(self.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="keyword">return</span> fbound;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;call、apply、bind-详解&quot;&gt;&lt;a href=&quot;#call、apply、bind-详解&quot; class=&quot;headerlink&quot; title=&quot;call、apply、bind 详解&quot;&gt;&lt;/a&gt;call、apply、bind 详解&lt;/h2&gt;&lt;p&gt;三者都是改变</summary>
      
    
    
    
    
    <category term="Javascript" scheme="https://kinfuy.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>谷歌插件思维导图整理</title>
    <link href="https://kinfuy.github.io/4cf67d54bfeb/"/>
    <id>https://kinfuy.github.io/4cf67d54bfeb/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="谷歌插件思维导图整理"><a href="#谷歌插件思维导图整理" class="headerlink" title="谷歌插件思维导图整理"></a>谷歌插件思维导图整理</h2><p><img src="/static/articles/2.png" alt="chrome扩展.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;谷歌插件思维导图整理&quot;&gt;&lt;a href=&quot;#谷歌插件思维导图整理&quot; class=&quot;headerlink&quot; title=&quot;谷歌插件思维导图整理&quot;&gt;&lt;/a&gt;谷歌插件思维导图整理&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/static/articles/2.png&quot; alt=</summary>
      
    
    
    
    
    <category term="Tool" scheme="https://kinfuy.github.io/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>插件一键去水印，岂不妙哉！</title>
    <link href="https://kinfuy.github.io/f887f731c3f6/"/>
    <id>https://kinfuy.github.io/f887f731c3f6/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="插件一键去水印，岂不妙哉！"><a href="#插件一键去水印，岂不妙哉！" class="headerlink" title="插件一键去水印，岂不妙哉！"></a>插件一键去水印，岂不妙哉！</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>前端做一些个人项目，没有 UI 实在太难搞了，PS 又需要学习成本，就想着用一些设计网站做一些图，做好之后发现要 Vip，想着个人项目不商用，截个图，做一下效果，做着做着就想是不是做一个插件自动去一下水印岂不是更好。</p><h3 id="说干就干"><a href="#说干就干" class="headerlink" title="说干就干"></a>说干就干</h3><ul><li>粗略的学习了一下谷歌插件<ul><li><a href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html">【干货】Chrome 插件(扩展)开发全攻略</a></li></ul></li><li>分析一下某站的水印位置（明水印，听大佬说有暗水印，暂不考虑）<ul><li>手动分析（F12 直接看，哈哈）</li></ul></li><li>发现水印处于 image-watermark 该类名的背景图片位置</li><li>还有一些可能是一个单独的元素。</li><li>接下来就是找到该元素删除即可（手动删除也可以，以前就是这样干的）</li></ul><h3 id="谷歌插件"><a href="#谷歌插件" class="headerlink" title="谷歌插件"></a>谷歌插件</h3><ul><li>编写一些简单的操作界面（popup.html）</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77a94128224a4f8abebfb3916545ae2e~tplv-k3u1fbpfcp-watermark.image" alt="c419bbd0143a4b2a8e21d0114676b2bd_tplv-k3u1fbpfcp-watermark.png"></p><ul><li><p>采用 html2canvas 来下载图</p><ul><li>将 dom 转成图片</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">downloadPng</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span>(!shareContent) <span class="keyword">return</span></span><br><span class="line"><span class="keyword">let</span> rect = shareContent.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line"><span class="keyword">let</span> opts = &#123;</span><br><span class="line">    <span class="attr">x</span>: rect.<span class="property">left</span>,</span><br><span class="line">    <span class="attr">y</span>: rect.<span class="property">top</span>,</span><br><span class="line">    <span class="attr">scale</span>: <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>*<span class="number">2</span>,</span><br><span class="line">    <span class="attr">useCORS</span>: <span class="literal">true</span> ,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">html2canvas</span>(shareContent, opts).<span class="title function_">then</span>(<span class="function"><span class="params">canvas</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    img.<span class="property">src</span> = canvas.<span class="title function_">toDataURL</span>();</span><br><span class="line">    <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    a.<span class="property">download</span> = <span class="string">&#x27;无水印图&#x27;</span></span><br><span class="line">    a.<span class="property">href</span> = img.<span class="property">src</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a);</span><br><span class="line">    a.<span class="title function_">click</span>();</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(a);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>html2canvas 的坑实在有点多，图片跨域问题设置 useCORS: true</p></li><li><p>部分样式问题，暂无法解决</p></li><li><p>就简单的 popup.js 与 content.j 简单的通信一些就可以完成</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendMessageToContentScript</span>(<span class="params">message, callback</span>) &#123;</span><br><span class="line">  chrome.<span class="property">tabs</span>.<span class="title function_">query</span>(&#123; <span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">currentWindow</span>: <span class="literal">true</span> &#125;, <span class="keyword">function</span> (<span class="params">tabs</span>) &#123;</span><br><span class="line">    chrome.<span class="property">tabs</span>.<span class="title function_">sendMessage</span>(tabs[<span class="number">0</span>].<span class="property">id</span>, message, <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (callback) <span class="title function_">callback</span>(response);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onMessage</span>.<span class="title function_">addListener</span>(<span class="function">(<span class="params">request, sender, sendResponse</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.<span class="property">remove</span>) &#123;</span><br><span class="line">    <span class="title function_">removeFigureMonster</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (request.<span class="property">download</span>) &#123;</span><br><span class="line">    <span class="title function_">downloadPng</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>manifest.json 文件是插件核心文件</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;manifest_version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;去水印！&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;去除主流作图网站的明水印，并下载！&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;16&quot;</span><span class="punctuation">:</span> <span class="string">&quot;libs/icon/logo1.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;48&quot;</span><span class="punctuation">:</span> <span class="string">&quot;libs/icon/logo1.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;128&quot;</span><span class="punctuation">:</span> <span class="string">&quot;libs/icon/logo1.png&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;page&quot;</span><span class="punctuation">:</span> <span class="string">&quot;libs/html/background.html&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;browser_action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default_icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;libs/icon/logo1.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;default_title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;去除主流作图网站的明水印，并下载！&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;default_popup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;libs/html/popup.html&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content_scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;matches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;all_urls&gt;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;js&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/libs/plugin/htmltocanvas.js&quot;</span><span class="punctuation">,</span> <span class="string">&quot;libs/js/content.js&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;run_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;document_start&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;contextMenus&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="自此一个谷歌插件就简单的完成"><a href="#自此一个谷歌插件就简单的完成" class="headerlink" title="自此一个谷歌插件就简单的完成"></a>自此一个谷歌插件就简单的完成</h3><ul><li>可以一键去水印然后下载</li><li>应该其他设计网站大同小异</li></ul><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><ul><li><a href="https://github.com/aqlmc/remove-watermask">源代码,随手写的不用 star，自取</a></li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>以上仅仅为技术交流~ 大家不要在实际的场景盲目使用，使用正规的途径。商用还需购买版权，支持原创！</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>1、<a href="https://juejin.cn/post/6900713052270755847">从破解某设计网站谈前端水印(详细教程)</a></p><p>2、<a href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html">【干货】Chrome 插件(扩展)开发全攻略</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;插件一键去水印，岂不妙哉！&quot;&gt;&lt;a href=&quot;#插件一键去水印，岂不妙哉！&quot; class=&quot;headerlink&quot; title=&quot;插件一键去水印，岂不妙哉！&quot;&gt;&lt;/a&gt;插件一键去水印，岂不妙哉！&lt;/h2&gt;&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; cla</summary>
      
    
    
    
    
    <category term="Tool" scheme="https://kinfuy.github.io/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>粘贴板之二维码复制</title>
    <link href="https://kinfuy.github.io/15a6c2b81263/"/>
    <id>https://kinfuy.github.io/15a6c2b81263/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="粘贴板之二维码复制"><a href="#粘贴板之二维码复制" class="headerlink" title="粘贴板之二维码复制"></a>粘贴板之二维码复制</h2><p><img src="/static/articles/4.webp" alt="粘贴板之二维码复制"></p><h3 id="说一点废话"><a href="#说一点废话" class="headerlink" title="说一点废话"></a>说一点废话</h3><p>复制网页上的二维码，并分享到的聊天工具中,是特别常见的功能。在网上找了很多资料，大部分都是坑。</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><ul><li>使用 navigator.permissions api 查询浏览器是否支持粘贴板操作</li><li>使用 fetch 请求二维码 文件流</li><li>将文件流转化为 blob</li><li>使用 navigator.clipboard.write 将文件 blob 写入粘贴板</li></ul><h3 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a>未解决的问题</h3><ul><li>粘贴板在不安全的环境中会有限制，可能导致复制失败。建议在 https 环境中使用</li><li>老旧项目慎重 CV，具有一定的兼容性问题</li></ul><h3 id="查询浏览器是否支持访问粘贴板权限"><a href="#查询浏览器是否支持访问粘贴板权限" class="headerlink" title="查询浏览器是否支持访问粘贴板权限"></a>查询浏览器是否支持访问粘贴板权限</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getAuthClipboard</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">    navigator.<span class="property">permissions</span>.<span class="title function_">query</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;clipboard-write&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>( <span class="keyword">async</span> permissionStatus =&gt; &#123;</span><br><span class="line">      <span class="comment">// permissionStatus.state 的值是 &#x27;granted&#x27;、&#x27;denied&#x27;、&#x27;prompt&#x27;:</span></span><br><span class="line">      <span class="keyword">if</span> (permissionStatus.<span class="property">state</span> === <span class="string">&#x27;granted&#x27;</span>) &#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="title function_">copyQRcode</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">error</span>(<span class="string">&#x27;没有获得粘贴板读取权限&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (navigator.<span class="property">permissions</span>.<span class="property">request</span>) &#123;</span><br><span class="line">        <span class="comment">// 尝试请求获取，navigator.permissions.request API有些浏览器不支持</span></span><br><span class="line">          navigator.<span class="property">permissions</span>.<span class="title function_">request</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;clipboard-write&#x27;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="复制二维码"><a href="#复制二维码" class="headerlink" title="复制二维码"></a>复制二维码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">copyQRcode</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> request = &#123;</span><br><span class="line">     <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">     <span class="attr">headers</span>: &#123;</span><br><span class="line">       <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/octet-stream;charset=UTF-8&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;Authorization&#x27;</span>: <span class="title class_">StorageUtil</span>.<span class="title function_">getLocalStorage</span>(<span class="string">&#x27;token&#x27;</span>), <span class="comment">//携带自己的token</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="variable language_">this</span>.<span class="property">QRcode</span>, request);</span><br><span class="line">   <span class="keyword">const</span> blob = <span class="keyword">await</span> data.<span class="title function_">blob</span>();</span><br><span class="line">   <span class="keyword">await</span> navigator.<span class="property">clipboard</span>.<span class="title function_">write</span>([</span><br><span class="line">     <span class="keyword">new</span> <span class="title class_">ClipboardItem</span>(&#123;</span><br><span class="line">       [blob.<span class="property">type</span>]: blob</span><br><span class="line">     &#125;)</span><br><span class="line">   ]).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">error</span>(<span class="string">&#x27;复制失败&#x27;</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">success</span>(<span class="string">&#x27;复制成功&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;粘贴板之二维码复制&quot;&gt;&lt;a href=&quot;#粘贴板之二维码复制&quot; class=&quot;headerlink&quot; title=&quot;粘贴板之二维码复制&quot;&gt;&lt;/a&gt;粘贴板之二维码复制&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/static/articles/4.webp&quot; alt=&quot;粘贴</summary>
      
    
    
    
    
    <category term="Javascript" scheme="https://kinfuy.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>关于XSS与CSRF你应该知道的</title>
    <link href="https://kinfuy.github.io/f70e096a6839/"/>
    <id>https://kinfuy.github.io/f70e096a6839/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于-XSS-与-CSRF-你应该知道的"><a href="#关于-XSS-与-CSRF-你应该知道的" class="headerlink" title="关于 XSS 与 CSRF 你应该知道的"></a>关于 XSS 与 CSRF 你应该知道的</h2><p>在 Web 安全领域中，XSS 和 CSRF 是最常见的攻击方式。接下来就简单的说一下他们该怎么防范。</p><h3 id="什么是-XSS"><a href="#什么是-XSS" class="headerlink" title="什么是 XSS"></a>什么是 XSS</h3><p>XSS 攻击是指攻击者在网站上注入恶意的客户端代码，通过恶意脚本对客户端网页进行篡改，从而在用户浏览网页时，对用户浏览器进行控制或者获取用户隐私数据的一种攻击方式。</p><h3 id="XSS-攻击的防范"><a href="#XSS-攻击的防范" class="headerlink" title="XSS 攻击的防范"></a>XSS 攻击的防范</h3><p>现在主流的浏览器内置了防范 XSS 的措施，例如 CSP。但对于开发者来说，也应该寻找可靠的解决方案来防止 XSS 攻击。</p><ul><li><p>HttpOnly 防止劫取 Cookie</p><p>HttpOnly 最早由微软提出，至今已经成为一个标准。浏览器将禁止页面的 Javascript 访问带有 HttpOnly 属性的 Cookie。严格来说，HttpOnly 并非阻止 XSS 攻击，而是能阻止 XSS 攻击后的 Cookie 劫持攻击。</p></li><li><p>输入检查</p><p>不要相信用户的任何输入。 对于用户的任何输入要进行检查、过滤和转义。建立可信任的字符和 HTML 标签白名单，对于不在白名单之列的字符或者标签进行过滤或编码。</p><p>补充：输入检查一般是检查用户输入的数据中是否包含 &lt;，&gt; 等特殊字符，如果存在，则对特殊字符进行过滤或编码，这种方式也称为 XSS Filter。</p></li><li><p>输出检查</p><p>用户的输入会存在问题，服务端的输出也会存在问题。一般来说，除富文本的输出外，在变量输出到 HTML 页面时，可以使用编码或转义的方式来防御 XSS 攻击。</p></li></ul><h3 id="什么是-CSRF"><a href="#什么是-CSRF" class="headerlink" title="什么是 CSRF"></a>什么是 CSRF</h3><p>CSRF，即 Cross Site Request Forgery，中译是跨站请求伪造，是一种劫持受信任用户向服务器发送非预期请求的攻击方式。</p><p>通常情况下，CSRF 攻击是攻击者借助受害者的 Cookie 骗取服务器的信任，可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击服务器，从而在并未授权的情况下执行在权限保护之下的操作。</p><h3 id="CSRF-攻击的防范"><a href="#CSRF-攻击的防范" class="headerlink" title="CSRF 攻击的防范"></a>CSRF 攻击的防范</h3><ul><li><p>验证码</p><p>验证码被认为是对抗 CSRF 攻击最简洁而有效的防御方法。</p><p>从上述示例中可以看出，CSRF 攻击往往是在用户不知情的情况下构造了网络请求。而验证码会强制用户必须与应用进行交互，才能完成最终请求。因为通常情况下，验证码能够很好地遏制 CSRF 攻击。</p><p>但验证码并不是万能的，因为出于用户考虑，不能给网站所有的操作都加上验证码。因此，验证码只能作为防御 CSRF 的一种辅助手段，而不能作为最主要的解决方案。</p></li><li><p>Referer 检查</p><p>根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。通过 Referer Check，可以检查请求是否来自合法的”源”。</p></li><li><p>添加 token 验证</p><p>CSRF 攻击之所以能够成功，是因为攻击者可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 Cookie 中，因此攻击者可以在不知道这些验证信息的情况下直接利用用户自己的 Cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入攻击者所不能伪造的信息，并且该信息不存在于 Cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于-XSS-与-CSRF-你应该知道的&quot;&gt;&lt;a href=&quot;#关于-XSS-与-CSRF-你应该知道的&quot; class=&quot;headerlink&quot; title=&quot;关于 XSS 与 CSRF 你应该知道的&quot;&gt;&lt;/a&gt;关于 XSS 与 CSRF 你应该知道的&lt;/h2&gt;&lt;</summary>
      
    
    
    
    
    <category term="Javascript" scheme="https://kinfuy.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>【拿来吧你】装饰器</title>
    <link href="https://kinfuy.github.io/821570f682eb/"/>
    <id>https://kinfuy.github.io/821570f682eb/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="【拿来吧你】装饰器"><a href="#【拿来吧你】装饰器" class="headerlink" title="【拿来吧你】装饰器"></a>【拿来吧你】装饰器</h2><p>许多面向对象的语言都有修饰器（Decorator）函数，用来修改，或者注释类的行为。js 也不例外。</p><h3 id="装饰器能做什么"><a href="#装饰器能做什么" class="headerlink" title="装饰器能做什么"></a>装饰器能做什么</h3><ul><li>传入参数的类型判断</li><li>返回值的排序、过滤</li><li>对函数添加节流、防抖或其他的功能性代码</li><li>基于多个类的继承，各种各样的与函数逻辑本身无关的、重复性的代码</li><li>等等。。。</li></ul><h3 id="装饰器基本语法"><a href="#装饰器基本语法" class="headerlink" title="装饰器基本语法"></a>装饰器基本语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@decorator</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;&#125;</span><br><span class="line">A = <span class="title function_">decorator</span>(<span class="title class_">MyClass</span>) || <span class="title class_">MyClass</span>;</span><br></pre></td></tr></table></figure><p>从上面就可以看出，修饰器是一个对类进行处理的函数。修饰器函数的第一个参数，就是所要修饰的目标类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">decorator</span>(<span class="params">target</span>) &#123;</span><br><span class="line">     这里可以对类添加一些属性，或者方法，其他一些对类的操作。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="装饰器的执行顺序"><a href="#装饰器的执行顺序" class="headerlink" title="装饰器的执行顺序"></a>装饰器的执行顺序</h3><p>同一处的多个装饰器是按照洋葱模型，由外到内进入，再由内到外执行（和 Koa 的洋葱模型一致）</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91778da674e2476bbba8a25f4eb82dac~tplv-k3u1fbpfcp-watermark.image" alt="src=http___image1.bubuko.com_info_202005_20200508002820794838.png&amp;refer=http___image1.bubuko.jpg"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dec</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;evaluated&#x27;</span>, id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">  @<span class="title function_">dec</span>(<span class="number">1</span>)</span><br><span class="line">  @<span class="title function_">dec</span>(<span class="number">2</span>)</span><br><span class="line">  <span class="title function_">method</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// evaluated 1</span></span><br><span class="line"><span class="comment">// evaluated 2</span></span><br></pre></td></tr></table></figure><h3 id="修饰类的方法（实现一个对属性的-readonly-装饰器）"><a href="#修饰类的方法（实现一个对属性的-readonly-装饰器）" class="headerlink" title="修饰类的方法（实现一个对属性的 readonly 装饰器）"></a>修饰类的方法（实现一个对属性的 readonly 装饰器）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  @readonly</span><br><span class="line">  <span class="title function_">name</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;我是xxx&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readonly</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="comment">// target对象原来的值如下</span></span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//   value: specifiedFunction,</span></span><br><span class="line">  <span class="comment">//   enumerable: false,</span></span><br><span class="line">  <span class="comment">//   configurable: true,</span></span><br><span class="line">  <span class="comment">//   writable: true</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line">  target.<span class="property">writable</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>装饰器在 js 中仅仅可以修饰类和属性，不能修饰独立的函数，函数存在变量提升。</li><li>装饰器对类的行为的改变，是代表编译时发生的，而不是在运行时。</li><li>装饰器能在编译阶段运行代码。</li><li>装饰器的顺序十分重要。</li><li>合理利用装饰器可以极大的提高开发效率，对一些非逻辑相关的代码进行封装提炼能够帮助我们快速完成重复性的工作，节省时间。</li><li>大量的装饰器可能会导致不可读性增强，谨慎食用。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1、<a href="https://juejin.cn/post/6844903506562777101">JS 装饰器（Decorator）场景实战</a></p><p>2、<a href="https://es6.ruanyifeng.com/#docs/decorator">ECMAScript 6 入门—阮一峰</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;【拿来吧你】装饰器&quot;&gt;&lt;a href=&quot;#【拿来吧你】装饰器&quot; class=&quot;headerlink&quot; title=&quot;【拿来吧你】装饰器&quot;&gt;&lt;/a&gt;【拿来吧你】装饰器&lt;/h2&gt;&lt;p&gt;许多面向对象的语言都有修饰器（Decorator）函数，用来修改，或者注释类的行为。</summary>
      
    
    
    
    
    <category term="Javascript" scheme="https://kinfuy.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>node发送邮件</title>
    <link href="https://kinfuy.github.io/5dce846060c3/"/>
    <id>https://kinfuy.github.io/5dce846060c3/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="node-发送邮件"><a href="#node-发送邮件" class="headerlink" title="node 发送邮件"></a>node 发送邮件</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>为了实现这个功能，你首先要有一个邮箱；由于需要使用 SMTP 方式发送，你还需要开启相关功能。你可以登录你的邮箱，然后开启这个设置，以 QQ 邮箱为例（其他邮箱也差不多，主要开启服务获取到授权码就可以了）：</p><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c248fbe0ed3a44f1af8e90ae2d9f623a~tplv-k3u1fbpfcp-zoom-1.image" alt="QQ图片20200929192327.png"></p><p><strong>2.安装模块 nodemailer（当然也有其他的邮件模块，可以自行选择）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install nodemailer --save</span><br></pre></td></tr></table></figure><h3 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">&#x27;nodemailer&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="简单配置（这里只是一些简单的配置项，更多配置请查看官网，其实都是大同小异，需要什么添加什么就可以了）"><a href="#简单配置（这里只是一些简单的配置项，更多配置请查看官网，其实都是大同小异，需要什么添加什么就可以了）" class="headerlink" title="简单配置（这里只是一些简单的配置项，更多配置请查看官网，其实都是大同小异，需要什么添加什么就可以了）"></a>简单配置（这里只是一些简单的配置项，更多配置请查看官网，其实都是大同小异，需要什么添加什么就可以了）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> config = &#123;</span><br><span class="line">  <span class="attr">service</span>: <span class="string">&#x27;qq&#x27;</span>,</span><br><span class="line">  <span class="comment">// host: &quot;smtp.qq.com&quot;, //邮箱服务的主机，如smtp.qq.com</span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;465&#x27;</span>, <span class="comment">//对应的端口号</span></span><br><span class="line">  <span class="attr">secureConnection</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">//secureConnection:false,</span></span><br><span class="line">  <span class="comment">//用户信息</span></span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;前期准备的邮箱&#x27;</span>,</span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&#x27;授权码&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> transporter = nodemailer.<span class="title function_">createTransport</span>(config);</span><br></pre></td></tr></table></figure><h3 id="当然你也可以单独抽离为一个模块方便后期使用-email-js"><a href="#当然你也可以单独抽离为一个模块方便后期使用-email-js" class="headerlink" title="当然你也可以单独抽离为一个模块方便后期使用(email.js)"></a>当然你也可以单独抽离为一个模块方便后期使用(email.js)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">&#x27;nodemailer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置邮箱配置</span></span><br><span class="line"><span class="keyword">let</span> config = &#123;</span><br><span class="line">  <span class="attr">service</span>: <span class="string">&#x27;qq&#x27;</span>,</span><br><span class="line">  <span class="comment">// host: &quot;smtp.qq.com&quot;, //邮箱服务的主机，如smtp.qq.com</span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;465&#x27;</span>, <span class="comment">//对应的端口号</span></span><br><span class="line">  <span class="attr">secureConnection</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">//secureConnection:false,</span></span><br><span class="line">  <span class="comment">//用户信息</span></span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;前期准备的邮箱&#x27;</span>,</span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&#x27;授权码&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> transporter = nodemailer.<span class="title function_">createTransport</span>(config);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sendQQemail = <span class="keyword">function</span> (<span class="params">mailOptions</span>) &#123;</span><br><span class="line">  transporter.<span class="title function_">sendMail</span>(mailOptions, <span class="function">(<span class="params">error, info</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Message: <span class="subst">$&#123;info.messageId&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`sent: <span class="subst">$&#123;info.response&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sendQQemail</span> = sendQQemail;</span><br></pre></td></tr></table></figure><p>到这里你就可以完成一些简单的邮件发送了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;node-发送邮件&quot;&gt;&lt;a href=&quot;#node-发送邮件&quot; class=&quot;headerlink&quot; title=&quot;node 发送邮件&quot;&gt;&lt;/a&gt;node 发送邮件&lt;/h2&gt;&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="Nodejs" scheme="https://kinfuy.github.io/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>关于EventLoop的简单理解</title>
    <link href="https://kinfuy.github.io/4dc6f64d2c21/"/>
    <id>https://kinfuy.github.io/4dc6f64d2c21/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于-EventLoop-的简单理解"><a href="#关于-EventLoop-的简单理解" class="headerlink" title="关于 EventLoop 的简单理解"></a>关于 EventLoop 的简单理解</h2><h3 id="EventLoop-出现的目的"><a href="#EventLoop-出现的目的" class="headerlink" title="EventLoop 出现的目的"></a>EventLoop 出现的目的</h3><h4 id="js-单线程"><a href="#js-单线程" class="headerlink" title="js 单线程"></a>js 单线程</h4><p>众所周知 js 是单线程的，那为什么是单线程嘞，作为浏览器脚本语言，JavaScript 的主要用途是与用户互动，以及操作 DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定 JavaScript 同时有两个线程，一个线程在某个 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p><h4 id="单线程解决方案"><a href="#单线程解决方案" class="headerlink" title="单线程解决方案"></a>单线程解决方案</h4><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。如果排队是因为计算量大，CPU 忙不过来，倒也算了，但是很多时候 CPU 是闲着的，因为 IO 设备（输入输出设备）很慢（比如 Ajax 操作从网络读取数据），不得不等着结果出来，再往下执行。<strong>于是就有了 EventLoop 的出现。</strong></p><h3 id="宏任务与微任务从哪里来"><a href="#宏任务与微任务从哪里来" class="headerlink" title="宏任务与微任务从哪里来"></a>宏任务与微任务从哪里来</h3><h4 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h4><ul><li>Promise ，当调用 Promise.resolve() 或者 Promise.reject() 的时候，会产生微任务。</li><li>MutationObserver 接口，监听 DOM 节点发生改变的时候，就会产生 DOM 变化记录的微任务。</li><li>Process.nextTick（Node 独有）</li></ul><h4 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h4><ul><li>渲染事件（如解析 DOM、计算布局、绘制）</li><li>用户交互事件（如鼠标点击、滚动页面、放大缩小等）</li><li>JavaScript 脚本执行事件</li><li>网络请求完成、文件读写完成事件</li></ul><h3 id="执行顺序图解（图片来自网络）"><a href="#执行顺序图解（图片来自网络）" class="headerlink" title="执行顺序图解（图片来自网络）"></a>执行顺序图解（图片来自网络）</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9a2c34210054f06aa29468f17055207~tplv-k3u1fbpfcp-watermark.image"></p><h3 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h3><ul><li>js 会先执行主线程任务，遇到微任务就放进微任务队列，遇到宏任务就放入宏任务队列。</li><li>主线程代码执行完成后就会从微任务队列中去取微任务执行直到微任务队列清空，</li><li>微任务队列完成后就会从宏任务队列中取出宏任务执行，<strong>（个人理解：主线程代码就是第一个宏任务）</strong> 如主线程任务一般，遇到微任务放入微任务队列，遇到宏任务放入宏任务队列。</li><li>重复此过程，这就是事件循环机制。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于-EventLoop-的简单理解&quot;&gt;&lt;a href=&quot;#关于-EventLoop-的简单理解&quot; class=&quot;headerlink&quot; title=&quot;关于 EventLoop 的简单理解&quot;&gt;&lt;/a&gt;关于 EventLoop 的简单理解&lt;/h2&gt;&lt;h3 id=&quot;E</summary>
      
    
    
    
    
    <category term="Javascript" scheme="https://kinfuy.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS 如何终止 forEach 循环</title>
    <link href="https://kinfuy.github.io/77ff08b840cd/"/>
    <id>https://kinfuy.github.io/77ff08b840cd/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-如何终止-forEach-循环"><a href="#JS-如何终止-forEach-循环" class="headerlink" title="JS 如何终止 forEach 循环"></a>JS 如何终止 forEach 循环</h2><h3 id="JS-如何终止-forEach-循环-break-报错，return-跳不出循环"><a href="#JS-如何终止-forEach-循环-break-报错，return-跳不出循环" class="headerlink" title="JS 如何终止 forEach 循环 break 报错，return 跳不出循环"></a>JS 如何终止 forEach 循环 break 报错，return 跳不出循环</h3><ul><li><p>终止 forEach 可以使用 try catch 内部抛出错误，catch 捕获错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item === <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span>(<span class="string">&#x27;循环终止&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;e: &#x27;</span>, e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="当然我们大可以用其他方法代替"><a href="#当然我们大可以用其他方法代替" class="headerlink" title="当然我们大可以用其他方法代替"></a>当然我们大可以用其他方法代替</h3><ul><li><p>Array.prototype.some</p><p>当 return true 的时候，会终止遍历</p></li><li><p>Array.prototype.every</p><p>当 return false 的时候，会终止遍历</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS-如何终止-forEach-循环&quot;&gt;&lt;a href=&quot;#JS-如何终止-forEach-循环&quot; class=&quot;headerlink&quot; title=&quot;JS 如何终止 forEach 循环&quot;&gt;&lt;/a&gt;JS 如何终止 forEach 循环&lt;/h2&gt;&lt;h3 id=&quot;J</summary>
      
    
    
    
    
    <category term="Javascript" scheme="https://kinfuy.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>【gacm】傻瓜式git账号管理工具</title>
    <link href="https://kinfuy.github.io/2db2d16c017b/"/>
    <id>https://kinfuy.github.io/2db2d16c017b/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="【gacm】傻瓜式-git-账号管理工具"><a href="#【gacm】傻瓜式-git-账号管理工具" class="headerlink" title="【gacm】傻瓜式 git 账号管理工具"></a>【gacm】傻瓜式 git 账号管理工具</h2><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>最近多个项目老是需要切换 git 账号，git 命令都输入烦了，就想能不能像 nvm，或者 nrm 一样管理 git 账户，正好最近写了一个 node-cli 的模板，正好有用武之地，说干就干。</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05cf68ef26d34d28a3480043ac980f2c~tplv-k3u1fbpfcp-watermark.image" alt="动画.gif"></p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>just like nvm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">gacm ls</span><br><span class="line"></span><br><span class="line">gacm use xxx ---local</span><br><span class="line"></span><br><span class="line">gacm use xxx ---global</span><br><span class="line"></span><br><span class="line">gacm add --name xxx --email xxx</span><br><span class="line"></span><br><span class="line">gacm delate user</span><br></pre></td></tr></table></figure><h3 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h3><ul><li>切换 git 账户（包含当前项目，全局用户，系统用户）</li><li>增加用户</li><li>删除用户</li><li>查看用户列表</li></ul><h3 id="获取-cli-模板"><a href="#获取-cli-模板" class="headerlink" title="获取 cli 模板"></a>获取 cli 模板</h3><p>拉取一下我的模板工具<a href="https://github.com/alqmc/template-node-cli">template-node-cli</a></p><ul><li>内置了基于 typescript+rollup+gulp 的打包工具</li><li>给出了一些简单模板</li></ul><h3 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3><ul><li>通过 cli 执行 shell 命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --xxx user.name xxxx</span><br><span class="line">git config --xxx user.email xxxx</span><br></pre></td></tr></table></figure><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ul><li><a href="https://github.com/alqmc/gacm">github</a></li><li><a href="https://gitee.com/Y_onghu/gacm">gitee</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;【gacm】傻瓜式-git-账号管理工具&quot;&gt;&lt;a href=&quot;#【gacm】傻瓜式-git-账号管理工具&quot; class=&quot;headerlink&quot; title=&quot;【gacm】傻瓜式 git 账号管理工具&quot;&gt;&lt;/a&gt;【gacm】傻瓜式 git 账号管理工具&lt;/h2&gt;&lt;</summary>
      
    
    
    
    
    <category term="Tool" scheme="https://kinfuy.github.io/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>极简的git账号与npm registry管理工具</title>
    <link href="https://kinfuy.github.io/cae98ecc6495/"/>
    <id>https://kinfuy.github.io/cae98ecc6495/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="极简的-git-账号与-npm-registry-管理工具"><a href="#极简的-git-账号与-npm-registry-管理工具" class="headerlink" title="极简的 git 账号与 npm registry 管理工具"></a>极简的 git 账号与 npm registry 管理工具</h2><p>极简的 git 账号与 npm registry 管理工具（ Git Account Management Tools &amp; NPM Registry Manager ）</p><h3 id="Why-Do"><a href="#Why-Do" class="headerlink" title="Why Do"></a>Why Do</h3><ul><li><p>需要经常切换 git 账户，懂的都懂！！</p></li><li><p>当前 nrm 的最新版本<a href="mailto:&#110;&#114;&#109;&#x40;&#49;&#x2e;&#50;&#x2e;&#x35;">&#110;&#114;&#109;&#x40;&#49;&#x2e;&#50;&#x2e;&#x35;</a> 不显示当前源地址<a href="https://github.com/Pana/nrm/issues/111">Pana&#x2F;nrm#111</a>  过了一年也没有修复。</p></li></ul><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ul><li><p>✨ git 账户与 npm registry 管理工具（ 无缝切换)</p></li><li><p>🚀 极简的操作方式，just like nvm</p></li><li><p>😊 gacm [gnrm] ls 自动添加本地 git 账户或者本地 npm registry 管理工具</p></li><li><p>👋 gnrm 灵活配置，无污染，区分包管理器</p></li></ul><h3 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pnpm add gacm -g</span><br><span class="line"></span><br><span class="line">yarn add gacm -g</span><br><span class="line"></span><br><span class="line">npm install gacm -g</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><h4 id="切换-git-账户"><a href="#切换-git-账户" class="headerlink" title="切换 git 账户"></a>切换 git 账户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># just like nvm</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看用户列表，会自动添加本地用户</span></span></span><br><span class="line">gacm ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 切换git账户</span></span></span><br><span class="line">gacm use xxx --local</span><br><span class="line"></span><br><span class="line">gacm use xxx --global</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 添加用户，--alias 可选  定义用户别名</span></span></span><br><span class="line">gacm add --name xxx --email xxx [--alias xxx]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 定义用户别名</span></span></span><br><span class="line">gacm alias xxxx xxxx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 删除用户</span></span></span><br><span class="line">gacm delete user</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="切换-NPM-Registry"><a href="#切换-NPM-Registry" class="headerlink" title="切换 NPM Registry"></a>切换 NPM Registry</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># just like nvm</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看NPM Registry 列表，会自动添加本地NPM Registry</span></span></span><br><span class="line">gnrm ls [-p xxxx]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 切换 npm registry default npm</span></span></span><br><span class="line">gacm use xxx [-p yarn]</span><br><span class="line"></span><br><span class="line">gacm use xxx [-p cnpm]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 添加registry  --alias 可选  定义 registry 别名</span></span></span><br><span class="line">gacm add --name xxx --registry xxx [--alias xxx]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 定义registry别名</span></span></span><br><span class="line">gacm alias xxxx xxxx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 删除 registry</span></span></span><br><span class="line">gacm delete xxx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><p><a href="https://github.com/alqmc/gacm">github</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;极简的-git-账号与-npm-registry-管理工具&quot;&gt;&lt;a href=&quot;#极简的-git-账号与-npm-registry-管理工具&quot; class=&quot;headerlink&quot; title=&quot;极简的 git 账号与 npm registry 管理工具&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="Tool" scheme="https://kinfuy.github.io/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>vue中的依赖注入 provide 和 inject</title>
    <link href="https://kinfuy.github.io/cff9f2226dbb/"/>
    <id>https://kinfuy.github.io/cff9f2226dbb/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-中的依赖注入-provide-和-inject"><a href="#vue-中的依赖注入-provide-和-inject" class="headerlink" title="vue 中的依赖注入 provide 和 inject"></a>vue 中的依赖注入 provide 和 inject</h2><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f3167467ed314cf88e3766c92629e8d7~tplv-k3u1fbpfcp-zoom-1.image" alt="vue.jpg"><br>provide 选项允许我们指定我们想要提供给后代组件的数据&#x2F;方法。</p><p><strong>下面是一个组价刷新的案列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div &gt;</span><br><span class="line">    &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">      &lt;router-view v-if=&quot;isRouterAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isRouterAlive: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  provide() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      reload: this.reload</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reload() &#123;</span><br><span class="line">      this.isRouterAlive = false</span><br><span class="line">      this.$nextTick(function() &#123;</span><br><span class="line">        this.isRouterAlive = true</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在任何后代组件里，我们都可以使用 inject 选项来接收指定的我们想要添加在这个实例上的属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inject: [&#x27;reload&#x27;]</span><br></pre></td></tr></table></figure><p>注：依赖注入所提供的属性是非响应式</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vue-中的依赖注入-provide-和-inject&quot;&gt;&lt;a href=&quot;#vue-中的依赖注入-provide-和-inject&quot; class=&quot;headerlink&quot; title=&quot;vue 中的依赖注入 provide 和 inject&quot;&gt;&lt;/a&gt;vue 中</summary>
      
    
    
    
    
    <category term="Vuejs" scheme="https://kinfuy.github.io/tags/Vuejs/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题日记之链表中倒数第k个节点</title>
    <link href="https://kinfuy.github.io/2de7b3f5f8e6/"/>
    <id>https://kinfuy.github.io/2de7b3f5f8e6/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-刷题日记之链表中倒数第-k-个节点"><a href="#LeetCode-刷题日记之链表中倒数第-k-个节点" class="headerlink" title="LeetCode 刷题日记之链表中倒数第 k 个节点"></a>LeetCode 刷题日记之链表中倒数第 k 个节点</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e98f46351f84451804105231059ed4b~tplv-k3u1fbpfcp-watermark.image"></p><p>解题思路：遍历出链表长度，设置一个计数点，当找到倒数第 K 个节点时返回，链表（感觉走了笨办法）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getKthFromEnd = <span class="keyword">function</span> (<span class="params">head, k</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> conut = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> temp = head;</span><br><span class="line">  <span class="keyword">while</span> (temp &amp;&amp; temp.<span class="property">next</span>) &#123;</span><br><span class="line">    conut++;</span><br><span class="line">    temp = temp.<span class="property">next</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (head) &#123;</span><br><span class="line">    <span class="keyword">if</span> (conut - k + <span class="number">1</span> === index) &#123;</span><br><span class="line">      <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (head.<span class="property">next</span>) &#123;</span><br><span class="line">      index++;</span><br><span class="line">      head = head.<span class="property">next</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      head = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52936c070b394dc2b0c4059fad49f791~tplv-k3u1fbpfcp-watermark.image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LeetCode-刷题日记之链表中倒数第-k-个节点&quot;&gt;&lt;a href=&quot;#LeetCode-刷题日记之链表中倒数第-k-个节点&quot; class=&quot;headerlink&quot; title=&quot;LeetCode 刷题日记之链表中倒数第 k 个节点&quot;&gt;&lt;/a&gt;LeetCode</summary>
      
    
    
    
    
    <category term="Javascript" scheme="https://kinfuy.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题日记之找出数组中重复数字</title>
    <link href="https://kinfuy.github.io/5c29bf42b010/"/>
    <id>https://kinfuy.github.io/5c29bf42b010/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-刷题日记之找出数组中重复数字"><a href="#LeetCode-刷题日记之找出数组中重复数字" class="headerlink" title="LeetCode 刷题日记之找出数组中重复数字"></a>LeetCode 刷题日记之找出数组中重复数字</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d3e0fe55ffd4b7abd6e439dfdfb3e4e~tplv-k3u1fbpfcp-zoom-1.image"><br>对于一段程序，用不同的方法写消耗时间差距还是很大的，下面是本题的逐渐改进过程。</p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">let</span> findRepeatNumber = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> startIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">while</span> (startIndex &lt; nums.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> start = nums[startIndex];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = startIndex + <span class="number">1</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (start === nums[i]) &#123;</span><br><span class="line">        result = nums[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    startIndex++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da60c91ac7034fe283656d7d144fade1~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="减少时间复杂度，用-set-减少遍历次数"><a href="#减少时间复杂度，用-set-减少遍历次数" class="headerlink" title="减少时间复杂度，用 set 减少遍历次数"></a>减少时间复杂度，用 set 减少遍历次数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> findRepeatNumber = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">let</span> single = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (single.<span class="title function_">has</span>(nums[i])) &#123;</span><br><span class="line">      <span class="keyword">return</span> nums[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      single.<span class="title function_">add</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39185f7aaa334075957126ce3986c95e~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="先排序，再使用方法二"><a href="#先排序，再使用方法二" class="headerlink" title="先排序，再使用方法二"></a>先排序，再使用方法二</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> findRepeatNumber = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  nums = nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> single = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (single.<span class="title function_">has</span>(nums[i])) &#123;</span><br><span class="line">      <span class="keyword">return</span> nums[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      single.<span class="title function_">add</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">findRepeatNumber</span>(nums));</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12296120a0dd43fda9f8eabaa15a9ab8~tplv-k3u1fbpfcp-zoom-1.image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LeetCode-刷题日记之找出数组中重复数字&quot;&gt;&lt;a href=&quot;#LeetCode-刷题日记之找出数组中重复数字&quot; class=&quot;headerlink&quot; title=&quot;LeetCode 刷题日记之找出数组中重复数字&quot;&gt;&lt;/a&gt;LeetCode 刷题日记之找出数</summary>
      
    
    
    
    
    <category term="Javascript" scheme="https://kinfuy.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题日记之顺时针打印矩阵</title>
    <link href="https://kinfuy.github.io/2344f9a2d8f0/"/>
    <id>https://kinfuy.github.io/2344f9a2d8f0/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-刷题日记之顺时针打印矩阵"><a href="#LeetCode-刷题日记之顺时针打印矩阵" class="headerlink" title="LeetCode 刷题日记之顺时针打印矩阵"></a>LeetCode 刷题日记之顺时针打印矩阵</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/114a757fe3824f88a5a9ccd156478563~tplv-k3u1fbpfcp-zoom-1.image"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ade6260330b640efbc1fd830d484fb9c~tplv-k3u1fbpfcp-zoom-1.image"><br>解题思路：把矩阵分为一个一个的圆环，顺时针遍历圆环即可（设置边界值，根据边界值，遍历圆环），只剩下一行，从左到右依次添加，只剩下一列时，从上到下依次添加。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d65014d568f1437b968f47a14bc7dcb8~tplv-k3u1fbpfcp-zoom-1.image"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> matrix = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">  [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">spiralOrder</span> = (<span class="params">matrix</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (matrix.<span class="property">length</span> == <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> top = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> bottom = matrix.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> right = matrix[<span class="number">0</span>].<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (top &lt; bottom &amp;&amp; left &lt; right) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = left; i &lt; right; i++) result.<span class="title function_">push</span>(matrix[top][i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = top; i &lt; bottom; i++) result.<span class="title function_">push</span>(matrix[i][right]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = right; i &gt; left; i--) result.<span class="title function_">push</span>(matrix[bottom][i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = bottom; i &gt; top; i--) result.<span class="title function_">push</span>(matrix[i][left]);</span><br><span class="line">    right--;</span><br><span class="line">    top++;</span><br><span class="line">    bottom--;</span><br><span class="line">    left++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 剩下一行，从左到右依次添加</span></span><br><span class="line">  <span class="keyword">if</span> (top == bottom) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(matrix[top][i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = top; i &lt;= bottom; i++) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(matrix[i][left]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">spiralOrder</span>(matrix));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LeetCode-刷题日记之顺时针打印矩阵&quot;&gt;&lt;a href=&quot;#LeetCode-刷题日记之顺时针打印矩阵&quot; class=&quot;headerlink&quot; title=&quot;LeetCode 刷题日记之顺时针打印矩阵&quot;&gt;&lt;/a&gt;LeetCode 刷题日记之顺时针打印矩阵&lt;/</summary>
      
    
    
    
    
    <category term="Javascript" scheme="https://kinfuy.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>vue自定义指令之v-loading（附源码，可CV）</title>
    <link href="https://kinfuy.github.io/6a1134040a88/"/>
    <id>https://kinfuy.github.io/6a1134040a88/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<p>组件 API：<a href="http://tigerui.xkongkeji.com/#loading-%E5%8A%A0%E8%BD%BD">TigerUi：http://tigerui.xkongkeji.com</a></p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fda944b6929146fd86076ec5412e6e97~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34d8e9b2026041f4a1fffd87127f0185~tplv-k3u1fbpfcp-watermark.image" alt="soogif.gif"></p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div :class=&quot;[&#x27;ti-loading&#x27;, &#x27;ti-&#x27; + type]&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;loader-inner&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;loader-line-wrap&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;loader-line&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;loader-line-wrap&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;loader-line&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;loader-line-wrap&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;loader-line&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;loader-line-wrap&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;loader-line&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;loader-line-wrap&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;loader-line&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;span v-if=&quot;text&quot; class=&quot;loading-text&quot;&gt;&#123;&#123; text &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;TiLoading&#x27;,</span><br><span class="line">  props: [&#x27;text&#x27;, &#x27;type&#x27;],</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.ti-service &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  z-index: 99999;</span><br><span class="line">&#125;</span><br><span class="line">.ti-directive &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  z-index: 99999;</span><br><span class="line">&#125;</span><br><span class="line">.ti-loading &#123;</span><br><span class="line">  background: #000;</span><br><span class="line">  background: radial-gradient(#222, #000);</span><br><span class="line">  opacity: 0.5;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loader-inner &#123;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  height: 60px;</span><br><span class="line">  left: 0;</span><br><span class="line">  margin: auto;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  width: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.loading-text &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 50%;</span><br><span class="line">  bottom: -70px;</span><br><span class="line">  width: 200px;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">  text-align: center;</span><br><span class="line">  transform: translateX(-50%);</span><br><span class="line">  color: #409eff;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap &#123;</span><br><span class="line">  animation: spin 2000ms cubic-bezier(0.175, 0.885, 0.32, 1.275) infinite;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  height: 50px;</span><br><span class="line">  left: 0;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  transform-origin: 50% 100%;</span><br><span class="line">  width: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line &#123;</span><br><span class="line">  border: 4px solid transparent;</span><br><span class="line">  border-radius: 100%;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  height: 100px;</span><br><span class="line">  left: 0;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  width: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(1) &#123;</span><br><span class="line">  animation-delay: -50ms;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(2) &#123;</span><br><span class="line">  animation-delay: -100ms;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(3) &#123;</span><br><span class="line">  animation-delay: -150ms;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(4) &#123;</span><br><span class="line">  animation-delay: -200ms;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(5) &#123;</span><br><span class="line">  animation-delay: -250ms;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loader-line-wrap:nth-child(1) .loader-line &#123;</span><br><span class="line">  border-color: hsl(0, 80%, 60%);</span><br><span class="line">  height: 90px;</span><br><span class="line">  width: 90px;</span><br><span class="line">  top: 7px;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(2) .loader-line &#123;</span><br><span class="line">  border-color: hsl(60, 80%, 60%);</span><br><span class="line">  height: 76px;</span><br><span class="line">  width: 76px;</span><br><span class="line">  top: 14px;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(3) .loader-line &#123;</span><br><span class="line">  border-color: hsl(120, 80%, 60%);</span><br><span class="line">  height: 62px;</span><br><span class="line">  width: 62px;</span><br><span class="line">  top: 21px;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(4) .loader-line &#123;</span><br><span class="line">  border-color: hsl(180, 80%, 60%);</span><br><span class="line">  height: 48px;</span><br><span class="line">  width: 48px;</span><br><span class="line">  top: 28px;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(5) .loader-line &#123;</span><br><span class="line">  border-color: hsl(240, 80%, 60%);</span><br><span class="line">  height: 34px;</span><br><span class="line">  width: 34px;</span><br><span class="line">  top: 35px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes spin &#123;</span><br><span class="line">  0%,</span><br><span class="line">  15% &#123;</span><br><span class="line">    transform: rotate(0);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: rotate(360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="服务开启模式"><a href="#服务开启模式" class="headerlink" title="服务开启模式"></a>服务开启模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> loadingBase <span class="keyword">from</span> <span class="string">&#x27;./main.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> loadingConstructor = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(loadingBase);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Function</span> open 打开loading</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Function</span> close 关闭lading</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">serviceLoading</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_instance_</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_parent_</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_loadingList_</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">overflow</span> = <span class="literal">false</span>; <span class="comment">// 判断滚动条是否处于禁用状态</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; options  加载信息（可选）</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; el  loading挂载的位置，默认挂载在body</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">open</span>(<span class="params">options, el = <span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> id = <span class="variable language_">this</span>.<span class="property">_loadingList_</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (!el) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_parent_</span> = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isHTMLElement</span>(el)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_parent_</span> = el;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_parent_</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!options.<span class="property">type</span>) options.<span class="property">type</span> = <span class="string">&#x27;service&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_instance_</span> = <span class="keyword">new</span> <span class="title function_">loadingConstructor</span>(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>),</span><br><span class="line">      <span class="attr">propsData</span>: options,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">type</span> === <span class="string">&#x27;service&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">parentNode</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;hidden&#x27;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">overflow</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_parent_</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">_instance_</span>.<span class="property">$el</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_loadingList_</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">id</span>: id,</span><br><span class="line">      <span class="attr">parent</span>: <span class="variable language_">this</span>.<span class="property">_parent_</span>,</span><br><span class="line">      <span class="attr">_instance</span>: <span class="variable language_">this</span>.<span class="property">_instance_</span>,</span><br><span class="line">      <span class="attr">type</span>: options.<span class="property">type</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_parent_</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_instance_</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; num loading标识数字</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">close</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">_loadingList_</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Number</span>(id) === <span class="variable language_">this</span>.<span class="property">_loadingList_</span>[i].<span class="property">id</span> || !id) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_loadingList_</span>[i].<span class="property">parent</span>.<span class="title function_">removeChild</span>(</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_loadingList_</span>[i].<span class="property">_instance</span>.<span class="property">$el</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">overflow</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">_loadingList_</span>[i].<span class="property">type</span> === <span class="string">&#x27;service&#x27;</span>) &#123;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">parentNode</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;auto&#x27;</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">overflow</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_loadingList_</span>.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isHTMLElement</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="property">nodeType</span> &amp;&amp; obj.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title function_">serviceLoading</span>();</span><br></pre></td></tr></table></figure><h3 id="指令开启模式"><a href="#指令开启模式" class="headerlink" title="指令开启模式"></a>指令开启模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> serviceLoading <span class="keyword">from</span> <span class="string">&#x27;./service&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> directiveLoading = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;loading&#x27;</span>,</span><br><span class="line">  <span class="attr">bindFunctions</span>: &#123;</span><br><span class="line">    <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el, binding</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (binding.<span class="property">value</span>) &#123;</span><br><span class="line">        el.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;ti-loading-parent&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> text = el.<span class="title function_">getAttribute</span>(<span class="string">&#x27;ti-loading-text&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> id = serviceLoading.<span class="title function_">open</span>(</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;directive&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: text,</span><br><span class="line">          &#125;,</span><br><span class="line">          el</span><br><span class="line">        );</span><br><span class="line">        el.<span class="title function_">setAttribute</span>(<span class="string">&#x27;loadingId&#x27;</span>, id);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params">el, binding</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!binding.<span class="property">value</span>) &#123;</span><br><span class="line">        el.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;ti-loading-parent&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> id = el.<span class="title function_">getAttribute</span>(<span class="string">&#x27;loadingId&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (id) &#123;</span><br><span class="line">          serviceLoading.<span class="title function_">close</span>(id);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        el.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;ti-loading-parent&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> text = el.<span class="title function_">getAttribute</span>(<span class="string">&#x27;ti-loading-text&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> id = serviceLoading.<span class="title function_">open</span>(</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;directive&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: text,</span><br><span class="line">          &#125;,</span><br><span class="line">          el</span><br><span class="line">        );</span><br><span class="line">        el.<span class="title function_">setAttribute</span>(<span class="string">&#x27;loadingId&#x27;</span>, id);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> directiveLoading;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;组件 API：&lt;a href=&quot;http://tigerui.xkongkeji.com/#loading-%E5%8A%A0%E8%BD%BD&quot;&gt;TigerUi：http://tigerui.xkongkeji.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;效果图&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="Vuejs" scheme="https://kinfuy.github.io/tags/Vuejs/"/>
    
  </entry>
  
  <entry>
    <title>【低代码系列之万物之初】重生之梦回Dreamweaver？</title>
    <link href="https://kinfuy.github.io/21c22bfff2af/"/>
    <id>https://kinfuy.github.io/21c22bfff2af/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>上期，简单了说了一下低代码平台的现状以及认识,有小伙伴说这不就是 Dreamweaver 吗？拖拉拽，生成代码。只能说是这样也不是这样，Dreamweaver 能算作可视化编程的一个解决方案吧，但不能完全代表低代码平台。笔者并没有使用过 Dreamweaver（入手便是 vscode🥭）。所以网上冲浪了一下看网友的总结 Dreamweaver:</p><ul><li>1.生成的代码基本无法维护，生成一坨屎， 如果下一个接手这个项目的人不用 DW， 那人就蒙圈了</li><li>2.无法使用前端生态，与什么 vue，React 之类的框架水土不服，npm 你都不好引入</li><li>3.不利于开发者自身发展，对代码的认识很非常浅，长期 DW 会导致不能深入技术</li><li>4.不能编写复杂的系统，比如一些没有 UI 的算法库</li></ul><p>这基本也是开发低代码平台的难点，这一期来说说，怎么搭建一个低代码平台吧。浅析一下阿里低代码引擎（ Low-Code Engine）到底做了些什么。他们怎么解决这些难题的。</p><p><img src="/static/articles/lowcode1.png" alt="image.png"></p><h2 id="标准化协议"><a href="#标准化协议" class="headerlink" title="标准化协议"></a>标准化协议</h2><p>协议对于开发来说并不陌生，我们常见的什么 HTTP 协议、DNS 协议、TCP&#x2F;IP 协议等等，一份优秀的协议能未后面省去不少麻烦。也能规范多人协作的效率。</p><p>在<a href="https://developer.aliyun.com/ebook/read/7507">《低代码引擎技术白皮书》</a>中介绍了什么是协议</p><blockquote><p>从建设背景出发，共建小组明确了低代码引擎的建设理念：协议先行，最小内核，最强生态。<br>协议先行<br>一份共同遵守的协议是整个体系的基石，决定了整个体系是否能够足够包容，兼容足够多的上层场景，同时也是整体技术体系能否足够稳定发展的基石，后续所有的引擎实现都是服务于协议的。</p></blockquote><ul><li><p>打破物料孤岛 🥝</p></li><li><p>低代码生态的基础 🍌</p></li><li><p>低代码引擎实现标准 🍉</p></li></ul><h3 id="协议链接"><a href="#协议链接" class="headerlink" title="协议链接"></a>协议链接</h3><p><a href="https://lowcode-engine.cn/lowcode">《低代码引擎搭建协议规范》</a></p><p><a href="https://lowcode-engine.cn/material">《低代码引擎物料协议规范》</a></p><p><a href="https://lowcode-engine.cn/assets">《低代码引擎资产包协议规范》</a></p><h2 id="最小内核"><a href="#最小内核" class="headerlink" title="最小内核"></a>最小内核</h2><p>Low-Code Engine 把低代码平台拆分出四个核心模块,涵盖了低代码平台的整个生命周期。</p><ul><li><p>入料模块</p><blockquote><p>入料能力，让组件在低代码平台使用更容易</p></blockquote></li><li><p>编排模块</p><blockquote><p>精心打造的编排模块，让拖拽、配置能力集成变得更简单</p></blockquote></li><li><p>渲染模块</p><blockquote><p>运行时渲染，快速提供协议的渲染能力</p></blockquote></li><li><p>出码模块</p><blockquote><p>出码能力，提升低代码的扩展性和性能</p></blockquote></li></ul><h2 id="最强生态"><a href="#最强生态" class="headerlink" title="最强生态"></a>最强生态</h2><ul><li><p>物料生态<br>物料是页面搭建的原料也是低代码的基础</p><p><img src="/static/articles/material.png" alt="image.png"></p></li><li><p>设计器生态<br>设计器优化基础物料的编排属性</p><p><img src="/static/articles/setter.png" alt="image.png"></p></li><li><p>插件生态<br>插件功能赋予低代码引擎更高的灵活性，低代码引擎的生态提供了一些官方的插件，但是无法满足所有人的需求，所以提供了强大的插件定制功能。<br>通过定制插件，在和低代码引擎解耦的基础上，我们可以和引擎核心模块进行交互，从而满足多样化的功能。不仅可以自定义插件的 UI，还可以实现一些非 UI 的逻辑：</p><p><img src="/static/articles/plugin.png" alt="image.png"></p></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>看完 Low-Code Engine 的设计，还觉得低代码平台就是简单的拖拉拽吗？下期再说说看 Low-Code Engine 怎么打通物料，渲染器，设计器，怎么优雅的数据通信。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li><a href="https://lowcode-engine.cn/">低代码引擎</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;上期，简单了说了一下低代码平台的现状以及认识,有小伙伴说这不就是 Dreamweaver 吗？拖拉拽，生成代码。只能说是这样也不是这样，Dr</summary>
      
    
    
    
    
    <category term="InformalEssay" scheme="https://kinfuy.github.io/tags/InformalEssay/"/>
    
  </entry>
  
  <entry>
    <title>【低代码平台之哈姆雷特】千变万化的属性设置器</title>
    <link href="https://kinfuy.github.io/d3353580e1ff/"/>
    <id>https://kinfuy.github.io/d3353580e1ff/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>一个低代码平台最核心部分，可能大多数人都觉得是渲染器部分，而我更觉得属性设置器才是正正的灵魂所在，渲染器，物料决定了一个低代码平台的下线，而属性设置器决定了上线。就像一千个观众眼中有一千个哈姆雷特一样。今天就带大家看看 lowcode-engine 是怎么实现属性设置器的。</p><h2 id="什么是属性设置器"><a href="#什么是属性设置器" class="headerlink" title="什么是属性设置器"></a>什么是属性设置器</h2><p>我们先来梳理一下，我们来写 vue 的时候，使用一个组件，肯定会有很多属性，事件，样式需要我们去定义，低代码平台也一样，只是简化了我们使用的成本，利用这种可视化的方式去设置，组件的这些参数依然需要有地方去告诉组件，该怎么去渲染。这是就是属性设置器发挥作用的地方了。</p><blockquote><p>设置器主要用于低代码组件属性值的设置，顾名思义叫”设置器”，又称为 Setter。由于组件的属性有各种类型，需要有与之对应的设置器支持，每一个设置器对应一个值的类型。—— lowcode-engine 官方定义</p></blockquote><p><img src="/static/articles/setter.png" alt="物料"></p><p>我们可以很清晰的看见 lowcode-engine 将设置器分为四类：</p><ul><li>属性：展示该物料常规的属性</li><li>样式：展示该物料样式的属性</li><li>事件：如果该物料有声明事件，则会出现事件面板，用于绑定事件。</li><li>高级：两个逻辑相关的属性，<strong>条件渲染</strong>和<strong>循环</strong></li></ul><p>其实从上面不难看出，这四个分类基本上涵盖了绝大部分场景的需要。我们在后期只需要根据不同的使用对象开放相对应的功能即可。</p><h2 id="该如何实现一个属性设置器"><a href="#该如何实现一个属性设置器" class="headerlink" title="该如何实现一个属性设置器"></a>该如何实现一个属性设置器</h2><p>简单的梳理了一下思路与官方可能不完全一致，lowcode-engine 实现的相当复杂，再加上是 React 代码，没有写过，看起来还是有点吃力，这种复杂的系统，lowcode-engine 官方采用了面向对象的写法。每一个属性设置器都是一个 setter 类，他们之间可以相互嵌套，通过 path 路径操作具体的值，不了解的可以看一下<a href="https://www.lodashjs.com/">【lodashjs】</a>get 和 set 方法的实现。这样就可以和具体的每一个设置器之间分开来，只需要每个设置抛出对应的值变化。触发事件显示对应值即可。</p><p><img src="/static/articles/setter1.png" alt="setter"></p><p>通过上图我们可以清晰的看见，物料与渲染器，与属性设置器之间的联系，setter 与 setter 的关系，其实也就对应着我们的具体属性结构，有多少个属性就会生成多少 setter，彼此之间构成一个树形结构，path 路径作为沟通桥梁，获取值修改值。</p><p>贴一段官方代码，这个就是 setter 实现的一个接口，定义每一个 setter 拥有的属性方法，都贴心的给出了注释</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">SettingTarget</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 同样类型的节点</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">isSameComponent</span>: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 一个</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">isSingle</span>: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 多个</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">isMultiple</span>: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 编辑器引用</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">editor</span>: <span class="title class_">IEditor</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 访问路径</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">path</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 顶端</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">top</span>: <span class="title class_">SettingTarget</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 父级</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">parent</span>: <span class="title class_">SettingTarget</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取当前值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">getValue</span>: <span class="function">() =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置当前值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">setValue</span>: <span class="function">(<span class="params">value: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取得子项</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">get</span>: <span class="function">(<span class="params">propName: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt;</span> <span class="title class_">SettingTarget</span> | <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取得子项</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  getProps?: <span class="function">() =&gt;</span> <span class="title class_">SettingTarget</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取子项属性值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">getPropValue</span>: <span class="function">(<span class="params">propName: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置子项属性值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">setPropValue</span>: <span class="function">(<span class="params">propName: <span class="built_in">string</span> | <span class="built_in">number</span>, value: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 清除已设置值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">clearPropValue</span>: <span class="function">(<span class="params">propName: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取顶层附属属性值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">getExtraPropValue</span>: <span class="function">(<span class="params">propName: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置顶层附属属性值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">setExtraPropValue</span>: <span class="function">(<span class="params">propName: <span class="built_in">string</span>, value: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// @todo 补充 node 定义</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取 node 中的第一项</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">getNode</span>: <span class="function">() =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这个是内部实现了，要实现一个具体的 setter，不需要怎么复杂，这个只是内部 lowcode-engine 内部流转，<br>下面官方给出的几个设置器，有兴趣可以去看看怎么去实现的，最核心的部分是 ArraySetter 和 ObjectSetter,这两个 setter 提供属性嵌套的能力，也是最常用的.</p><p><a href="https://github.com/alibaba/lowcode-engine-ext">【官方设置器源码仓库】</a></p><p><a href="https://www.yuque.com/lce/doc/oc220p#fl46">【官方设置器列表说明】</a></p><p><img src="/static/articles/setter2.png" alt="setter"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>优秀的属性设置器，</p><ul><li>需要有优秀的扩展性</li><li>优秀的交互性</li><li>简化设置优先原则</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;一个低代码平台最核心部分，可能大多数人都觉得是渲染器部分，而我更觉得属性设置器才是正正的灵魂所在，渲染器，物料决定了一个低代码平台的下线，而属性设置</summary>
      
    
    
    
    
    <category term="InformalEssay" scheme="https://kinfuy.github.io/tags/InformalEssay/"/>
    
  </entry>
  
  <entry>
    <title>【低代码系列之序章】打翻前端的狗碗？</title>
    <link href="https://kinfuy.github.io/be5e0ee0637d/"/>
    <id>https://kinfuy.github.io/be5e0ee0637d/</id>
    <published>2023-02-18T02:03:43.572Z</published>
    <updated>2023-02-18T02:03:43.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是低代码平台"><a href="#什么是低代码平台" class="headerlink" title="什么是低代码平台"></a>什么是低代码平台</h2><p>让我们先看一下来着百度词条是怎么解释的：</p><p>低代码开发平台（LCDP）是无需编码（0 代码）或通过少量代码就可以快速生成应用程序的开发平台。通过可视化进行应用程序开发的方法（参考<a href="https://baike.baidu.com/item/%E5%8F%AF%E8%A7%86%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/22722596">可视编程语言</a>），使具有不同经验水平的开发人员可以通过图形化的用户界面，使用拖拽组件和模型驱动的逻辑来创建网页和移动应用程序。低代码开发平台（LCDP）的正式名称直到 2014 年 6 月才正式确定，整个低代码开发领域却可以追溯到更早前<a href="https://baike.baidu.com/item/%E7%AC%AC%E5%9B%9B%E4%BB%A3%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/7686026">第四代编程语言</a>和快速应用开发工具。</p><p><strong>【看完】呃呃呃…. 什么玩意</strong></p><h2 id="前端眼中的低代码"><a href="#前端眼中的低代码" class="headerlink" title="前端眼中的低代码"></a>前端眼中的低代码</h2><p>广义上的低代码平台包括低代码平台和零代码平台，它们都属于 APaaS（Application Platform as a Service  应用平台即服务），两者的主要区别在于对代码的依赖程度：</p><ul><li>低代码平台：通过自动代码生成和可视化编程，只需要少量代码，即可快速搭建各种应用</li><li>零代码平台：零开发经验的业务人员通过拖拽等方式，无需编写代码，即可快速搭建各种应用</li></ul><p>到底啥是低代码，在我看来就是<strong>拖拉拽，呼呼呼，一通操作，搞出一套能跑的系统，前端，后端，数据库，一把梭哈</strong>。当然这可能是最终目标，</p><p>现阶段市面上的低代码平台，大多基于一个具体化的场景来做的，比如从阿里钉钉跨平台协作方式，再到飞书上的审批流程，以及目前我们接触到的表单审批、投票的模板，这些都是关于低代码的实现方式。</p><p>我们来看一下阿里的开源低代码引擎</p><p><img src="/static/articles/lowcode.png" alt="image.png"></p><p>风格看起来也是更偏向于中后台管理系统的生成，有物料区，渲染区，和属性编辑区组成，相信大部分的低代码平台也是如此。</p><p><strong>低代码平台还有很长的路需要走</strong></p><h2 id="有低代码后就不要开发了？"><a href="#有低代码后就不要开发了？" class="headerlink" title="有低代码后就不要开发了？"></a>有低代码后就不要开发了？</h2><p>显而易见不管是什么低代码平台都取代不了，开发的地位，这个就像是问先有鸡还是先有蛋一样。但低代码平台的确会取代一些简单，场景固定化的工作，但不能做到取代的地步，结合，人工智能发展起来后或许会有可能，取代大部分开发。</p><ul><li><p><strong>低代码的形式是“可视化编程”，核心是“复用”</strong></p></li><li><p><strong>成也复用，败也复用</strong></p></li><li><p><strong>低代码的未来是拥抱人工智能</strong></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单来说就像是以前的手工制作产品，到后来工厂流水线加工产品一样，常规开发和低代码开发的关系大概也是也是如此，钉钉曾经就在发布会表示：“低代码开发是云计算之后的下一场 IT 革命。”，我相信这并不是危言耸听之词，那前端这个行业会消失吗？答案肯定是不会的，那是以前的手工师傅消失了吗？并没有只不过叫做产品设计师，或者其他更深入技术含量更高的工作中了而已，假象一下，未来低代码平台完全取代普通系统开发，那这些低代码平台就不需要维护，更新了吗？自我更新？我想这个应该属于人工智能的范畴了，当然这其中也有跟不上时代变化的人，消失在这个 IT 革命之中，就像当年的 jquery 一样成为过去式，作为技术应该时刻保持学习的心态，换句话说就是为了以接更美好的明天，哈哈哈，</p><ul><li><p><strong>低代码平台不可能导致前端行业的消失，反而会促进前端生态的发展</strong></p></li><li><p><strong>始终保持学习的心态，才不会被行业的淘汰（卷王之王？）</strong></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是低代码平台&quot;&gt;&lt;a href=&quot;#什么是低代码平台&quot; class=&quot;headerlink&quot; title=&quot;什么是低代码平台&quot;&gt;&lt;/a&gt;什么是低代码平台&lt;/h2&gt;&lt;p&gt;让我们先看一下来着百度词条是怎么解释的：&lt;/p&gt;
&lt;p&gt;低代码开发平台（LCDP）是无需编码</summary>
      
    
    
    
    
    <category term="InformalEssay" scheme="https://kinfuy.github.io/tags/InformalEssay/"/>
    
  </entry>
  
</feed>
