<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>写给对 “AI 焦虑” 的人，也写给自己👀</title>
      <link href="/e74a030ea11c/"/>
      <url>/e74a030ea11c/</url>
      
        <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>前段时间的一篇文章<a href="https://juejin.cn/post/7209578803160105020">【看阿里大佬狼叔怎么看待“前端已死论”】</a>，引起了很多网友的争议，关于“前端已死”与“内卷”这个话题。看了评论区，感觉现在技术圈，散播着一种焦躁，甚至摆烂的态度在里面。</p><p>我的观点就如我们上文提及的一样，AI只是工具。或许它会特别强大，强大到部分工作不得不靠它们完成。但我仍然相信它们是工具，是辅助。</p><h2 id="省流"><a href="#省流" class="headerlink" title="省流"></a>省流</h2><ul><li>本文没有省流😄</li></ul><h2 id="“AI革命”-or-“蒸汽革命”"><a href="#“AI革命”-or-“蒸汽革命”" class="headerlink" title="“AI革命” or “蒸汽革命”"></a>“AI革命” or “蒸汽革命”</h2><p>现在的AI与之前的“蒸汽革命”如出一辙。蒸汽机摧毁了很多的手工业者，但也催生商业机会，如果你的定位是“出卖时间换取报酬”，那么AI就是你的敌人，如果你的定位是“打造自己的赚钱机器”，你们ai就是你的朋友。</p><p>“蒸汽革命”和“AI革命”的区别在于，前者主要是对物质世界的改造，后者主要是对信息世界的改造；前者主要是提高了人类的物理能力，后者主要是提高了人类的智力能力；前者主要是依赖于自然资源，后者主要是依赖于数据资源。</p><p>拥抱变化，这不是人类与生俱来的能力吗？大自然生存法则，物竞天择，适者生存。</p><p>不管是在“蒸汽革命”，还是“AI革命”中，角色定位都是我们自己的选择，个人判断力也是在这个AI时代最重要的能力。</p><p>这是一个十分沉重的话题，仅代表个人观点。</p><h2 id="拥抱变化，保持对生活的热爱"><a href="#拥抱变化，保持对生活的热爱" class="headerlink" title="拥抱变化，保持对生活的热爱"></a>拥抱变化，保持对生活的热爱</h2><p>生活总要继续，摆烂也改变不了任何问题，开心是一天，焦虑也是一天。</p><p>在评论区看见一句话 <code>“保持学习有鸟用 你学得过AI吗”</code>，我们为什么不换个角度思考一下，我们为什么要学过ai嘞🤔，就像你跑得过汽车吗？，你飞的过飞机吗？我们会开汽车不就行了，我们能控制飞机不就行了。</p><p><code>去找下工作就知道了</code>，确实大环境怎样，也确实是这样，怎么选择，怎么做，抱怨大环境不好？抱怨AI抢了我们的饭碗吗？</p><p>不管世界发展多快，我们自己还是要保持节奏，保持平静，保持自己的进步速度，着急没用，放弃也没用。</p><h2 id="关于-“waitlist”"><a href="#关于-“waitlist”" class="headerlink" title="关于 “waitlist”"></a>关于 “waitlist”</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad060ea0776b4dfcb64ca054f3843992~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>最近一段时间加入各种waitlist列表中</p><ul><li>Goole Brad （等待中）</li><li>文心一言 （等待中）</li><li>ChatGPT-4 API （观望）</li><li>Github coplilot X （观望）</li><li>new Bing （获得）</li></ul><p>观望的原因是因为no money哈哈😄，从最近的new bing、chatGPT3.5、文心一格使用来看，没有感知到特别有用的地方，甚至在等待回答的过程中还感觉到有一些浪费时间。</p><p>不过看见一位推友分享了零编程经验，通过GPT4十分钟开发了一个浏览器插件，并且成功运行，实现了需求目标。有兴趣的小伙伴可以去看看<a href="https://twitter.com/sundyme/status/1638948624897015809?s=19">零编程经验开发浏览器插件</a></p><p>目前阶段不必过度担心ai取代的问题🤔。</p><h2 id="制造自己的AI“机器”"><a href="#制造自己的AI“机器”" class="headerlink" title="制造自己的AI“机器”"></a>制造自己的AI“机器”</h2><p>学习技能，抓住机会，制造属于自己的AI“机器”😄。</p><p>最近使用的两个关于chatGPT 的应用给大家推荐一下，这两个应用都是抓住了chatGPT风，短短几个星期就获得大量的star。</p><h3 id="openai-translator-（11-8k-star）"><a href="#openai-translator-（11-8k-star）" class="headerlink" title="openai-translator （11.8k star）"></a>openai-translator （11.8k star）</h3><p>第一个是yetone大佬的翻译跨平台工具，个人感觉超级好用，强烈推荐。相信也有很多小伙伴使用上了，有幸为大佬提过一个PR。</p><ul><li><a href="https://github.com/yetone/openai-translator">yetone &#x2F; openai-translator</a></li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bcf57f90e0fe4be29aadac6a7aaaa551~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4703af0a96784aed8f9e37962d8e453e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="ChatGPT-（25-8k-star）"><a href="#ChatGPT-（25-8k-star）" class="headerlink" title="ChatGPT （25.8k star）"></a>ChatGPT （25.8k star）</h3><p>第二个是lencx大佬，chatGPT桌面端，封装了一下网页版 (支持 Mac, Windows and Linux)，有时候网页抽风进不去，用它居然可以。🤔</p><ul><li><a href="https://github.com/lencx">lencx</a>&#x2F;<strong><a href="https://github.com/lencx/ChatGPT">ChatGPT</a></strong></li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eee363ed82c04bf4aa272466a6a3b135~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文仅代表本人观点，希望本文对大家有帮助，祝愿大家都有自己的选择，看清自己的方向，拥有自己的判断力，不随波逐流，做一个开心的人。😄</p>]]></content>
      
      
      <categories>
          
          <category> 开源大事件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ai </tag>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【译】GPT-4能否“真正”编写代码？</title>
      <link href="/2701d4a4a442/"/>
      <url>/2701d4a4a442/</url>
      
        <content type="html"><![CDATA[<h2 id="GPT-4能否“真正”编写代码？"><a href="#GPT-4能否“真正”编写代码？" class="headerlink" title="GPT-4能否“真正”编写代码？"></a>GPT-4能否“真正”编写代码？</h2><blockquote><p>原文链接：<a href="https://tylerglaiel.substack.com/p/can-gpt-4-actually-write-code">【Can GPT-4 <em>Actually</em> Write Code?】</a> – Tyler Glaiel</p></blockquote><h2 id="省流"><a href="#省流" class="headerlink" title="省流"></a>省流</h2><ul><li><p>笔者用了两个问题来测试GPT4: 小猫问题、新月问题。</p></li><li><p>著名的问题，或者已经有大量解决方案的问题，GPT-4 绝对可以写代码，它主要只是组装和混合它所见过的东西</p></li><li><p>尝试解决编程过程中遇到的以前未曾解决过问题或者新问题类型，它就完全失灵了。</p></li><li><p>此外，它喜欢“猜测”，如果将您引向错误的问题解决路径，这些猜测会浪费很多时间。</p></li><li><p>ChatGPT不知道答案，在其训练集中没有此类示例，也无法在其模型中找到该答案。有用的做法是简单地说“我不知道是否存在这样的算法。” 但它过于自信，只是胡乱编造。</p></li></ul><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>自从ChatGPT问世以来，我看到很多人发布了关于它编写代码的能力的帖子。人们已经发布了如何让它设计和实现数字拼图游戏（没有意识到这个游戏“发明”已经存在），他们如何让它克隆乒乓球，甚至我也用它编写了一些简单的Python实用程序脚本。 它非常有能力，是一个非常有用的工具。</p><p>但是，所有这些人们发布的例子中都有一个共同点。它们都是已经解决过的问题，或者对这些问题进行极小的修改。虽然说，公平地讲，很多编程工作实际上就是将现有解决方案粘合在一起，并将现有代码适应于您特定的用例，但编程中<em>困难</em> 的部分是解决以前没有被解决过的问题。</p><p>所以我决定在一个我几年前解决的特别困难的“算法”问题上进行测试。这个问题足够小和孤立，可以适应ChatGPT提示，但有足够的细微差别，让我觉得它可能会出错。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>让我们从描述实际的真实使用案例问题开始。在《Mewgenics》中，移动能力使用路径规划将猫从起点移动到目的地。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09894a7e809a454fac8ee25b34f305f3~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>猫有一个最大移动范围的属性（在这种情况下是6），而地块有一个代价（在这种情况下，基本地块为1，阻碍障碍物为9999）。我们还有水地块，通过它们需要花费2个代价。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0dbebf279273470bad414f63b279d24e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>到目前为止，我所描述的内容对于基于网格的路径规划来说都是很普通的。Dijkstra算法和A*算法都可以很好地处理不同成本的瓦片，并且仅需在一定距离后截断路径以处理最大移动范围问题。</p><p>当我们将火（和其他危险类型的方块）加入到混合中时，就会出现复杂性。与水方块不同，火方块在寻路时不需要额外花费代价，但是猫真的想避免通过火方块进行路径规划。这里展示了解决方法。还有很多更复杂的情况，如果有很多火砖，则应尽可能少地经过它们等等，并且所有这些都运作良好。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/780003bf945c4aafb46ef74d239093eb~tplv-k3u1fbpfcp-watermark.image" alt="cat.gif"></p><p>现在，为什么这是一个困难的问题并不完全明显。或者至少，为什么解决方案比简单修改启发式算法（如考虑火灾等“渴望成本”）的A<em>更加复杂也不是很清楚。这个问题与标准的A</em>路径规划非常微妙地不同，而解决方案虽然非常接近A*，但有一些非直觉性的变化对其影响很大。这是一个“难题”，回到2020年我第一次将火瓦片添加到游戏中时，这个路径规划问题花了几天时间才得以正确解决。主要复杂性在于“最大移动范围”的限制因素以及它如何与通过瓷砖的成本和用于避免危险瓷砖的“渴望成本”相互作用。您可以看到我发布的gif图像中，在尝试越过火灾区域并向前移动越远时路径会发生变化，最终无法在6步内绕过它，则必须穿过它来寻路。</p><p>而且除了简单的情况之外，它还有很多复杂性：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/749711fac8274ac2b4eb2026e2e22028~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a480c503b8e411796141e6792f6b3ab~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>（14个总移动次数与同一级别的10个总移动次数）</p><p>A*和Dijkstra算法中有一种内置的假设，即如果从A到C的最短路径经过了方块B，则它也会沿着从A到B的最短路径。因此，如果您已经找到了通往B的最短路径，那么可以直接从那里开始继续前往C。这些算法依赖于这种效率，因为在从优先级队列中提取内容时可以跳过已经找到更短路径的方块，并且在重构路径时可以依靠每个方块存储其在寻路算法期间被访问的来源方块来实现。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a821e7d484d24a4cb6acfca423d15c7a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这是我的意思：这种情况在“标准”的寻路中不会发生！从A到B的最佳路径与从A到C的最佳路径不一致，尽管从A到C的路径包含了瓦片B。这使得事情变得复杂，并打破了现有寻路依赖的一些假设。</p><h2 id="我的解决方案"><a href="#我的解决方案" class="headerlink" title="我的解决方案"></a>我的解决方案</h2><p>所以，它是使用修改后的成本和启发式函数的A<em>或Dijkstra算法对吧？嗯…几乎是这样，但并不完全一样。你可以在下面看到代码（还有一些额外的东西来最小化路径中的拐弯）。你会注意到……它并不完全像dijkstra或A</em>，而且其中有很多东西并不明显为什么要这样做。实际上，我在2020年写了这篇文章，并已经从我的脑海中清除了它……甚至对我来说也不再明显为什么要这样做。为了准备这篇博客文章，我进行了双重检查，并尝试将其简化为修改后的A*算法，但每次简化都会添加大量寻路错误。所以就是现在这个模样。而导致此处思路的火车头大部分已经被抛弃于我的脑海之中，因为它已经能够正常工作了。</p><p>为什么路径被存储在添加到优先队列中的单元格内，而不是按照A<em>标准方式将节点存储为它们从哪个节点到达的？为什么在弹出队列时检查路径是否是最佳路径，而不是在推入队列时进行检查？这两者都与A</em>有相当大的偏差，但显然对于此工作来说绝对必要。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">advanced_weighted_cell</span> &#123;</span><br><span class="line">    iVec2D cell;</span><br><span class="line">    <span class="type">int</span> cost;</span><br><span class="line">    <span class="type">int</span> desire;</span><br><span class="line">    <span class="type">int</span> bends = <span class="number">-1</span>;</span><br><span class="line">    temppodvector&lt;<span class="type">char</span>&gt; current_path;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">path_value</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cost*<span class="number">100</span>+bends;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::weak_ordering <span class="keyword">operator</span> &lt;=&gt;(<span class="type">const</span> advanced_weighted_cell&amp; rhs) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(desire != rhs.desire) <span class="keyword">return</span> desire &lt;=&gt; rhs.desire;</span><br><span class="line">        <span class="keyword">if</span>(cost != rhs.cost) <span class="keyword">return</span> cost &lt;=&gt; rhs.cost;</span><br><span class="line">        <span class="keyword">if</span>(bends != rhs.bends) <span class="keyword">return</span> bends &lt;=&gt; rhs.bends;</span><br><span class="line">        <span class="keyword">return</span> std::weak_ordering::equivalent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">podvector&lt;iVec2D&gt; <span class="title">TacticsGrid::advanced_pathfind</span><span class="params">(Character* source, iVec2D begin, iVec2D end, <span class="type">int</span> max_range, <span class="type">bool</span> sunken_only)</span></span>&#123;</span><br><span class="line">    max_range *= pathfind_cost_resolution;</span><br><span class="line"></span><br><span class="line">    podvector&lt;iVec2D&gt; path;</span><br><span class="line">    <span class="function">dynamic_grid&lt;<span class="type">int</span>&gt; <span class="title">pathvalues</span><span class="params">(width, depth)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; t:pathvalues) t = INT_MAX;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!Debug.<span class="built_in">CheckAssert</span>(pathvalues.<span class="built_in">in_bounds</span>(begin)) || !Debug.<span class="built_in">CheckAssert</span>(pathvalues.<span class="built_in">in_bounds</span>(end))) &#123;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> costs = <span class="built_in">pathfind_costs</span>(source, sunken_only);</span><br><span class="line"></span><br><span class="line">    std::priority_queue&lt;advanced_weighted_cell, std::vector&lt;advanced_weighted_cell&gt;, std::greater&lt;advanced_weighted_cell&gt;&gt; queue;</span><br><span class="line"></span><br><span class="line">    queue.<span class="built_in">push</span>(&#123;begin, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> total_checked = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!queue.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> tile = queue.<span class="built_in">top</span>();</span><br><span class="line">        queue.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(tile.<span class="built_in">path_value</span>() &lt;= pathvalues[tile.cell])&#123;</span><br><span class="line">            pathvalues[tile.cell] = tile.<span class="built_in">path_value</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(tile.cell == end) &#123;</span><br><span class="line">                iVec2D current = begin;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> i : tile.current_path)&#123;</span><br><span class="line">                    current += all_orientations[i];</span><br><span class="line">                    path.<span class="built_in">push_back</span>(current);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Debug.DisplayVariable(total_checked);</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> path;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">auto</span> &amp;v = all_orientations[i];</span><br><span class="line">                iVec2D t2 = v+tile.cell;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(pathvalues.<span class="built_in">in_bounds</span>(t2))&#123;</span><br><span class="line">                    advanced_weighted_cell next = &#123;t2, </span><br><span class="line">                                                   tile.cost+costs[t2].enter_cost + costs[tile.cell].exit_cost,</span><br><span class="line">                                                   tile.desire+(t2==end?<span class="number">0</span>:costs[t2].desire_cost),<span class="comment">// + iso_dist(t2-end), //heuristic is more efficient, but results in paths with non-optimal numbers of bends</span></span><br><span class="line">                                                   tile.bends&#125;;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(tile.current_path.<span class="built_in">size</span>() &gt; <span class="number">0</span> &amp;&amp; i != tile.current_path.<span class="built_in">back</span>()) next.bends++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(next.cost &lt;= max_range &amp;&amp; next.<span class="built_in">path_value</span>() &lt;= pathvalues[t2])&#123;</span><br><span class="line">                        next.current_path.<span class="built_in">resize</span>(tile.current_path.<span class="built_in">size</span>()+<span class="number">1</span>); <span class="comment">//minimize reallocations</span></span><br><span class="line">                        <span class="keyword">if</span>(tile.current_path.<span class="built_in">size</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            std::<span class="built_in">memcpy</span>(next.current_path.<span class="built_in">data</span>(), tile.current_path.<span class="built_in">data</span>(), tile.current_path.<span class="built_in">size</span>()*<span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                        next.current_path.<span class="built_in">back</span>() = i;</span><br><span class="line"></span><br><span class="line">                        queue.<span class="built_in">push</span>(next);</span><br><span class="line">                        total_checked++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论如何，这就是问题的所有背景信息。如果你想真正感受到它有多么不平凡（或者如果你认为它只是一个带有修改启发式的A*算法），欢迎尝试自己解决它。（如果你要“建议”我改进方法，请先在上下文中实际实现和尝试一下，并知道我不会使用它，因为我的方法已经很好了，在成千上万个不同情况下进行了彻底测试，并且没有任何性能问题）</p><h2 id="让我们看看ChatGPT表现如何"><a href="#让我们看看ChatGPT表现如何" class="headerlink" title="让我们看看ChatGPT表现如何"></a>让我们看看ChatGPT表现如何</h2><p>这篇文章的重点在于以下内容。实际的实验。 GPT-4（通过ChatGPT Plus）是否真正能够解决这个问题？ 我问了它：</p><blockquote><p>编写一个函数来解决以下问题： 代理需要在一个10x10的网格中从当前位置到目标位置找到最佳路径。 他们有5个点的有限移动范围 普通瓷砖通过移动花费1个点，水瓷砖通过移动花费2个点。 火焰瓷砖通过移动花费1个点，但是即使这意味着走更长的路线到达目的地（只要路径仍然在其有限运动范围内），他们也应该避免穿过它们。</p></blockquote><p>为了实验的目的，我明确省略了算法的细节，而是给出了需要解决的“问题”的描述。无论如何，这就是你开始处理问题的方式，而且我真正好奇是否可能有一个更明显或更简单的解决方案被我忽略了，所以我不想用实现细节来污染它思考问题。 我也没有说要使用哪种编程语言，因为我认为如果让计算机自己选择Python会比让它写C ++ 更好。毕竟我只关心实际算法。</p><p>ChatGPT 回复说，</p><blockquote><p>你可以使用A*寻路算法来考虑成本和约束条件，找到最优路径。这是一个解决问题的Python函数：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tile</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y, tile_type</span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.tile_type = tile_type</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cost</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.tile_type == <span class="string">&quot;water&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> self.tile_type == <span class="string">&quot;fire&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_fire</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.tile_type == <span class="string">&quot;fire&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heuristic</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a.x - b.x) + <span class="built_in">abs</span>(a.y - b.y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_star_search</span>(<span class="params">grid, start, goal, max_movement</span>):</span><br><span class="line">    frontier = []</span><br><span class="line">    heapq.heappush(frontier, (<span class="number">0</span>, start))</span><br><span class="line">    came_from = &#123;start: <span class="literal">None</span>&#125;</span><br><span class="line">    cost_so_far = &#123;start: <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> frontier:</span><br><span class="line">        current = heapq.heappop(frontier)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current == goal:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> neighbor <span class="keyword">in</span> get_neighbors(current, grid):</span><br><span class="line">            new_cost = cost_so_far[current] + neighbor.cost()</span><br><span class="line">            <span class="keyword">if</span> new_cost &lt;= max_movement <span class="keyword">and</span> (neighbor <span class="keyword">not</span> <span class="keyword">in</span> cost_so_far <span class="keyword">or</span> new_cost &lt; cost_so_far[neighbor]) <span class="keyword">and</span> <span class="keyword">not</span> neighbor.is_fire():</span><br><span class="line">                cost_so_far[neighbor] = new_cost</span><br><span class="line">                priority = new_cost + heuristic(goal, neighbor)</span><br><span class="line">                heapq.heappush(frontier, (priority, neighbor))</span><br><span class="line">                came_from[neighbor] = current</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> came_from, cost_so_far</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_neighbors</span>(<span class="params">tile, grid</span>):</span><br><span class="line">    neighbors = []</span><br><span class="line">    <span class="keyword">for</span> dx, dy <span class="keyword">in</span> ((-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">0</span>, <span class="number">1</span>)):</span><br><span class="line">        x, y = tile.x + dx, tile.y + dy</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= x &lt; <span class="built_in">len</span>(grid) <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; <span class="built_in">len</span>(grid[<span class="number">0</span>]):</span><br><span class="line">            neighbors.append(grid[x][y])</span><br><span class="line">    <span class="keyword">return</span> neighbors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reconstruct_path</span>(<span class="params">came_from, start, goal</span>):</span><br><span class="line">    path = [goal]</span><br><span class="line">    current = goal</span><br><span class="line">    <span class="keyword">while</span> current != start:</span><br><span class="line">        current = came_from[current]</span><br><span class="line">        path.append(current)</span><br><span class="line">    <span class="keyword">return</span> path[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_best_path</span>(<span class="params">grid, start, goal, max_movement</span>):</span><br><span class="line">    came_from, cost_so_far = a_star_search(grid, start, goal, max_movement)</span><br><span class="line">    <span class="keyword">if</span> goal <span class="keyword">not</span> <span class="keyword">in</span> came_from:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> reconstruct_path(came_from, start, goal)</span><br></pre></td></tr></table></figure><p>它有点理解问题，但是它不是通过“避免”穿过火焰来解决问题，而是永远不会穿过火焰。</p><p>我继续问：</p><p>这段代码拒绝通过火焰，但如果必须在移动范围内到达目的地，则仍应通过火焰。</p><p>它道歉并修复了a_star_search函数，方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a_star_search</span>(<span class="params">grid, start, goal, max_movement</span>):</span><br><span class="line">    frontier = []</span><br><span class="line">    heapq.heappush(frontier, (<span class="number">0</span>, start))</span><br><span class="line">    came_from = &#123;start: <span class="literal">None</span>&#125;</span><br><span class="line">    cost_so_far = &#123;start: <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> frontier:</span><br><span class="line">        current = heapq.heappop(frontier)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current == goal:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> neighbor <span class="keyword">in</span> get_neighbors(current, grid):</span><br><span class="line">            new_cost = cost_so_far[current] + neighbor.cost() + (<span class="number">1000</span> <span class="keyword">if</span> neighbor.is_fire() <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> new_cost - (<span class="number">1000</span> <span class="keyword">if</span> neighbor.is_fire() <span class="keyword">else</span> <span class="number">0</span>) &lt;= max_movement <span class="keyword">and</span> (neighbor <span class="keyword">not</span> <span class="keyword">in</span> cost_so_far <span class="keyword">or</span> new_cost &lt; cost_so_far[neighbor]):</span><br><span class="line">                cost_so_far[neighbor] = new_cost</span><br><span class="line">                priority = new_cost + heuristic(goal, neighbor)</span><br><span class="line">                heapq.heappush(frontier, (priority, neighbor))</span><br><span class="line">                came_from[neighbor] = current</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> came_from, cost_so_far</span><br></pre></td></tr></table></figure><p>再说一遍，还不太对。它没有区分通过火焰的惩罚成本和通过瓷砖的物理成本，因此它仍然不会穿过火焰（因为+1000的惩罚使得火焰瓷砖远超出你的移动范围）。</p><p>无论如何，我又反复尝试了几次，让它生成一个测试用例，并修复了在实际运行时出现的运行时错误。最终采用了这个方案，并将测试用例定制为一些简单易懂的失败情况。它在测试用例中混淆了x和y，但我不想因此与它争执，所以我只是处理好了（重新生成需要相当长时间）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tile</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y, tile_type</span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.tile_type = tile_type</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cost</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.tile_type == <span class="string">&quot;water&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> self.tile_type == <span class="string">&quot;fire&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_fire</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.tile_type == <span class="string">&quot;fire&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heuristic</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a.x - b.x) + <span class="built_in">abs</span>(a.y - b.y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_star_search</span>(<span class="params">grid, start, goal, max_movement</span>):</span><br><span class="line">    frontier = []</span><br><span class="line">    heapq.heappush(frontier, (<span class="number">0</span>, <span class="number">0</span>, start))</span><br><span class="line">    came_from = &#123;start: <span class="literal">None</span>&#125;</span><br><span class="line">    cost_so_far = &#123;start: <span class="number">0</span>&#125;</span><br><span class="line">    counter = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> frontier:</span><br><span class="line">        _, _, current = heapq.heappop(frontier)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current == goal:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> neighbor <span class="keyword">in</span> get_neighbors(current, grid):</span><br><span class="line">            new_cost = cost_so_far[current] + neighbor.cost()</span><br><span class="line">            <span class="keyword">if</span> new_cost &lt;= max_movement <span class="keyword">and</span> (neighbor <span class="keyword">not</span> <span class="keyword">in</span> cost_so_far <span class="keyword">or</span> new_cost &lt; cost_so_far[neighbor]):</span><br><span class="line">                cost_so_far[neighbor] = new_cost</span><br><span class="line">                priority = new_cost + heuristic(goal, neighbor) + (<span class="number">1000</span> <span class="keyword">if</span> neighbor.is_fire() <span class="keyword">and</span> <span class="keyword">not</span> (current.is_fire() <span class="keyword">and</span> neighbor == goal) <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">                heapq.heappush(frontier, (priority, counter, neighbor))</span><br><span class="line">                came_from[neighbor] = current</span><br><span class="line">                counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> came_from, cost_so_far</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_neighbors</span>(<span class="params">tile, grid</span>):</span><br><span class="line">    neighbors = []</span><br><span class="line">    <span class="keyword">for</span> dx, dy <span class="keyword">in</span> ((-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">0</span>, <span class="number">1</span>)):</span><br><span class="line">        x, y = tile.x + dx, tile.y + dy</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= x &lt; <span class="built_in">len</span>(grid) <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; <span class="built_in">len</span>(grid[<span class="number">0</span>]):</span><br><span class="line">            neighbors.append(grid[x][y])</span><br><span class="line">    <span class="keyword">return</span> neighbors</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reconstruct_path</span>(<span class="params">came_from, start, goal</span>):</span><br><span class="line">    path = [goal]</span><br><span class="line">    current = goal</span><br><span class="line">    <span class="keyword">while</span> current != start:</span><br><span class="line">        current = came_from[current]</span><br><span class="line">        path.append(current)</span><br><span class="line">    <span class="keyword">return</span> path[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_best_path</span>(<span class="params">grid, start, goal, max_movement</span>):</span><br><span class="line">    came_from, cost_so_far = a_star_search(grid, start, goal, max_movement)</span><br><span class="line">    <span class="keyword">if</span> goal <span class="keyword">not</span> <span class="keyword">in</span> came_from:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> reconstruct_path(came_from, start, goal)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_tile_grid</span>(<span class="params">letter_grid</span>):</span><br><span class="line">    tile_grid = []</span><br><span class="line">    <span class="keyword">for</span> x, row <span class="keyword">in</span> <span class="built_in">enumerate</span>(letter_grid):</span><br><span class="line">        tile_row = []</span><br><span class="line">        <span class="keyword">for</span> y, tile_type <span class="keyword">in</span> <span class="built_in">enumerate</span>(row):</span><br><span class="line">            <span class="keyword">if</span> tile_type == <span class="string">&quot;R&quot;</span>:</span><br><span class="line">                tile_row.append(Tile(x, y, <span class="string">&quot;regular&quot;</span>))</span><br><span class="line">            <span class="keyword">elif</span> tile_type == <span class="string">&quot;W&quot;</span>:</span><br><span class="line">                tile_row.append(Tile(x, y, <span class="string">&quot;water&quot;</span>))</span><br><span class="line">            <span class="keyword">elif</span> tile_type == <span class="string">&quot;F&quot;</span>:</span><br><span class="line">                tile_row.append(Tile(x, y, <span class="string">&quot;fire&quot;</span>))</span><br><span class="line">        tile_grid.append(tile_row)</span><br><span class="line">    <span class="keyword">return</span> tile_grid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_case</span>(<span class="params">letter_grid, start_coords, goal_coords, max_movement</span>):</span><br><span class="line">    grid = create_tile_grid(letter_grid)</span><br><span class="line">    start = grid[start_coords[<span class="number">0</span>]][start_coords[<span class="number">1</span>]]</span><br><span class="line">    goal = grid[goal_coords[<span class="number">0</span>]][goal_coords[<span class="number">1</span>]]</span><br><span class="line">    path = find_best_path(grid, start, goal, max_movement)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> path:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Path found:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> tile <span class="keyword">in</span> path:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;(<span class="subst">&#123;tile.x&#125;</span>, <span class="subst">&#123;tile.y&#125;</span>) -&gt; <span class="subst">&#123;tile.tile_type&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No path found within the movement range.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">letter_grid = [</span><br><span class="line">    [<span class="string">&quot;R&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;R&quot;</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">start_coords = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">goal_coords = (<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">max_movement = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">test_case(letter_grid, start_coords, goal_coords, max_movement)</span><br></pre></td></tr></table></figure><p>在给定的测试用例中，因为它以火砖结束，所以它忽略了尝试避开火砖。 </p><p>我要求它修复这个问题，但是它给了我一个解决方案，回到了完全无法通过火砖进行路径规划的状态。</p><p>我又要求它修复这个问题，结果又回到之前的状态。</p><p>在绕圈子几次之后，我决定就这样了。它接近成功了。它似乎理解了问题，但实际上无法正确地解决它。</p><p>这会在2020年帮助我吗？可能不会。我试图采用它的解决方案，并使用我的人类大脑将其修改为实际有效的东西，但是它所走的道路并不完全正确，因此无法挽救。再次强调，从基本A<em>到实际解决方案的修改并不明显，因此从“只是A</em>”开始并没有太多帮助。此外，GPT甚至不能真正意识到这个问题比“修改A*”更难，这一点洞察力原本可以在我最初编写该算法时节省时间。</p><p>无论如何，也许这不是适合GPT的问题。毕竟，A*算法是一种非常常见的算法，在其训练数据中肯定有成千上万甚至数百万个示例，因此它可能会受到限制，无论你多么努力推动和帮助它都可能不能偏离太远。</p><h2 id="其他尝试"><a href="#其他尝试" class="headerlink" title="其他尝试"></a>其他尝试</h2><p>我用了几个其他“困难”的算法再次尝试，结果每次都差不多。它经常只会提出类似问题的解决方案，而忽略使您的问题与众不同的微妙之处，在几次修订后，它通常就会崩溃。 </p><p>在这种情况下（这是Mew解决反弹的方式），它基本上错过了问题的<em>所有</em>细节，比如说不能让两个移动物体同时移动到同一时间。这一个特别糟糕，在我意外地问GPT 3.5而不是GPT 4时，它比GPT 4更接近真正的解决方案。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a0250e80d32485e88f9358f725f08e6~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这个……根本不接近。 当我无意中询问 GPT 3.5 时，它变得更加接近了。这实际上是一个“可行的解决方案，但存在一些错误和边缘情况”。它不能处理物体在链式移动中相互移动的循环，但是比起 GPT4 给出的绝对没有什么要好多了……奇怪…</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c609ed809a8642a5ab638d1ec636af7d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ec9828bd4254faea2ec8cccf0812d7a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>可能存在与其训练集中出现的类似问题。 很难想象真正独特的问题，它肯定没有见过任何类似的东西，至少是可以用一两段描述的。我们来试试一个奇怪构造的例子。让它创建一个在月牙形状之间进行碰撞检测算法。（我在快速搜索中找不到这个算法，并且它似乎有些非平凡，所以就让我们尝试吧）</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41df50357b244fcfa712b15423a3c747~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/062635f65a6c45b0880b12771901ae3d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>然后它编写了那个算法。值得称赞的是，如果你试图思考它为什么是错误的，这并不是显而易见的。但找到一个反例也不太难。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fef9904dc22748c098c3d8ed1f4c1e66~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我让它再试一次。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e91fa8f253644688a3c0b014cd84a15~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>再次说明，实际上很难找到反例，但这里有一个失败了2.a（外圆相撞，每个内圆与另一个的外圆相撞但彼此之间不会碰撞，然而新月形状却没有发生碰撞）的例子：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a22cd3aa37644a0688b62b046edcd867~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我认为ChatGPT现在只是在胡说八道。它没有答案，也想不出一个，所以现在只是编造东西。而且…它真的很擅长编造东西！就像那个算法…它失败的情况非常微妙！你可以轻松地将该算法发布到书中，并让人们误以为实现有错误时会导致碰撞检测中存在漏洞，因为它肯定<em>听起来</em>像能解决这个问题的类型算法。</p><h2 id="那么，GPT-4-真的能写代码吗？"><a href="#那么，GPT-4-真的能写代码吗？" class="headerlink" title="那么，GPT-4 真的能写代码吗？"></a>那么，GPT-4 真的能写代码吗？</h2><p>鉴于算法的描述或者是已经有大量现成例子在网上的著名问题的描述，GPT-4 绝对可以写代码。它主要只是组装和混合它所见过的东西，但公平地说…很多编程就是这样。</p><p>然而，当尝试解决<em>实际问题</em>时，它完全失灵。这些是编程过程中可能遇到的以前未曾解决过的新问题类型。此外，它喜欢“猜测”，如果将您引向错误的问题解决路径，则这些猜测会浪费很多时间。</p><p>新月的例子在这里有点令人担忧。ChatGPT不知道答案，在其训练集中没有此类示例，也无法在其模型中找到该答案。有用的做法是简单地说“我不知道是否存在这样的算法。”但它过于自信，只是胡乱编造。尽管它在编写简单代码方面表现出奇怪的能力，但它与许多其他领域存在相同的问题，这一事实被掩盖了一些。</p><p>无论如何，用它自己的话说。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dffe9155704c4644b19296a834eb3714~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 开源大事件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【初体验】Atom 的“精神继承者”，Atom 的创始人新作“Zed”</title>
      <link href="/b51d1d573c59/"/>
      <url>/b51d1d573c59/</url>
      
        <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>rust卷出天际，Atom 的创始人新作“Zed”，对标vscode的基于rust开发的代码编辑来了。今天获得了zed的体验资格，第一时间就下载来尝鲜一下。vscode现在插件安装多了确实有些卡顿感🤔</p><p>【10枚邀请码奉上】<a href="https://zed.dev/invites/FIEca2jU_qxJrUsS">https://zed.dev/invites/FIEca2jU_qxJrUsS</a></p><p>需要的小伙伴可以自行体验，现在仅支持Mac</p><h2 id="省流"><a href="#省流" class="headerlink" title="省流"></a>省流</h2><p>目前没有使用价值，功能对于一个code 编辑器是不合格。唯一亮点多人协同编辑，没有看见插件相关功能。建议过段时间（至少半年以上）再体验。🧐</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Zed 是一个高性能的多人协作代码编辑器，由 Atom 和 Tree-sitter 的创造者开发。Zed 用 Rust 编写，自定义原生 UI 框架，设计为“协作”产品。Zed 的主打特点是速度快，启动、加载文件和响应按键都非常迅速。Zed 还支持语法树、语言服务器协议、多缓冲区、集成终端、Vim 模式和主题等功能。</p><p>Zed 目前还未开源，但有开源计划，将于本周推出 Private Alpha。</p><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><p>下载安装后，打开ts文件就报告ts server 下载失败，初始印象就不好，我没有找到解决的方法，没有提供解决的指引，也不知道失败的结果，</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09e1a0f4a7f049d0b4701a717c783571~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>小巧思：面包屑加入了导航回退功能</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/611e07bee4fe441bbecc16f3a23e903f~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-03-13 22.33.13.png"></p><p>小巧思：独立的终端页面。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab74c55e5dc14693881cd0e516ef4b81~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-03-13 22.33.20.png"></p><p>确实markdown相关支持，或许是我没有找到。没看见插件商店，或者应用市场之类的东西。<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/062eec19b752467181f37df749180a25~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-03-13 22.14.41.png"></p><p>唯一的亮点，多人协同编辑功能。没有具体体验，不知道怎么样。<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aca4db957698470dbe6a1fd8d25f05db~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-03-13 22.16.52.png"></p><p>官方效果看起来还行<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3297b2f0a174057a7332b0d50d7833a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我想说的是到这里差不多结束了，我能体验到的功能，相比vscode功能少的不像话。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>官方测试对比性能，没有给出具体测试用例。具体不得而知。</p><h4 id="启动时间"><a href="#启动时间" class="headerlink" title="启动时间"></a>启动时间</h4><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e2e0f2c6e30a4c5194634f86415eee71~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-03-13 23.05.46.png"></p><h4 id="内存占用"><a href="#内存占用" class="headerlink" title="内存占用"></a>内存占用</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d77ea0c412174d87b59ccf142f7e7e27~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-03-13 23.05.57.png"></p><h4 id="插入延迟"><a href="#插入延迟" class="headerlink" title="插入延迟"></a>插入延迟</h4><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f00a277b8664115a7b558b2f1e3caea~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-03-13 23.06.04.png"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul><li>性能上体验不出差别，好像没看见插件功能，体量与vscode相比差距大，无法比较。</li><li>目前只能说是一个简版的文本编辑器。</li><li>相关操作按钮位置感觉不怎么友好，也可能是vscode用习惯了的原因，带有主观色彩。</li><li>唯一亮点就是多人编辑吧，但是感觉这个功能很鸡肋，只有特定场景下有用处，不应该是coding的重点功能，锦上添花还行。</li></ul><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>【官方特性介绍】<a href="https://zed.dev/features">https://zed.dev/features</a></p><p><em><strong>本文正在参加<a href="https://juejin.cn/post/7207698564641996856/" title="https://juejin.cn/post/7207698564641996856/">「金石计划」</a></strong></em></p><p>本文首发于 <a href="https://kinfuy.github.io/">@阿乐去买菜</a>，转载请署明出处</p>]]></content>
      
      
      <categories>
          
          <category> 开源大事件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🤔看阿里大佬狼叔怎么看待“前端已死论”</title>
      <link href="/ec184f727ddd/"/>
      <url>/ec184f727ddd/</url>
      
        <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>前几天被“前端已死”论刷屏了。最近看了掘金直播，狼叔专场，深有感触，前端时间我也写了相关低代码到文章，也提到了低代码对我们前端开发者者的影响，我也不认可这个“前端已死”论。</p><h3 id="直播回放"><a href="#直播回放" class="headerlink" title="直播回放"></a>直播回放</h3><p><a href="https://juejin.cn/live/2364265">【狼叔直播专场】</a></p><h2 id="省流"><a href="#省流" class="headerlink" title="省流"></a>省流</h2><ul><li>低码影响的主要是内部页面开发（ToB），前端ToB仅仅是小部分。</li><li>chatGPT 不能替代程序员。AI长期乐观，短期悲观，目前资源门槛过高。</li><li>大环境问题，是所有行业的问题，“降本增效” 是企业成为主旋律。我们应该保持技术热忱</li><li>没有目标“向钱看”，有目标“向前看”。</li></ul><blockquote><p>其实，贩卖焦虑的都是外行，做一个独立的思考者是必要的。这是个变革的时代，想躺平是不太容易的，但相应对变化还是有非常多的机会点的，比如当下创业环境，新的增长点。</p></blockquote><h2 id="关于低代码"><a href="#关于低代码" class="headerlink" title="关于低代码"></a>关于低代码</h2><p>低代码的出现就是技术成熟的表现，或者是瓶颈的表现。前端技术目前发展趋向于成熟，最近也有一种论调，“rust将是前端基建到未来”，这也正是技术发展稳定的表现，创新出现瓶颈的时候，就是性能，效率发展的时候。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f79c6f0fdee04669ac101ed16d3bbba5~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4fc00a0ec111499880b926634b93cdf5~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="关于AI、chatGPT"><a href="#关于AI、chatGPT" class="headerlink" title="关于AI、chatGPT"></a>关于AI、chatGPT</h2><p>前端时间我也发了chatGPT相关的，确实承认chatGPT 很强，但是绝不是能替代程序员的程度，上一次ai的突破还要追溯到“阿尔法狗大战世界围棋冠军”的时候，那个时候也这种论调，ai取代人类。</p><p>前端也随着出现了前端智能化，可能有部分小伙伴都听过。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3837538f40147a7a954d73648a078ed~tplv-k3u1fbpfcp-zoom-1.image"></p><p>AI更可能改变互联网入口，上一次移动互联网的出现，也出现了一波优秀的企业。技术也有整体的提升。AI更多的是辅助。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe2ac64566f54d2dad3ef02ffd864738~tplv-k3u1fbpfcp-zoom-1.image"></p><p>copilot 微软的辅助开发工具。但是目前应该没有大公司会允许使用，自建成本过高的问题都是目前AI发展的巨大阻力。</p><p>可能只有当AI训练成本下降到手机就可以完成，那可能会有一个全新的互联网。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e3a45f39dff4dd8872bbc5a50cea9d1~tplv-k3u1fbpfcp-zoom-1.image"></p><p>编程是创造，ai的创造性还有待考究，现在大部分ai作品都有著作权争议。更像是一个拼凑后的作品。</p><h2 id="大环境不好论调"><a href="#大环境不好论调" class="headerlink" title="大环境不好论调"></a>大环境不好论调</h2><p>这几年听的最多的可能就是，现在大环境不好，什么什么的，现在经济下行，确实是事实，所以降本增效成为主旋律。所以学习是无止境的。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/964a65103d0446e788a7191f01e67cc6~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="这样的大环境下我们要怎么做"><a href="#这样的大环境下我们要怎么做" class="headerlink" title="这样的大环境下我们要怎么做"></a>这样的大环境下我们要怎么做</h2><p>少抱怨，多思考，未来更美好</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d48aaf660004ec78bf8eb73cb810ffc~tplv-k3u1fbpfcp-zoom-1.image"></p><p>拥抱开源，参与到技术发展的中，时刻了解最新发展，保持学习，提升自己永远的不会错。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f24641665df54bc3878aa96b27e6299f~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>作为前端开发者，我认为“前端已死”这个观点是过于夸张和片面的。虽然随着技术的不断发展，前端开发所面临的挑战和机会也在不断变化，但前端开发的重要性并没有因此消失。</p><p>前端开发者需要不断学习和适应新技术的发展。尽管低代码平台和可视化编程工具可以加快开发过程，但这并不意味着开发者可以忽视学习和掌握最新的技术。只有不断更新自己的技能和知识，才能保持在前端开发领域的竞争力。</p><p>工具只是辅助，创造还得看我们自己。</p><p>前端开发所面临的挑战和机会在不断变化，但前端开发的重要性仍然是不可替代的。</p>]]></content>
      
      
      <categories>
          
          <category> 开源大事件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 低代码 </tag>
            
            <tag> 前端 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack沦为对比单位？前端整活圈又出新品了</title>
      <link href="/b976a70999a3/"/>
      <url>/b976a70999a3/</url>
      
        <content type="html"><![CDATA[<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>能被JavaScript重写的都将被JavaScript重写</p><p>能被rust重写的都将被rust重写？</p><h4 id="省流"><a href="#省流" class="headerlink" title="省流"></a>省流</h4><p>新项目建议直接vite，rspack可以当作历史巨石项目的的一个过渡品，长期观望，farm目前阶段还不推荐使用。</p><h3 id="rspack（Rust）"><a href="#rspack（Rust）" class="headerlink" title="rspack（Rust）"></a>rspack（Rust）</h3><h4 id="为什么要做-Rspack"><a href="#为什么要做-Rspack" class="headerlink" title="为什么要做 Rspack"></a>为什么要做 Rspack</h4><p>我们创建 Rspack 的原因是要解决在 ByteDance 维护构建工具时遇到的各种性能问题。由于 ByteDance 内部存在许多巨石应用，它们都具有复杂的构建配置，生产环境构建需要耗费十几分钟，甚至超过半小时；开发环境的耗时也超过十几分钟。</p><p>我们在 Webpack 上尝试了多种方法来优化这些巨石应用，但是效果甚微。我们意识到在 Webpack 上的优化已经难以为继，必须要从底层改造，才能适应我们的需求。</p><h4 id="对比数据"><a href="#对比数据" class="headerlink" title="对比数据"></a>对比数据</h4><p>目前仅与webpack比较</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68a89533adf14aab9b5a5923a3b9d3d5~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><p>【官网】<a href="https://www.rspack.dev/">Rspack</a></p><p>【Github】<a href="https://github.com/web-infra-dev/rspack">https://github.com/web-infra-dev/rspack</a></p><h3 id="Farm-（Rust）"><a href="#Farm-（Rust）" class="headerlink" title="Farm （Rust）"></a>Farm （Rust）</h3><p>阿里系，很低调基本没宣传,项目还在很早期阶段</p><p>文档仅英文，很多内容没有，处于不可用状态，玩玩还行</p><h4 id="Why-Farm"><a href="#Why-Farm" class="headerlink" title="Why Farm?"></a>Why Farm?</h4><p>As the web project scales, building performance has been the major bottleneck, for a huge project, compiling with webpack may cost 10min or more, a hmr update may cost 10s or more, heavily reduced the efficiency.</p><p>Then some tools like vite comes out, it uses native ESM and is unbundled for source files in dev mode, pre-bundle dependencies using esbuild, which makes the dev server launch and the HMR very fast.</p><p>But Unbundled is not perfect, there are still big problem when comes for a large project:</p><ul><li><strong>The huge numbers of module requests</strong>: For a large project, there may be thousands of modules that should be loaded, using native module system to load thousands of modules will make the browser get stuck or even crashed.</li><li><strong>Inconsistency between Dev and Production</strong>: Native module can not be used in production for most situations, For the compatibility and request numbers. So Unbundled tools choose to bundle in production. This brings inconsistency, when there are production bugs caused by this inconsistency, it’s really hard to debug and really painful. And vite is using esbuild in dev and using rollup in production, which enlarged the inconsistency.</li><li>And Vite is so fast in dev because of esbuild, which is written in go. Go takes advantages of native platform and much faster than Js.</li></ul><p>So I thing we just need a fast, powerful, consistent web bundler, which can solve the problems above and fast, then I designed Farm.</p><p>And Farm is not just a normal bundler re-written in Rust, it has a lot of powerful and progressive designs:</p><h4 id="对比数据-1"><a href="#对比数据-1" class="headerlink" title="对比数据"></a>对比数据</h4><p>性能提升很有限</p><table><thead><tr><th>Webpack</th><th>Vite</th><th>Farm</th><th>Compare</th><th></th></tr></thead><tbody><tr><td><strong>cold start</strong></td><td>853ms</td><td>276ms</td><td>67ms</td><td>Farm is faster: <strong>12x webpack</strong>，<strong>4x vite</strong></td></tr><tr><td><strong>HMR</strong></td><td>43ms</td><td>23ms</td><td>2ms</td><td>Farm is faster: <strong>20x webpack</strong>，<strong>10x vite</strong></td></tr><tr><td><strong>onload</strong></td><td>83ms</td><td>310ms</td><td>57ms</td><td>Farm is faster: <strong>5x vite</strong></td></tr><tr><td><strong>accessible time</strong></td><td>936ms</td><td>586ms</td><td>124ms</td><td>Farm is faster: <strong>8x webpack</strong>，<strong>5x vite</strong></td></tr></tbody></table><h4 id="相关链接-1"><a href="#相关链接-1" class="headerlink" title="相关链接"></a>相关链接</h4><p>【官网】<a href="https://farm-fe.github.io/">https://farm-fe.github.io/</a></p><p>【GitHub】<a href="https://github.com/farm-fe/farm?version=2.5.50001.11&amp;platform=win">https://github.com/farm-fe/farm?version=2.5.50001.11&amp;platform=win</a></p><h3 id="Turbopack"><a href="#Turbopack" class="headerlink" title="Turbopack"></a>Turbopack</h3><p>Turbopack 建立在新的增量架构上，以提供最快的开发体验。在大型应用上，它的更新速度比 Vite 快 10 倍，比Webpack 快 700 倍。在更大的应用上，通常会比 Vite 快 20 倍。</p><p>由于 Turbopack 只打包开发所需的最少资源，因此启动时间非常快。在具有 3000 个模块的应用上，Turbopack 需要 1.8 秒即可启动，而 Vite 则需要 11.4 秒：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25d2b8cd39d5436eac6646f1efa43e41~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>新出的两个打包工具，目前阶段rspack已经基本可用，farm可能还有一段距离，对比上次据说比webpack快700的低调了很多。数据上没有怎末华丽，重点可能就是rust重写。</p><p>rspack文档比较全，对标webpack，有可取之处。尤大原话：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a637d71991704400ba59fe02b40591eb~tplv-k3u1fbpfcp-zoom-1.image"></p><p>不能看出两个新出的工具都是解决各置公司的历史巨石项目的问题出现的产物。farm 指出vite 开发生产环境不一致，生产问题调试困难，rspack 则是历史项目包袱过重迁移困难。</p><p>所以新项目还是vite。🤔</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="https://mp.weixin.qq.com/s/R-tjPrj2N2DKMO8_cPsp9Q">字节跳动自研 Web 构建工具 Rspack 正式发布</a></p></li><li><p><a href="https://juejin.cn/post/7158997985870200839">比Webpack快700倍的Turbopack，到底快在哪？</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rspack webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【开源那些事】vite issues 蹲点计划？</title>
      <link href="/c87c2592851d/"/>
      <url>/c87c2592851d/</url>
      
        <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>去年一直有计划多参与到开源社区中，所以没事就会去vite issues 下逛逛看看有没有自己可以解决的问题，这不就被我混到几个。😄</p><p>目前提2个issues，提了5个PR (成功合并两个半)为啥是两个半，因为有一个合并了被revert了，不过用到还是我初始思路。</p><h2 id="我遇到了什么？"><a href="#我遇到了什么？" class="headerlink" title="我遇到了什么？"></a>我遇到了什么？</h2><h3 id="1、use-–host-duplicate-port-number"><a href="#1、use-–host-duplicate-port-number" class="headerlink" title="1、use –host duplicate port number"></a>1、use –host duplicate port number</h3><p>这是最近遇到的一个问题，vite 使用–port 的时候启用端口号会重复使用。</p><blockquote><p>When localhost(vite dev) is listening on port 5173, it’s possible for 127.0.0.1(vite dev –host) to listen on port 5173 again.</p></blockquote><p>相关issues<br><a href="https://github.com/vitejs/vite/issues/12144">#12144</a><br><a href="https://github.com/vitejs/vite/issues/12205">#12205</a><br><a href="https://github.com/vitejs/vite/pull/10651">#10651</a><br><a href="https://github.com/vitejs/vite/issues/">#10638</a></p><h4 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h4><p><a href="https://github.com/vitejs/vite/pull/12211">https://github.com/vitejs/vite/pull/12211</a> 详细PR</p><p>经过我一系列的测试：</p><blockquote><p>According to my test:</p><p>Set – host, and then httpServer.listen passes the host as undefined, and do not set the pass localhost</p><p>I start the first service, and when – host is not delivered <a href="http://127.0.0.1:5173/">http://127.0.0.1:5173/</a> 、<a href="http://localhost:5173/">http://localhost:5173/</a> are effective</p><p>Then start the second service and pass – host, <a href="http://localhost:5173/">http://localhost:5173/</a> Covered by the second service, <a href="http://127.0.0.1:5173/">http://127.0.0.1:5173/</a> Still occupied by the first service</p></blockquote><h4 id="问题原因："><a href="#问题原因：" class="headerlink" title="问题原因："></a>问题原因：</h4><p>当使用httpServer.listen（）方法,在Node.js中启动HTTP服务器并传递localhost作为主机参数，然后再次传递0.0.0.0作为主机参数并对两者使用相同的端口时，可能不会总是收到一个错误，即端口已在使用中。通常，这会引发错误，因为第一台服务器已经占用了端口。<br>然而，情况并非总是如此。这是因为，在某些操作系统上，两个进程可以在同一端口上侦听不同的IP地址，而不会相互干扰。如果您的操作系统支持此行为，并且第一台服务器使用的是localhost地址，那么您可以使用0.0.0.0地址启动第二台服务器，而不会收到有关正在使用的端口的错误。<br>然而，值得注意的是，这种行为不是标准的或跨平台的，因此在编写代码时不建议依赖它。如果需要在同一台计算机上启动多个服务器，最好使用不同的端口号以避免端口冲突。如果需要在不同的计算机之间共享服务器，则应使用公共IP地址来启动服务器，而不是使用localhost。(下面是我用翻译软件翻译的一遍，vite都是英文交流🤔)</p><blockquote><p>When you use the httpServer.listen() method to start an HTTP server in Node.js and pass localhost as the host parameter, and then pass 0.0.0.0 as the host parameter again, and use the same port for both, you may not always get an error saying that the port is already in use. Normally, this should throw an error because the port is already occupied by the first server.<br>However, this is not always the case. This is because, on some operating systems, two processes can listen on the same port for different IP addresses without interfering with each other. If your operating system supports this behavior, and the first server is using the localhost address, then you may be able to start the second server using the 0.0.0.0 address without getting an error about the port being in use.<br>It’s worth noting, however, that this behavior is not standard or cross-platform, so it’s not recommended to rely on it when writing code. If you need to start multiple servers on the same computer, it’s best to use different port numbers to avoid port conflicts. If you need to share a server between different computers, you should use a public IP address to start the server instead of using localhost.</p></blockquote><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>我尝试获取一个合法的端口号时，先尝试创建一个tcp连接，连接该端口号以检查是否是否使用，常规条件下，看起来十分成功。这个方案我想了很久。</p><h4 id="最终"><a href="#最终" class="headerlink" title="最终"></a>最终</h4><p>可是最后还是倒在了并发问题上，这似乎是一个不可避免的问题。</p><blockquote><p>This fail might cause an issue. This PR’s approach doesn’t work well in a concurrent situation.<br><a href="https://github.com/vitejs/vite/actions/runs/4292613465/jobs/7479273031#step:13:105">https://github.com/vitejs/vite/actions/runs/4292613465/jobs/7479273031#step:13:105</a><br>I guess this fail happened by the following steps:</p><ol><li>playground A: net.connect checks port 5173 &#x3D;&gt; success</li><li>playground B: net.connect checks port 5173 &#x3D;&gt; success</li><li>playground A: listen port 5173</li><li>playground B: listen port 5173 &#x3D;&gt; error</li></ol></blockquote><p>需要一个更好的解决方案</p><blockquote><p>In this way, concurrency seems to be inevitable, and better methods need to be found 🤔</p></blockquote><h3 id="2、after-setting-server-open-the-default-open-is-inconsistent-with-the-shortcut-key"><a href="#2、after-setting-server-open-the-default-open-is-inconsistent-with-the-shortcut-key" class="headerlink" title="2、after setting server.open, the default open is inconsistent with the shortcut key"></a>2、after setting server.open, the default open is inconsistent with the shortcut key</h3><p>这是vite设置了server.open 后 默认打开的浏览器地址与快捷键不一致</p><blockquote><p>After setting server.open, the default open is inconsistent with the shortcut key，Now only the shortcut key processing has been modified</p></blockquote><p>具体issues <a href="https://github.com/vitejs/vite/issues/11971">#11971</a></p><h4 id="最终解决"><a href="#最终解决" class="headerlink" title="最终解决"></a>最终解决</h4><p>详细PR <a href="https://github.com/vitejs/vite/pull/11974">#11974</a></p><p>统一的快捷键和默认打开浏览器 使用resolvedUrls.local viteServer 新增api openBrowser</p><h3 id="3、Ctrl-C-no-longer-kills-processes-running-in-parallel-with-vite"><a href="#3、Ctrl-C-no-longer-kills-processes-running-in-parallel-with-vite" class="headerlink" title="3、Ctrl+C no longer kills processes running in parallel with vite"></a>3、Ctrl+C no longer kills processes running in parallel with vite</h3><p>这是vite 设置快捷键后通过npm run all 等脚本启动的时候需要两次ctrl+c才可以终止程序</p><h4 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h4><p>通过设置process.stdin.setRawMode(true)后，无法得知，vite处于第三方进程的子进程中，无法通知父亲销毁，导致ctrl+c 仅退出vite程序 从而截断了终止信号的传播。<br>应该所有使用process.stdin.setRawMode(true) 都会有此问题</p><h4 id="尝试解决-1"><a href="#尝试解决-1" class="headerlink" title="尝试解决"></a>尝试解决</h4><p>相关PR <a href="https://github.com/vitejs/vite/pull/11518">#11518</a></p><h4 id="最终方案："><a href="#最终方案：" class="headerlink" title="最终方案："></a>最终方案：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> server.<span class="title function_">close</span>().<span class="title function_">finally</span>(<span class="function">() =&gt;</span> process.<span class="title function_">exit</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>回到了初始方案</p><p>后续问题：会有丑陋的错误提示ctrl+c</p><p>因为这个issues 我做了一个vite插件，为vite提供自定义快捷键功能，vite不支持的时候则添加</p><p><a href="https://github.com/kinfuy/vite-plugin-shortcuts">vite-plugin-shortcuts</a></p><h3 id="2、Need-a-new-shortcut-key-to-clear-the-output"><a href="#2、Need-a-new-shortcut-key-to-clear-the-output" class="headerlink" title="2、Need a new shortcut key to clear the output."></a>2、Need a new shortcut key to clear the output.</h3><p>需要一个快捷键清除当前输出</p><p>相关issue <a href="https://github.com/vitejs/vite/issues/11493">#11493</a></p><p>最终解决 <a href="https://github.com/vitejs/vite/pull/11494">11494</a></p><h3 id="5、Always-provide-access-address-Population"><a href="#5、Always-provide-access-address-Population" class="headerlink" title="5、Always provide access address Population"></a>5、Always provide access address Population</h3><h4 id="提issue"><a href="#提issue" class="headerlink" title="提issue"></a>提issue</h4><blockquote><p>In one case, when IED is developed for a period of time, terminal information is flooded by hot update information. After leaving for a period of time, close the browser and forget the access address. You must restart to obtain the access address</p></blockquote><p><a href="https://github.com/vitejs/vite/issues/10527">Always provide access address Population · Issue #10527 · vitejs&#x2F;vite</a></p><h4 id="尝试解决-2"><a href="#尝试解决-2" class="headerlink" title="尝试解决"></a>尝试解决</h4><p>我第一次给vite提PR，尝试在log打印后重复输出地址，现在想想方案确实太不成熟了，合理了。<br><a href="https://github.com/vitejs/vite/pull/10594"># 10594</a></p><h4 id="最终解决方案"><a href="#最终解决方案" class="headerlink" title="最终解决方案"></a>最终解决方案</h4><p>添加了快捷键模式<br><a href="https://github.com/vitejs/vite/pull/11319">#11319e</a></p><h3 id="我收获到了什么？"><a href="#我收获到了什么？" class="headerlink" title="我收获到了什么？"></a>我收获到了什么？</h3><p>通过参与vite贡献，确实会让我们对vite的理解更深了一些，需要去调试，打断点追踪bug发生的原因。每一次解决问题代码被合并到主分支，都会有一种成就感。</p><ul><li><p>重要的不是怎么解决问题，而是解决问题的过程，每一次断点调试代码的过程，和每一次解决方案的思路。</p></li><li><p>流程化，规范化真的可以避免很多意料之外的错误。</p></li><li><p>英文确实很重要🤔</p></li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>vite是一个基于ESM的前端构建工具。参与vite开源贡献可以让你更深入地了解这些技术，并且为前端开发做出贡献。希望vite越来越好吧。毕竟我也算出了一份力，哈哈哈😂</p>]]></content>
      
      
      <categories>
          
          <category> Vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vite </tag>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【低代码系列之AIGC】 人工智能会给低代码带来什么？</title>
      <link href="/f117b534a1ee/"/>
      <url>/f117b534a1ee/</url>
      
        <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>体验了ChatGPT后，我还在感叹是不是人类要全面进入<code>个人人工智能助手的时代</code>了。然后就出现一系列的AI产品。</p><ul><li>bing宣布整合ChatGPT<code>(现在都还没有排上队)</code>，bing 因此下载量暴涨，有现在已经把整合的功能阉割了，没有才开始那么智能了。</li></ul><p><img src="/static/articles/newbing.png" alt="截屏2023-02-25 15.19.12.png"></p><ul><li>百度将在三月份推出生成式人工智能（AI）产品文心一言（ERNIE Bot），并宣布计划将多项主流业务与文心一言整合。股价都涨了一波。我体验了一下文心衍生产品<a href="https://yige.baidu.com/">文心一格</a>，真的感觉超级棒。下面是我用 <code>文心一格</code> 生成的图:</li></ul><p><img src="/static/articles/wenxin.png" alt="截屏2023-02-25 15.21.38.png"></p><ul><li>还有ai写作笔记工具<a href="https://www.notion.so/product/ai">Nation AI</a> ai可以快速整理你的文章，自动生成相关内容，我在想要不要从语雀迁移到Nation AI 🤔</li></ul><p><img src="/static/articles/nationai.png" alt="截屏2023-02-25 15.13.26.png"></p><h2 id="AIGC"><a href="#AIGC" class="headerlink" title="AIGC"></a>AIGC</h2><p>上面介绍到的 ChatGPT，AI 绘画，这些本质而言都是 AIGC 的一部分，<code>什么是 AIGC ？</code></p><blockquote><p>AIGC即AI Generated Content，利用人工智能技术来生成内容，它被认为是继PGC、UGC之后的新型内容创作方式。2022年AIGC发展速度惊人，迭代速度更是呈现指数级爆发，这其中深度学习模型不断完善、开源模式的推动、大模型探索商业化的可能，成为AIGC发展的“加速度”。 </p></blockquote><p>推上看见Tinyfool的言论：</p><blockquote><p>AIGC可以用来描述AI绘画，也可以用来描述ChatGPT，然而，这远远不够，bing chat其实不是AI生成了什么，而是你的问题，经由AI联通了bing背后的索引库。ChatGPT还没被很多人看懂的是这个，是ACE，<code>AI connect everything。连接一切，控制一切。</code></p><p>比如，油管上有人用chatgpt生成blend的脚本，这样chatgpt其实就有了3d建模的能力。有人用chatgpt生成一个动画特效工具 processing 的脚本，于是chatgpt就可以做动画了。chatgpt最大的价值是去理解人类的语言，也可以在人类语言和编程语言，App内脚本之间进行翻译。</p><p>所以，AI其实就是连接人和人和机器、软件的桥梁了。其实用AI生成Office里面的vba，也是非常方便的。未来，blend、processing、Office，还有无数的App和网站也会改进自己，让他们跟AI联系的更加紧密。所以，<code>AI不是简单的生成了内容，而是连接了世界，帮助我们用自然语言去控制了世界。</code></p></blockquote><h3 id="危机纪元"><a href="#危机纪元" class="headerlink" title="危机纪元"></a>危机纪元</h3><p>程序员危机纪元，现在程序员工作不就是沟通普通人和机器吗，把产品的意图传达给机器然后表达出来🤔。</p><h3 id="人工智能对于低代码意味着什么？"><a href="#人工智能对于低代码意味着什么？" class="headerlink" title="人工智能对于低代码意味着什么？"></a>人工智能对于低代码意味着什么？</h3><p>从AI绘画的角度来分析低代码，可以类比其中的相似之处。就像AI绘画一样，低代码也是一种自动化工具，它通过提供组件、模板和自动生成代码等方式，以降低应用程序开发的门槛，从而使非专业程序员也能够开发应用程序。</p><p>此外，AI绘画和低代码都具有自动化的特点，即它们都可以使用先进的技术，例如机器学习和自然语言处理等技术，以自动化生成图像或代码。</p><p>在AI对低代码的影响方面，我认为AI将会在以下几个方面对低代码产生影响：</p><ul><li>提供更智能的开发工具：AI技术可以为低代码平台提供更智能的开发工具，例如自动代码修复、代码自动生成等，从而提高开发效率和质量。</li><li>增强应用程序的自适应能力：通过使用AI技术，可以使低代码应用程序具有更好的自适应能力，例如自动优化性能、自动调整界面布局等，以更好地满足用户需求。</li><li>提高应用程序的安全性：AI技术可以用于自动检测和修复应用程序中的安全漏洞和错误，从而提高应用程序的安全性。</li><li>改变开发者的角色：随着AI技术的普及，开发者的角色将会发生变化，他们将更多地从事应用程序的架构设计、业务分析和需求规划等高级任务，而不是编写大量的代码。</li></ul><p>AI技术将会为低代码平台带来更多的创新和改进，从而提高应用程序的开发效率和质量。<code>将 AIGC 运用到低代码上，应该是下一阶段低代码的发展方向。</code></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>现在真的处于时代的大变局之中了，未来30年将是一个重要时期，会出现一批改变互联网格局，乃至世界格局的人。<code>现在学python还来得及吗🤔</code></p><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ul><li><a href="https://juejin.cn/post/7126338286460600351">【低代码系列之序章】打翻前端的狗碗？</a></li><li><a href="https://juejin.cn/post/7127197773014761486">【低代码系列之万物之初】重生之梦回Dreamweaver？</a></li><li><a href="https://juejin.cn/post/7130236060516220941">【低代码系列之万物互联】怎么打通物料，渲染器，属性设计器？</a></li><li><a href="https://juejin.cn/post/7134357106915803150">【低代码系列之哈姆雷特】千变万化的属性设置器</a></li><li><a href="https://juejin.cn/post/7199177949541679159">【低代码系列之chatGPT访谈】chatGPT怎么看待低代码？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 低代码系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 低代码 </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【精】全球最大的同性交友网站社区指南！</title>
      <link href="/a4bca279ec39/"/>
      <url>/a4bca279ec39/</url>
      
        <content type="html"><![CDATA[<p>作为一名前端开发者，加入开源社区对我们有什么帮助？</p><h2 id="省流"><a href="#省流" class="headerlink" title="省流"></a>省流</h2><blockquote><p>小白：学习新技能、提高编码能力、结识志同道合的人</p></blockquote><blockquote><p>大佬：绕道，无需阅读</p></blockquote><blockquote><p>大聪明: 直达评论区</p></blockquote><h2 id="什么是开源社区？"><a href="#什么是开源社区？" class="headerlink" title="什么是开源社区？"></a>什么是开源社区？</h2><p>开源社区是由一群志同道合的人组成的团体，这些人共同致力于开发、维护和推广一些开源软件或项目。在开源社区中，任何人都可以自由地查看、修改和使用项目的源代码，这也是开源软件与闭源软件的最大不同之处。开源社区不仅是一个技术社区，还是一个包容和开放的社区，欢迎任何人参与和贡献。</p><h2 id="为什么要参与开源社区？"><a href="#为什么要参与开源社区？" class="headerlink" title="为什么要参与开源社区？"></a>为什么要参与开源社区？</h2><p>参与开源社区可以让你获得很多好处，包括学习新技能、提高编码能力、结识志同道合的人并为社区做出贡献。</p><ul><li>提高技术水平：在开源社区中，你可以与一些优秀的开发者合作，学习他们的经验和技巧，不断提升自己的技术水平。</li><li>展示个人能力：通过参与开源项目，你可以展示自己的编程能力和创造力，建立自己的个人品牌。</li><li>结交志同道合的朋友：在开源社区中，你可以结交一些志同道合的朋友，一起分享经验和思考，共同成长。</li><li>获得社区认可：如果你为开源项目做出了贡献，你将得到社区的认可和尊重，这也是你个人成长的重要证明之一。</li></ul><h2 id="如何参与开源社区？"><a href="#如何参与开源社区？" class="headerlink" title="如何参与开源社区？"></a>如何参与开源社区？</h2><ul><li>了解项目：在你加入一个开源项目之前，先要了解这个项目的背景、目标和技术栈等信息。可以阅读项目的文档和代码库，了解项目的架构和代码风格。</li><li>加入社区：找到项目的社区平台，如 Github、Gitlab 等，加入项目的开发组织或者讨论组。可以参与社区中的讨论和交流，向其他开发者请教问题，与社区中的成员建立联系。</li><li>找到任务：在社区中找到自己感兴趣的任务或者 issue，并尝试解决这些问题。可以从一些简单的问题入手，逐渐深入了解项目。</li><li>提交代码：在解决问题的过程中，可以提交自己的代码，向项目贡献自己的力量。提交代码时，需要遵循项目的代码规范和提交流程，确保自己的代码符合项目规范。</li></ul><h2 id="怎么加入vue生态"><a href="#怎么加入vue生态" class="headerlink" title="怎么加入vue生态"></a>怎么加入vue生态</h2><p>Vue生态系统是一个非常活跃的开源社区，它包含了许多不同的项目和库，包括Vue.js本身、Vue CLI、Vuex、Vue Router、pinia、vite等等。在这篇文章中，我将向你介绍如何参与Vue生态的开源社区，包括以下几个步骤：</p><h3 id="了解Vue生态系统"><a href="#了解Vue生态系统" class="headerlink" title="了解Vue生态系统"></a>了解Vue生态系统</h3><img src="/static/articles/vue.jpeg" width="100%" /><p>在你开始参与Vue的开源社区之前，你需要了解一些基本知识。首先，你需要了解Vue生态系统包含了哪些项目和库。Vue.js是Vue生态系统的核心，它是一个用于构建Web应用程序的渐进式JavaScript框架。除此之外，Vue CLI是一个命令行工具，用于快速搭建Vue.js应用程序的基础结构。Vuex是Vue.js的状态管理库，用于管理应用程序的状态。Vue Router是一个路由库，用于管理应用程序的路由。还有许多其他的Vue.js库和插件，例如Element UI、Vuetify、Ant Design Vue等等。</p><p>你还需要了解如何使用Vue.js。你可以在Vue.js的官方网站上找到详细的文档和教程，了解Vue.js的基本知识。</p><h3 id="找到一个适合你的项目"><a href="#找到一个适合你的项目" class="headerlink" title="找到一个适合你的项目"></a>找到一个适合你的项目</h3><p>一旦你了解了Vue生态系统，你需要找到一个适合你的项目。你可以在GitHub上浏览Vue.js的官方组织，找到一个你感兴趣的项目。在浏览项目时，你需要注意项目的文档、问题列表和PR列表等信息，以了解项目的需求和现状。</p><p>你的兴趣和技能：你应该选择一个你感兴趣的项目，并且你有能力为该项目做出贡献。<br>项目的贡献需求：你应该选择一个需要你的贡献的项目，并且该项目的需求符合你的能力和时间。<br>项目的质量和活跃度：你应该选择一个质量高、活跃的项目，这样你可以获得更好的开发体验和社区支持。</p><p>一旦你找到了一个适合你的项目，你需要加入社区。在加入社区之前，你需要先了解，社区规范，贡献指南。</p><p>Vite是由社区驱动的，因此您可以通过参与社区活动和贡献代码来加入Vite社区。</p><img src="/static/articles/vite.webp" width="100%" /><p>研究Vite项目，您需要深入了解该项目的结构、技术栈、工作流程和代码库。阅读项目的文档、源代码和贡献指南，了解项目的目标和核心价值。</p><h4 id="参与社区活动"><a href="#参与社区活动" class="headerlink" title="参与社区活动"></a>参与社区活动</h4><p>Vite的社区非常活跃，您可以通过参与社区活动来展示您的技能和热情。这些活动包括：</p><ul><li><p>提交问题和拉取请求：如果您在使用Vite时发现了问题，可以提交问题并尝试解决它们。如果您有能力解决问题，可以提交拉取请求并贡献代码。</p></li><li><p>参与讨论：加入Vite社区的聊天室和论坛，与其他社区成员讨论技术问题和解决方案，建立联系并分享经验。</p></li><li><p>参加活动：Vite组织各种线上和线下的活动，包括技术分享、比赛和研讨会等。参加这些活动可以帮助您认识其他成员，并提高您的技能和知识。</p></li><li><p>分享经验：如果您在使用Vite时遇到了困难并找到了解决方案，可以分享您的经验和见解。这不仅可以帮助其他成员，还可以展示您的技能和贡献。</p></li><li><p>提交代码:如果您想成为Vite的核心开发者，您需要提交代码并参与开发工作。以下是一些计划，可以帮助您开始：</p></li><li><p>找到一个合适的问题：在Vite的问题列表中找到一个您感兴趣的问题，并尝试解决它。您可以在Vite的GitHub页面上提交拉取请求并等待审核。</p></li><li><p>解决现有问题：如果您已经熟悉了Vite的代码库，可以试着解决现有的问题。您可以使用Vite的代码库和文档，利用您的技能和知识，解决这些问题并提交拉取请求。</p></li><li><p>实现新功能：如果您有新的想法和建议，可以尝试实现一个新功能并提交拉取请求。在实现新功能之前，确保您已经了解了项目的目标和结构，并与核心团队成员进行了讨论和协作。</p></li><li><p>参与代码审查：如果您提交了一个拉取请求，您可能需要参与代码审查。您需要遵循Vite的代码规范和最佳实践，确保代码的质量</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开源大事件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2023 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【低代码系列之chatGPT访谈】chatGPT怎么看待低代码？</title>
      <link href="/1fb158d9246c/"/>
      <url>/1fb158d9246c/</url>
      
        <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p> 好久没有更新低代码系列的文章了，每次打开掘金都想写点什么，打开草稿箱又发现没什么可写的，借着</p><p>最近大火chatGPT，可能很多人都了解了，我准备了几个问题看看chatGPT是怎么看待低代码的吧。</p><h3 id="怎么看待低代码的现状以及未来发展，作为一个前端开发者应该做些什么？"><a href="#怎么看待低代码的现状以及未来发展，作为一个前端开发者应该做些什么？" class="headerlink" title="怎么看待低代码的现状以及未来发展，作为一个前端开发者应该做些什么？"></a>怎么看待低代码的现状以及未来发展，作为一个前端开发者应该做些什么？</h3><ul><li>答一</li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb7efef92a3a425e8b87c6d8fd622413~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-02-12 16.25.11.png"></p><ul><li>答二</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb3f28cf673d461ab524a623a8b67fa6~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-02-12 16.28.20.png"></p><p>  这个问题我让chatGPT回答了两次，从chatGPT回答来看，它还是对低代码持有乐观的态度的，也符合当前大部分人的看法。</p><p>   作为一个前端开发者来说，我认为低代码，未来可期，但需要技术的突破，需要一种破局的契机。就像前端NodeJS的出现一样，推动前端高速发展。我们要做的就是积累与关注。保持学习的状态。才可以抓住机会。</p><h3 id="当前有哪些低代码产品，你更看好谁的方向，并给出解释？"><a href="#当前有哪些低代码产品，你更看好谁的方向，并给出解释？" class="headerlink" title="当前有哪些低代码产品，你更看好谁的方向，并给出解释？"></a>当前有哪些低代码产品，你更看好谁的方向，并给出解释？</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/304fc278869f439b868b9b52724259b1~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-02-12 16.32.50.png"></p><p>chatGPT提及的产品中并没有国产的，或许是因为chatGPT训练素材的原因吧。</p><p>低代码现在的发展，现在更趋向做出一款垂直场景的产品，不管是国内还是国外的，都是某种固定场景下的解决方案，低代码不是什么银弹，至少现在不是。</p><p>局限收敛才更容易出结果，有结果才会推动发展，不管放在哪里都是合适的。</p><p>下面是chatGPT提及的一些低代码产品地址：</p><ul><li><a href="https://www.outsystems.com/">OutSystems</a></li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b6b959263f77401cbcdd3d4b4ae13d84~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-02-12 17.07.08.png"></p><ul><li><a href="https://powerapps.microsoft.com/zh-cn/">PowerApps（微软）</a></li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/deaf68b3bb7f40fbb492c46185cc9867~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-02-12 17.09.50.png"></p><ul><li><a href="https://appian.com/">Appian</a></li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d11a0a1189fe450eaeb637ac6b8c7900~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-02-12 17.13.56.png"></p><ul><li><a href="https://www.salesforce.com/campaign/lightning/">Salesforce Lightning</a></li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a76fa7852465494ea8d599c9bc3222a3~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-02-12 17.16.00.png"></p><ul><li><a href="https://www.mendix.com/">Mendix</a></li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60b25b5aea534b8ab827f35651227bac~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-02-12 17.18.47.png"></p><ul><li><a href="https://www.zoho.com/creator/">Zoho Creator</a></li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46cadd3a51844e5e984908a642e37af9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="对阿里开源的低代码引擎有了解吗，谈谈你的看法？"><a href="#对阿里开源的低代码引擎有了解吗，谈谈你的看法？" class="headerlink" title="对阿里开源的低代码引擎有了解吗，谈谈你的看法？"></a>对阿里开源的低代码引擎有了解吗，谈谈你的看法？</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87372ff31f8c43dabc3c6cf1ab1b647f~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-02-12 16.35.55.png"></p><p>对于阿里的低代码，前面的系列中专门提到过了，我就不赘述了，大家感兴趣可以去看看。</p><h3 id="有些人担忧低代码会取代程序员，就像有些人担忧人工智能取代人类一样，你对此怎么看？"><a href="#有些人担忧低代码会取代程序员，就像有些人担忧人工智能取代人类一样，你对此怎么看？" class="headerlink" title="有些人担忧低代码会取代程序员，就像有些人担忧人工智能取代人类一样，你对此怎么看？"></a>有些人担忧低代码会取代程序员，就像有些人担忧人工智能取代人类一样，你对此怎么看？</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b68e3889570c49a69c944370e5de98a4~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-02-12 16.40.24.png"></p><p>这里就和我<a href="https://juejin.cn/post/7126338286460600351">【低代码系列之序章】打翻前端的狗碗？</a>总结的类似：</p><blockquote><p>简单来说就像是以前的手工制作产品，到后来工厂流水线加工产品一样，常规开发和低代码开发的关系大概也是也是如此，钉钉曾经就在发布会表示：“低代码开发是云计算之后的下一场IT革命。”，我相信这并不是危言耸听之词，那前端这个行业会消失吗？答案肯定是不会的，那是以前的手工师傅消失了吗？并没有只不过叫做产品设计师，或者其他更深入技术含量更高的工作中了而已，假象一下，未来低代码平台完全取代普通系统开发，那这些低代码平台就不需要维护，更新了吗？自我更新？我想这个应该属于人工智能的范畴了，当然这其中也有跟不上时代变化的人，消失在这个IT革命之中，就像当年的jquery一样成为过去式，作为技术应该时刻保持学习的心态，</p></blockquote><h3 id="如果我准备开发一款低代码产品，你有什么好的建议吗？，给出具体实施计划？"><a href="#如果我准备开发一款低代码产品，你有什么好的建议吗？，给出具体实施计划？" class="headerlink" title="如果我准备开发一款低代码产品，你有什么好的建议吗？，给出具体实施计划？"></a>如果我准备开发一款低代码产品，你有什么好的建议吗？，给出具体实施计划？</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70082299e45b432abf7e2c5429a856aa~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-02-12 16.44.39.png"></p><p>这里特别为想参与到低代码的小伙伴问的，感觉chatGPT的回答，和开发一款普通产品类似，都是这些步骤。也确实没错，低代码本质就是一款产品而已。</p><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ul><li><a href="https://juejin.cn/post/7126338286460600351">【低代码系列之序章】打翻前端的狗碗？</a></li><li><a href="https://juejin.cn/post/7127197773014761486">【低代码系列之万物之初】重生之梦回Dreamweaver？</a></li><li><a href="https://juejin.cn/post/7130236060516220941">【低代码系列之万物互联】怎么打通物料，渲染器，属性设计器？</a></li><li><a href="https://juejin.cn/post/7134357106915803150">【低代码系列之哈姆雷特】千变万化的属性设置器</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 低代码系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 低代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转】2022年JavaScript明星项目公布，最受欢迎的竟是它？</title>
      <link href="/fec51c3e9d0e/"/>
      <url>/fec51c3e9d0e/</url>
      
        <content type="html"><![CDATA[<p>近日，<strong>Best of JS[1]</strong>  正式公布 2022 年 JavaScript 明星项目榜单。该榜单提供了过去 12 个月 JavaScript 生态系统中的趋势项目的概述！</p><p>此榜单包含了以下部分：最受欢迎的项目、前端框架、React生态系统、Vue生态系统、后端&#x2F;全栈、构建工具、CSS in JS、测试工具、移动端、桌面端、静态站点、状态管理、GraphQL。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1b914e4be6e47e18f6d75f65be11636~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="最受欢迎的项目"><a href="#最受欢迎的项目" class="headerlink" title="最受欢迎的项目"></a><strong>最受欢迎的项目</strong></h2><p>2022 年<strong>最受欢迎</strong>的 JavaScript 项目 Top 10 如下：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/33622eb9c245454180cfdab07cca0b9f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="总冠军：Bun"><a href="#总冠军：Bun" class="headerlink" title="总冠军：Bun"></a><strong>总冠军：Bun</strong></h3><p>2022 年年度最流行的项目 Bun：一个新的 JavaScript 运行时。今年夏天，随着 GitHub 上第一个 Beta 版的发布，它的人气大增：一个月内，GitHub 就有超过 20000 Star！</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d9a54919b74428b99c05125404f108c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>那 Bun 有什么特别之处呢？与两年前的总冠军 Deno 一样，它为 TypeScript 提供了一流的支持。</p><p>但 Bun 不仅仅是一个运行时。它还包括：</p><ul><li>包管理器（像 Yarn、NPM、PNPM）；</li><li>构建工具（像 Webpack、ESBuild、Parcel）；</li><li>测试工具</li><li>…</li></ul><p>Bun 可以读取 <code>package.json</code> 安装的依赖，Bun 还可以运行脚本。它做任何事都比其他任何运行时要快。Bun 是对 JavaScript 生态系统许多方面的全新诠释，专注于性能。</p><p>它优先考虑 Fetch 等标准 Web API。 它支持许多 Node.js API，使其与大多数 NPM 包兼容。它可能还没有“生产就绪”（缺少 Windows 支持），但它是一个非常有前途的工具。与 Deno 相比，它的生态系统还很新，但它已经有了一个名为 Elysia 的 Web 框架，号称是最快的 HTTP 框架。</p><p>Bun 最令人难以置信的是它的创建者 Jarred Sumner <strong>使用一种称为 Zig 的低级语言从头开始实现了所有这些功能</strong>。</p><h3 id="Tauri"><a href="#Tauri" class="headerlink" title="Tauri"></a><strong>Tauri</strong></h3><p>在 2021 年，Tauri 在最受欢迎的项目中排名第五。2022 年它以新增 30000 Star 在最受欢迎的项目中排名第二。这是一个用 Rust 编写的项目，用于使用 Web 技术创建跨平台桌面应用。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/088ae844ec6441e0abb780d1376e3b16~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>Tauri 1.0 版于 6 月发布。它在构建时考虑了安全性和性能。 与 Electron 相比，它占用空间小，因为开发人员必须指定应用所需的 API 和功能。</p><h3 id="React-和-Next-js"><a href="#React-和-Next-js" class="headerlink" title="React 和 Next.js"></a><strong>React 和 Next.js</strong></h3><p>排在第三位和第四位的分别是 React 和 Next.js，它们都新增了近 20000 Star。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5cbba43e2ae4f8f89768279c0d75f58~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>Next.js 13 于 10 月发布，使用了 2020 年 React 17 引入的 React Server Components。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c1b92ecf9df471bb17999e5a433ec70~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>React 的维护者之一 Andrew Clark 表示：<strong>React Server Components 是 React 的未来，目标就是将这种架构传播到整个 React 生态系统，而不管框架如何。</strong></p><h3 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a><strong>Vite</strong></h3><p>Vite 是基于 Web 技术构建应用的工具，提供了令人惊叹的开发人员体验。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1084c061a3241f598b86187c9416a48~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>Vite 今年有两个主要版本（7 月发布的 v3 和 12 月发布的 v4）。它为越来越多的项目提供支持，包括框架 SvelteKit 和 Qwik 以及 Vitest。</p><h2 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a><strong>前端框架</strong></h2><p>2022 年<strong>前端框架</strong>中的明星项目 Top 10 如下</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c64ebcdfe3bc4621925c1a7f054dbb36~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>React 仍然是 2022 年的冠军，如果考虑 Vue.js 的 v2 和 v3 仓库 Star 总和，其与 React 受欢迎程度接近。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f86b7c35b6847d4b053ac46f8a88d80~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>主要变化是排在第二位的 Qwik。Qwik 类似于 React，它也使用用 JSX 编写的组件作为模板，但主要区别在于<strong>专注于在浏览器中传输最少的 JavaScript。</strong></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00be1ac546f146ceb3de891c9d4328a3~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>Qwik 是“Zero baseline JavaScript”框架趋势的一部分。站点和应用通常会因影响浏览器性能的大量 JavaScript 资源而变得臃肿：即使页面在服务端渲染，用户也必须等到 JavaScript 被加载、解析和执行才能与页面交互。</p><p>Qwik 不依靠水合来为服务器上生成的页面带来交互性，而是使用一种称为<strong>可恢复性的技术</strong>来提供即时交互的 HTML。 它通过在 HTML 本身中序列化应用的状态来工作。</p><p>该项目由 Miško Hevery 领导，他是 AngularJS 的创建者，他的口号是“<strong>为 Web 应用增强 HTML</strong>”，Qwik 就是“HTML 优先的框架”。</p><h2 id="React-生态系统"><a href="#React-生态系统" class="headerlink" title="React 生态系统"></a><strong>React 生态系统</strong></h2><p>2022 年 <strong>React 生态系统</strong>中的明星项目 Top 10 如下</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afd12084428941bca33e1a1c2a21edaa~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>React 仍然是一个可以在任何网页使用的库，但它也已经发展成为一个架构框架，可以遵循它来创建交互式、弹性和高性能的前端模式。</p><p>React 18 版本（3 月）包括并发特性和 API，主要为框架提供架构模式。React Server Components 旨在结合这些新的架构模式实现。 一些约定现在已经在 React 框架之间标准化（例如 use client），而其他约定正在测试阶段（例如服务端组件中的 async&#x2F;await）。</p><p>在 2023 年，我们将继续看到使用 React 新原语的创新，用于改进类型安全的库以及 UI 组件库的增长将继续上升。</p><h2 id="Vue-生态系统"><a href="#Vue-生态系统" class="headerlink" title="Vue 生态系统"></a><strong>Vue 生态系统</strong></h2><p>2022 年 <strong>Vue 生态系统</strong>中的明星项目 Top 10 如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae2441d7085a4666a3b9aaf8ba3acebb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>今年，Vue.js 进行了许多重大更新。Vue 2.7 将原生 Composition API 和 <code>&lt;script setup&gt;</code> 语法带到 Vue 2。</p><p>这使得向 Vue 3 的过渡更加顺畅。<code>&lt;script setup&gt;</code> 变得稳定且普遍可用，新的实验性“Reactivity Transform”指日可待，可进一步增强 DX。 Vue 团队还在研究一种名为“Vapor mode”的新渲染策略，该策略受 Soild.js 的启发，可以使 Vue 在关键部分的性能更高。</p><p>Nuxt 3 和 Vuetify 3 的稳定发布表明 Vue 的生态系统已经足够成熟。Vite 在这一年成倍增长，它被 Vue 用户大量使用，来自 create-vue、Nuxt、Quasar、Astro 和许多新框架。借助 Vite 的强大功能，Vue 用户还可以使用 Vitest 和 Histoire 获得更好的测试&#x2F;开发体验。我们还看到了 Vue 的创造性用法，例如使用 vue-termui 渲染命令行界面。</p><h2 id="后端-x2F-全栈"><a href="#后端-x2F-全栈" class="headerlink" title="后端&#x2F;全栈"></a><strong>后端&#x2F;全栈</strong></h2><p>2022 年<strong>后端&#x2F;全栈</strong>中的明星项目 Top 10 如下：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e2989ffdff3e42e0aacc71058744a5ee~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>前端和后端框架之间的界限比较模糊，因为与后端仅负责 API 的 SPA 方法相比，有一种趋势就是在服务端做更多的事情（包括渲染和路由）。 所以这部分包括了全栈框架、元框架和后端框架。</p><h3 id="Next-js"><a href="#Next-js" class="headerlink" title="Next.js"></a><strong>Next.js</strong></h3><p>与去年一样，Next.js 在排名中处于领先地位，13.0 版本带来了重要的功能，包括 React 服务端组件和使用 app 文件夹的新文件系统结构，并以更强大的方式处理嵌套路由。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54b58882390245329b3fb6b91ba3bf2a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="tRPC"><a href="#tRPC" class="headerlink" title="tRPC"></a><strong>tRPC</strong></h3><p>排在第二位的 tRPC 可以从客户端导入服务端中定义的类型，以提供“<strong>端到端类型安全</strong>”。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9856b91e959c40248f68448ac08cf70e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>值得一提的是 T3 Stack 项目，它在一个流行的模板文件中结合了 tRPC、Next.js 和 Tailwind CSS（总排名第 16 位）。</p><h3 id="Astro"><a href="#Astro" class="headerlink" title="Astro"></a><strong>Astro</strong></h3><p>排在第三位的 Astro 在 2021 年作为静态站点生成器出现，并使部分水合的概念流行起来。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b5993fcb62443b6aae39838aa943a09~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>Astro 1.0 的发布彰显了 Astro 团队对创造流畅的开发者体验的一丝不苟。新的 SSR 支持与任何前端工具（如 React 和 SCSS）的“内置”集成让 Web 应用开发变得简单。</p><h3 id="Remix"><a href="#Remix" class="headerlink" title="Remix"></a><strong>Remix</strong></h3><p>排在第四位的 Remix 保持快速增长。它于 2021 年开源，仅一年后就被 Shopify 收购。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e45550342d0d49c782b9602ce19199b4~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>Remix 不依赖于静态页面生成，而是利用分布式计算和原生浏览器功能在浏览器中提供出色的性能和令人惊叹的开发人员体验。</p><h2 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a><strong>构建工具</strong></h2><p>2022 年<strong>构建工具</strong>中的明星项目 Top 10 如下：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba2f566f57f2437ba5d9cbbf439b87e9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>今年，Vite 继续保持上升趋势，成为最流行的前端工具之一。 其前身 Snowpack 不再维护，推荐使用 Vite。它的使用不限于 Vue 生态系统：Vite 可以用于 SvelteKit、Storybook、Vitest，甚至可以作为 Create-React-App 的现代替代品。</p><p>我们还看到了使用 Nx 和 Turborepo 的 monorepo 构建工具的兴起。 Nwrl（Nx 背后的公司）已经接管了 Lerna 的维护并发布了默认启用 Nx 优化的 Lerna 6。</p><p>尽管 Babel 仍然很受欢迎，但 swc 和 esbuild 已被许多项目和元框架广泛使用。这些新工具可以显著提高构建和编译性能。swc 是一个更模块化的选择，因为它提供了一个插件系统。</p><p>Vercel 宣布了 Turbopack（alpha），这是一个由 Tobias Koppers（Webpack 创建者） 创建的全新的、快速的 Rust 打包工具。</p><p>Rome 工具链发布了它的第一个稳定版本。目前其使用率较低，但今年可能会增加。</p><p>今年 Rust 中的许多前端工具可能会出现在新闻中：</p><ul><li><strong>Lightning CSS[2]</strong> （以前称为 Parcel CSS）：更快的 CSS 工具链；</li><li><strong>stc[3]</strong> ：比 tsc 更快的替代品；</li><li><strong>mdxjs-rs[4]</strong> ：更快的 MDX 实现。</li></ul><h2 id="CSS-in-JS"><a href="#CSS-in-JS" class="headerlink" title="CSS in JS"></a><strong>CSS in JS</strong></h2><p>2022 年 **CSS in JS **中的明星项目 Top 10 如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d23314eb4d74b898abd5a17713039f0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a><strong>测试工具</strong></h2><p>2022 年<strong>测试工具</strong>中的明星项目 Top 10 如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b51c0e7a54ce4bfbbddeb839d797ea7f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a><strong>移动端</strong></h2><p>2022 年<strong>移动端</strong>中的明星项目 Top 10 如下：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83eed25a5f0e42ce8ef438b4cb528fba~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="桌面端"><a href="#桌面端" class="headerlink" title="桌面端"></a><strong>桌面端</strong></h2><p>2022 年<strong>桌面端</strong>中的明星项目 Top 5 如下：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e2607f8aa004babbe516a75541f01ef~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="静态站点"><a href="#静态站点" class="headerlink" title="静态站点"></a><strong>静态站点</strong></h2><p>2022 年<strong>静态站点</strong>中的明星项目 Top 10 如下：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34287f61206a40228411e8a4c4503596~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a><strong>状态管理</strong></h2><p>2022 年<strong>状态管理</strong>中的明星项目 Top 10 如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b92150a6f6c4333a0613c2f74ae7f98~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a><strong>GraphQL</strong></h2><p>2022 年 **GraphQL **中的明星项目 Top 10 如下：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a20adc93ea3493898a28b3805604630~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>2022 年始于混乱，当时两个非常受欢迎的 npm 包被其创建者故意破坏：Faker.js 和 colors.js。</p><p>当 Lerna （一个流行的 mono-repos 工具）被宣布无人维护时，这个庞大的生态系统的脆弱性再次得到证明。直到 Nx 背后的公司 Nrwl 宣布将接管 Lerna 的管理权。</p><p>如今，TypeScript 正在成为编写 JavaScript 的标准（Deno 和 Bun 的一流支持，Next.js 的默认设置，Vite 的开箱即用支持等)。</p><p>对于开发人员和最终用户而言，JavaScript 在代码库和工具中所占的地位会带来一些问题：</p><ul><li>在大型代码库中，构建时间失去控制；</li><li>JavaScript 的平均大小不断增加导致性能不佳。</li></ul><p>2022 年，以下工具为这些问题提供了解决方案：</p><ul><li><strong>Bun</strong>，年度冠军，采用激进的方法来加快安装和构建时间；</li><li><strong>Rome</strong>：一个 linter 和 formatter 程序，旨在成为管理用 JS&#x2F;TS 编写的应用的单一工具；</li><li><strong>Vite</strong>：构建工具。</li></ul><p>对于浏览器中的性能，不同的模式竞争：</p><ul><li>Zero baseline JavaScript 框架几乎不向浏览器提供 JS（Qwik 处于领先地位）；</li><li>部分水合作用为静态页面提供交互岛 (Astro)；</li><li>React 服务端组件（由 Next.js 13 和 Gatsby 实现）在服务端委派更多工作；</li><li>Remix 实现的渐进增强的单页应用架构在浏览器中提供了出色的 DX 和性能，而不会影响任何动态行为。</li></ul><p>JavaScript 格局曾经非常分散：一侧是多种浏览器，另一侧是 Node.js，它有自己的 CommonJS 模块系统和自己的 API。</p><p>随着边缘计算的兴起，现在出现了一种强烈的趋势，即在任何地方都使用相同的标准化 API 子集（fetch、HTTP 请求和响应等）。</p><blockquote><p><strong>参考文章</strong>：<a href="https://link.zhihu.com/?target=https://risingstars.js.org/2022/en">https://risingstars.js.org/2022/en</a>  </p></blockquote><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h3><p>[1] Best of JS: <em><a href="https://link.zhihu.com/?target=https://bestofjs.org/">https://bestofjs.org/</a></em></p><p>[2] Lightning CSS: <em><a href="https://link.zhihu.com/?target=https://lightningcss.dev/">https://lightningcss.dev/</a></em></p><p>[3] stc: <em><a href="https://link.zhihu.com/?target=https://github.com/dudykr/stc">https://github.com/dudykr/stc</a></em></p><p>[4] mdxjs-rs: <em><a href="https://link.zhihu.com/?target=https://github.com/wooorm/mdxjs-rs">https://github.com/wooorm/mdxjs-rs</a></em></p><p>本文转载至：<a href="https://www.zhihu.com/people/qian-duan-chong-dian-bao">知乎-【前端充电宝】</a></p><p>原文链接：<a href="https://zhuanlan.zhihu.com/p/597266732?utm_campaign=shareopn&utm_medium=social&utm_oi=1266022480620912640&utm_psn=1595046742000668672&utm_source=wechat_session"># 2022年JavaScript明星项目公布，最受欢迎的竟是它？</a></p>]]></content>
      
      
      <categories>
          
          <category> 开源大事件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【惊】 前端圈又现npm投毒事件！！</title>
      <link href="/e2934b6b44a9/"/>
      <url>/e2934b6b44a9/</url>
      
        <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>业界大佬雪碧老师发的文：<a href="https://twitter.com/ewind1994/status/1610868861976604673">今天我们发现一位公关试图毒害我们的GitHub项目</a><br>一个名为 chalk-next 复刻 chalk 的包文件中包含递归删除本地配置代码。</p><p>NPM 地址： <a href="https://www.npmjs.com/package/chalk-next">https://www.npmjs.com/package/chalk-next</a> 现在已经看不见了</p><p>作者为 vue-admin-beautiful 前端 Admin 项目的作者</p><h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><p>有人顺着这个人查了下。 </p><ol><li><p>这个人很可能是那个不断发广告文档收费的那个，那个 1w stars 但是没有 issues 和 PR. </p></li><li><p>这个人的 v2ex 相关的帖子 </p></li><li><p>这个人做了不少包名 + next 都包含递归删除的代码 </p></li><li><p>GitHub 搜了下，有几个项目用了这些包其中还有企业项目</p></li></ol><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0f9c54caaa1406fbef37a23b85a1953~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="v2ex相关帖子："><a href="#v2ex相关帖子：" class="headerlink" title="v2ex相关帖子："></a>v2ex相关帖子：</h2><ul><li><a href="https://www.v2ex.com/t/906834#reply0">新的前端 npm 包投毒事件</a></li></ul><p>评论部分内容：</p><blockquote><p>从他的营销 vue-admin-beautiful 就感到恶心，果然丑人多作怪</p></blockquote><blockquote><p><a href="https://www.npmjs.com/package/chokidar-next?activeTab=explore">https://www.npmjs.com/package/chokidar-next?activeTab=explore</a><br>  搜索 thanks  不止 chalk-next 投了, 其他的一些 -next 都有, 这人真是不怕死啊, 干这种缺德事..</p></blockquote><blockquote><p>可怜，这人生活得过的多不如意才能把删除别人文件的函数起名叫 thanks</p></blockquote><ul><li><a href="https://www.v2ex.com/t/793276?p=1">实名抵制 vue-admin-beautiful</a></li></ul><p>文章部分内容：</p><blockquote><p>开一个新的项目，不想把前端的时间都浪费在写页面上，于是谷歌了一圈，发现 vue-admin-beautiful 挺好看的（界面看起来不错），并且收费也不贵，但是没用过，于是想着先来个免费的看看。</p></blockquote><blockquote><p>其实在用之前，v 站搜了一圈，发现很多人吐槽割韭菜，当时想的是如果确实好用，几百块也不贵，就没细看，结果就入坑了</p></blockquote><blockquote><p> 没有文档</p></blockquote><blockquote><p>选择的开源版，clone 后项目跑起来没有文档？？</p></blockquote><blockquote><p>最后在 github 上找到一段话</p></blockquote><blockquote><p>请我们喝杯咖啡，支付后联系 QQ 783963206 邀请您进入讨论群（由于用户数较多，如果您打赏后未通过好友请求，请在支付宝支付页面选择联系商家），不管您请还是不请，您都可以享受到开源的代码，感谢您的支持和信任，群内提供 vue-admin-beautifu 基础版本、开发工具自动配置教程及项目开发文档。</p></blockquote><blockquote><p>说实话，这段话在我看来，就是：<code>没有文档，想要文档给 20 再说~</code></p></blockquote><blockquote><p> 文档不全 + 引导好评</p></blockquote><blockquote><p>你以为给了 20 就完事了？文档里面只是简单的描述了一下运行原理，配置项等基础信息。</p></blockquote><blockquote><p>一般人 clone 之后，都想改主题，我想作者肯定是发现了这个需求，文档上没有任何关于修改主题的说明。最后通过阅读代码，发现只需要更改 <code>body</code> 的 <code>class</code> 属性即可。等修改完代码一看，改了属性不起作用。这个时候回到群机器人看到了这个消息</p></blockquote><blockquote><p>我真的被惊到了，开源项目能做到这种无耻的程度，也是没有第二人了。 其实对于我来说，付费真的没关系，关键是吃相不能这么难看。</p></blockquote><blockquote><p>据说作者就在 v 站，特意发帖避免后面的人入坑。 你可以直接把我踢出群，删除文档权限，我那 20 就当喂了狗。</p></blockquote><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>上一次投毒事件（faker.js）才过去不久,又出现了一起，开源圈子的一种信任危机，有网友说npm模块是真的不敢闭着眼睛用，公司项目用的包我甚至要去瞅一眼源码和issue才敢用，的确如此，开源的初衷是好的，但是打着开源的幌子，恰烂钱，就。。。。</p><p>注：信息来源于网络，请大家理性吃瓜</p>]]></content>
      
      
      <categories>
          
          <category> 开源大事件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2023 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时长一年半前端练习生的2022年终总结</title>
      <link href="/173f0fccac78/"/>
      <url>/173f0fccac78/</url>
      
        <content type="html"><![CDATA[<h2 id="2023关键字：工作、琐事、开源"><a href="#2023关键字：工作、琐事、开源" class="headerlink" title="2023关键字：工作、琐事、开源"></a>2023关键字：工作、琐事、开源</h2><h2 id="2022-flag完成情况"><a href="#2022-flag完成情况" class="headerlink" title="| 2022 flag完成情况"></a>| 2022 flag完成情况</h2><ul><li><input disabled="" type="checkbox"> 和女朋友订婚。👩‍❤️‍👨 （疫情原因，推迟到2023年初）</li><li><input disabled="" type="checkbox"> <del>产出一个50-100star的开源项目。🤠 （完美达成）</del></li><li><input disabled="" type="checkbox"> <del>关注学习财经类知识。🏴‍☠️ （老韭菜了）</del></li><li><input disabled="" type="checkbox"> <del>工作能更进一步。💰 （一般般）</del></li></ul><h2 id="工作"><a href="#工作" class="headerlink" title="| 工作"></a>| 工作</h2><p>今年，我终于不再是一个刚毕业的前端小白，是一个时长一年半的前端练习生，擅长唱、跳，rap（手动狗头）。</p><p>今年怎么说，工作没有惊喜也没有意外，平平淡淡，但确实也在这个公司学习到了很多。薪资就不说了，一般水平。</p><p>是不是现在啥公司都在搞低代码平台，我今年也有大部分时间花在了这上面。说实话我不怎么看好这个赛道。没办法老板喜欢这玩意，据说能提效，然后打翻自己的狗碗。</p><p>工作中感觉接触面比较小，这可能就是B端页面到弊端，当然也因为此有时间研究一些好玩的东西，比如vscode插件，chrome插件什么的，能沉淀出一些业务框架。现在基本上已经全面切换到vite和vue3了，业务中没有上TS，底层库也全切到TS了。</p><p>希望明年，薪资能有一个质的改变吧。</p><p>希望技术也能多方面发展一下，一直想学一下后端技术，看看2023年能不能有机会，成为一个全干工程师</p><p>还有就是，有些时候觉得别人比你强不了多少，就工作时间长，然后就比你薪资高很多，薪资与工作时间成正比？，或许是我狭隘了，没发现被人到过人之处。</p><h2 id="开源"><a href="#开源" class="headerlink" title="| 开源"></a>| 开源</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5c9fedd16064bb8a9a94be132dd5ec6~tplv-k3u1fbpfcp-watermark.image" alt="截屏2023-01-01 15.14.42.png"></p><p>一直想积极活跃到开源社区，有时候确实忙不过来。</p><h3 id="gacm"><a href="#gacm" class="headerlink" title="gacm"></a>gacm</h3><p>还好完成了，2022的flag产出一个100+star的项目，感谢阮一峰老师的<a href="https://github.com/ruanyf/weekly/blob/master/docs/issue-214.md"># 科技爱好者周刊（第 214 期）：你的地图是错的</a>一期的推荐。</p><ul><li><a href="https://github.com/kinfuy/gacm">【gacm】</a>Github源码地址，有有兴趣的小伙伴可以看看</li></ul><h3 id="其他开源贡献"><a href="#其他开源贡献" class="headerlink" title="其他开源贡献"></a>其他开源贡献</h3><p>1、<a href="https://github.com/element-plus/element-plus">ElementPlus</a> (这个PR很有意义，是我第一次在GitHub提PR，没想到就被合并了，虽然只是很简单的几行代码)</p><ul><li>issues:1 </li><li>PR: 1</li></ul><p>2、<a href="https://github.com/vitejs">vitejs</a>&#x2F;<a href="https://github.com/vitejs/vite">vite</a> Next generation frontend tooling. It’s fast!</p><ul><li>issues:1 </li><li>PR: 2</li></ul><p>3、<a href="https://github.com/apache">apache</a>&#x2F;<a href="https://github.com/apache/inlong">inlong</a> apache基金会下的应龙</p><ul><li>issues：9</li><li>PR:9</li></ul><p>4、<a href="https://github.com/AutomaApp">AutomaApp</a>&#x2F;<a href="https://github.com/AutomaApp/automa">automa</a> 一款浏览器自动化插件</p><ul><li>issues:1 </li><li>PR: 1</li></ul><p>5、<a href="https://github.com/johnsoncodehk">johnsoncodehk</a>&#x2F;<a href="https://github.com/johnsoncodehk/volar">volar</a>（vue3 vscode扩展工具）</p><ul><li>issues：2</li></ul><p>其他无意义的，错误的issues就不统计了</p><p>希望明年能够更多的参与的开源社区中去。参与开源的过程中确实可以学习到很多知识，什么是规范，什么是流程化，虽然这些pr都是一些简单的，但是也花了功夫去维护。</p><h2 id="生活"><a href="#生活" class="headerlink" title="| 生活"></a>| 生活</h2><p>今年的生活，还算比较满意吧，有女朋友的陪伴，北漂的日子也不是那么无聊，可以一起畅想未来的日子，一起做想吃的东西，一起去想去的地方。</p><p>环球影城刺激的霸天虎过山车</p><p>什刹海滑冰天然滑冰场</p><p>颐和园的倾盆大雨</p><p>南锣鼓巷的小吃，烟袋斜街椰子蛋</p><p>生日小惊喜</p><p>两张奥密克戎新冠体验卡</p><p>糟心的房子，恶心的中介（避坑首嘉公寓）</p><p>还有一个秘密</p><p>今年就是订婚过程有些曲折，感觉每个人都怪我，父母怪我，女朋友怪我，我在想是不是自己处理事情，真的特别烂，婆媳矛盾处理不好，还是问题太难了，处于一个特别尴尬的位置，说谁不是，好像都不合适，很多时候一提这个就爆炸，太累了，家家有本难念经，琐事一堆。希望订婚后一切都会好起来吧，好事多磨吧。</p><p>人人都说三十而立，但是三十离我太远了</p><p>社会的一年毒打，效果不怎么好呀</p><p>希望2023万事如意，升职加薪，心想事成吧</p><h2 id="2023-flag"><a href="#2023-flag" class="headerlink" title="| 2023 flag"></a>| 2023 flag</h2><ul><li>和女朋友订婚。👩‍❤️‍👨</li><li>活跃在开源社区 🏴‍☠️</li><li>对创业多一些关注 🫙</li><li>工作能更进一步。💰</li></ul>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极简的git账号与npm registry管理工具</title>
      <link href="/412e2ea616a3/"/>
      <url>/412e2ea616a3/</url>
      
        <content type="html"><![CDATA[<h2 id="极简的-git-账号与-npm-registry-管理工具"><a href="#极简的-git-账号与-npm-registry-管理工具" class="headerlink" title="极简的 git 账号与 npm registry 管理工具"></a>极简的 git 账号与 npm registry 管理工具</h2><p>极简的 git 账号与 npm registry 管理工具（ Git Account Management Tools &amp; NPM Registry Manager ）</p><h3 id="Why-Do"><a href="#Why-Do" class="headerlink" title="Why Do"></a>Why Do</h3><ul><li><p>需要经常切换 git 账户，懂的都懂！！</p></li><li><p>当前 nrm 的最新版本<a href="mailto:&#110;&#114;&#109;&#64;&#49;&#x2e;&#50;&#46;&#53;">&#110;&#114;&#109;&#64;&#49;&#x2e;&#50;&#46;&#53;</a> 不显示当前源地址<a href="https://github.com/Pana/nrm/issues/111">Pana&#x2F;nrm#111</a>  过了一年也没有修复。</p></li></ul><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ul><li><p>✨ git 账户与 npm registry 管理工具（ 无缝切换)</p></li><li><p>🚀 极简的操作方式，just like nvm</p></li><li><p>😊 gacm [gnrm] ls 自动添加本地 git 账户或者本地 npm registry 管理工具</p></li><li><p>👋 gnrm 灵活配置，无污染，区分包管理器</p></li></ul><h3 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pnpm add gacm -g</span><br><span class="line"></span><br><span class="line">yarn add gacm -g</span><br><span class="line"></span><br><span class="line">npm install gacm -g</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><h4 id="切换-git-账户"><a href="#切换-git-账户" class="headerlink" title="切换 git 账户"></a>切换 git 账户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># just like nvm</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看用户列表，会自动添加本地用户</span></span></span><br><span class="line">gacm ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 切换git账户</span></span></span><br><span class="line">gacm use xxx --local</span><br><span class="line"></span><br><span class="line">gacm use xxx --global</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 添加用户，--alias 可选  定义用户别名</span></span></span><br><span class="line">gacm add --name xxx --email xxx [--alias xxx]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 定义用户别名</span></span></span><br><span class="line">gacm alias xxxx xxxx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 删除用户</span></span></span><br><span class="line">gacm delete user</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="切换-NPM-Registry"><a href="#切换-NPM-Registry" class="headerlink" title="切换 NPM Registry"></a>切换 NPM Registry</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># just like nvm</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看NPM Registry 列表，会自动添加本地NPM Registry</span></span></span><br><span class="line">gnrm ls [-p xxxx]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 切换 npm registry default npm</span></span></span><br><span class="line">gacm use xxx [-p yarn]</span><br><span class="line"></span><br><span class="line">gacm use xxx [-p cnpm]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 添加registry  --alias 可选  定义 registry 别名</span></span></span><br><span class="line">gacm add --name xxx --registry xxx [--alias xxx]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 定义registry别名</span></span></span><br><span class="line">gacm alias xxxx xxxx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 删除 registry</span></span></span><br><span class="line">gacm delete xxx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><p><a href="https://github.com/alqmc/gacm">github</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git账号 npm registry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【低代码平台之哈姆雷特】千变万化的属性设置器</title>
      <link href="/a2549340fcf0/"/>
      <url>/a2549340fcf0/</url>
      
        <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>一个低代码平台最核心部分，可能大多数人都觉得是渲染器部分，而我更觉得属性设置器才是正正的灵魂所在，渲染器，物料决定了一个低代码平台的下线，而属性设置器决定了上线。就像一千个观众眼中有一千个哈姆雷特一样。今天就带大家看看 lowcode-engine 是怎么实现属性设置器的。</p><h2 id="什么是属性设置器"><a href="#什么是属性设置器" class="headerlink" title="什么是属性设置器"></a>什么是属性设置器</h2><p>我们先来梳理一下，我们来写 vue 的时候，使用一个组件，肯定会有很多属性，事件，样式需要我们去定义，低代码平台也一样，只是简化了我们使用的成本，利用这种可视化的方式去设置，组件的这些参数依然需要有地方去告诉组件，该怎么去渲染。这是就是属性设置器发挥作用的地方了。</p><blockquote><p>设置器主要用于低代码组件属性值的设置，顾名思义叫”设置器”，又称为 Setter。由于组件的属性有各种类型，需要有与之对应的设置器支持，每一个设置器对应一个值的类型。—— lowcode-engine 官方定义</p></blockquote><p><img src="/static/articles/setter.png" alt="物料"></p><p>我们可以很清晰的看见 lowcode-engine 将设置器分为四类：</p><ul><li>属性：展示该物料常规的属性</li><li>样式：展示该物料样式的属性</li><li>事件：如果该物料有声明事件，则会出现事件面板，用于绑定事件。</li><li>高级：两个逻辑相关的属性，<strong>条件渲染</strong>和<strong>循环</strong></li></ul><p>其实从上面不难看出，这四个分类基本上涵盖了绝大部分场景的需要。我们在后期只需要根据不同的使用对象开放相对应的功能即可。</p><h2 id="该如何实现一个属性设置器"><a href="#该如何实现一个属性设置器" class="headerlink" title="该如何实现一个属性设置器"></a>该如何实现一个属性设置器</h2><p>简单的梳理了一下思路与官方可能不完全一致，lowcode-engine 实现的相当复杂，再加上是 React 代码，没有写过，看起来还是有点吃力，这种复杂的系统，lowcode-engine 官方采用了面向对象的写法。每一个属性设置器都是一个 setter 类，他们之间可以相互嵌套，通过 path 路径操作具体的值，不了解的可以看一下<a href="https://www.lodashjs.com/">【lodashjs】</a>get 和 set 方法的实现。这样就可以和具体的每一个设置器之间分开来，只需要每个设置抛出对应的值变化。触发事件显示对应值即可。</p><p><img src="/static/articles/setter1.png" alt="setter"></p><p>通过上图我们可以清晰的看见，物料与渲染器，与属性设置器之间的联系，setter 与 setter 的关系，其实也就对应着我们的具体属性结构，有多少个属性就会生成多少 setter，彼此之间构成一个树形结构，path 路径作为沟通桥梁，获取值修改值。</p><p>贴一段官方代码，这个就是 setter 实现的一个接口，定义每一个 setter 拥有的属性方法，都贴心的给出了注释</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">SettingTarget</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 同样类型的节点</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">isSameComponent</span>: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 一个</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">isSingle</span>: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 多个</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">isMultiple</span>: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 编辑器引用</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">editor</span>: <span class="title class_">IEditor</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 访问路径</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">path</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 顶端</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">top</span>: <span class="title class_">SettingTarget</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 父级</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">parent</span>: <span class="title class_">SettingTarget</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取当前值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">getValue</span>: <span class="function">() =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置当前值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">setValue</span>: <span class="function">(<span class="params">value: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取得子项</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">get</span>: <span class="function">(<span class="params">propName: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt;</span> <span class="title class_">SettingTarget</span> | <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取得子项</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  getProps?: <span class="function">() =&gt;</span> <span class="title class_">SettingTarget</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取子项属性值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">getPropValue</span>: <span class="function">(<span class="params">propName: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置子项属性值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">setPropValue</span>: <span class="function">(<span class="params">propName: <span class="built_in">string</span> | <span class="built_in">number</span>, value: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 清除已设置值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">clearPropValue</span>: <span class="function">(<span class="params">propName: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取顶层附属属性值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">getExtraPropValue</span>: <span class="function">(<span class="params">propName: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置顶层附属属性值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">setExtraPropValue</span>: <span class="function">(<span class="params">propName: <span class="built_in">string</span>, value: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// @todo 补充 node 定义</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取 node 中的第一项</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">getNode</span>: <span class="function">() =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这个是内部实现了，要实现一个具体的 setter，不需要怎么复杂，这个只是内部 lowcode-engine 内部流转，<br>下面官方给出的几个设置器，有兴趣可以去看看怎么去实现的，最核心的部分是 ArraySetter 和 ObjectSetter,这两个 setter 提供属性嵌套的能力，也是最常用的.</p><p><a href="https://github.com/alibaba/lowcode-engine-ext">【官方设置器源码仓库】</a></p><p><a href="https://www.yuque.com/lce/doc/oc220p#fl46">【官方设置器列表说明】</a></p><p><img src="/static/articles/setter2.png" alt="setter"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>优秀的属性设置器，</p><ul><li>需要有优秀的扩展性</li><li>优秀的交互性</li><li>简化设置优先原则</li></ul>]]></content>
      
      
      <categories>
          
          <category> 低代码系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 低代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【低代码平台之万物互联】怎么打通物料，渲染器，属性设置器？</title>
      <link href="/dd287c7f1138/"/>
      <url>/dd287c7f1138/</url>
      
        <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>低代码平台核心的三个概念：物料、渲染器、属性设置器。那 Low-Code Engine 怎么将他们串联起来形成一个整体，并保持高拓展性，只要你动手做过低代码, 你就会发现前文提到的协议的重要性了。</p><blockquote><p><a href="https://lowcode-engine.cn/lowcode">《低代码引擎搭建协议规范》</a></p></blockquote><blockquote><p><a href="https://lowcode-engine.cn/material">《低代码引擎物料协议规范》</a></p></blockquote><blockquote><p><a href="https://lowcode-engine.cn/assets">《低代码引擎资产包协议规范》</a></p></blockquote><h2 id="什么是物料？"><a href="#什么是物料？" class="headerlink" title="什么是物料？"></a>什么是物料？</h2><p><img src="/static/articles/material.png" alt="物料"></p><p>物料是页面搭建的原料，按照粒度可分为组件、区块和模板：</p><ul><li>组件：组件是页面搭建最小的可复用单元，其只对外暴露配置项，用户无需感知其内部实现；</li><li>区块：区块是一小段符合低代码协议的 schema，其内部会包含一个或多个组件，用户向设置器中拖入一个区块后可以随意修改其内部内容；</li><li>模板：模板和区块类似，也是一段符合低代码协议的 schema，不过其根节点的 componentName 需固定为 Page，它常常用于初始化一个页面；</li></ul><p>低代码编辑器中的物料需要进行一定的配置和处理，才能让用户在低代码平台使用起来。这个过程中，需要一份一份配置文件，也就是资产包。资产包文件中，针对每个物料定义了它们在低代码编辑器中的使用描述。</p><h4 id="先看一下一份简单的-Button-物料配置"><a href="#先看一下一份简单的-Button-物料配置" class="headerlink" title="先看一下一份简单的 Button 物料配置"></a>先看一下一份简单的 Button 物料配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">snippets</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;主按钮&#x27;</span>,</span><br><span class="line">        <span class="attr">screenshot</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">schema</span>: &#123;</span><br><span class="line">        <span class="attr">componentName</span>: <span class="string">&#x27;Button&#x27;</span>,</span><br><span class="line">        <span class="attr">props</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;primary&#x27;</span>,</span><br><span class="line">            <span class="attr">children</span>: <span class="string">&#x27;主按钮&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;默认分组_通用_Button_主按钮&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">componentName</span>: <span class="string">&#x27;Button&#x27;</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;按钮&#x27;</span>,</span><br><span class="line">    <span class="attr">category</span>: <span class="string">&#x27;通用&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;功能&#x27;</span>,</span><br><span class="line">        <span class="attr">display</span>: <span class="string">&#x27;block&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;group&#x27;</span>,</span><br><span class="line">        <span class="attr">items</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;children&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">            <span class="attr">tip</span>: <span class="string">&#x27;children | 内容&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">propType</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;oneOfType&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: [<span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;string&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">setter</span>: [<span class="string">&#x27;SlotSetter&#x27;</span>, <span class="string">&#x27;StringSetter&#x27;</span>, <span class="string">&#x27;VariableSetter&#x27;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;htmlType&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;原生类型&#x27;</span>,</span><br><span class="line">            <span class="attr">tip</span>: <span class="string">&#x27;htmlType | 设置 `button` 原生的 `type` 值&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">propType</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;oneOf&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: [<span class="string">&#x27;submit&#x27;</span>, <span class="string">&#x27;reset&#x27;</span>, <span class="string">&#x27;button&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">setter</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">componentName</span>: <span class="string">&#x27;RadioGroupSetter&#x27;</span>,</span><br><span class="line">                <span class="attr">props</span>: &#123;</span><br><span class="line">                <span class="attr">options</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;Submit&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;submit&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;Reset&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;reset&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;Button&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;VariableSetter&#x27;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">defaultValue</span>: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;href&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;跳转地址&#x27;</span>,</span><br><span class="line">            <span class="attr">tip</span>: <span class="string">&#x27;href | 点击跳转的地址，指定此属性 button 的行为和 a 链接一致&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">propType</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">            <span class="attr">setter</span>: [<span class="string">&#x27;StringSetter&#x27;</span>, <span class="string">&#x27;VariableSetter&#x27;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;target&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;Target&#x27;</span>,</span><br><span class="line">            <span class="attr">tip</span>: <span class="string">&#x27;target | 相当于 a 链接的 target 属性，href 存在时生效&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">propType</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;oneOf&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: [<span class="string">&#x27;_self&#x27;</span>, <span class="string">&#x27;_blank&#x27;</span>, <span class="string">&#x27;_parent&#x27;</span>, <span class="string">&#x27;_top&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">setter</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">componentName</span>: <span class="string">&#x27;SelectSetter&#x27;</span>,</span><br><span class="line">                <span class="attr">props</span>: &#123;</span><br><span class="line">                <span class="attr">options</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;本窗口跳转&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;_self&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;打开新标签页&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;_blank&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;父窗口跳转&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;_parent&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;顶层窗口跳转&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;_top&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;StringSetter&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;VariableSetter&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;外观&#x27;</span>,</span><br><span class="line">        <span class="attr">display</span>: <span class="string">&#x27;block&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;group&#x27;</span>,</span><br><span class="line">        <span class="attr">items</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;type&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;类型&#x27;</span>,</span><br><span class="line">            <span class="attr">tip</span>: <span class="string">&#x27;type | 设置按钮类型&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">propType</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;oneOf&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: [<span class="string">&#x27;primary&#x27;</span>, <span class="string">&#x27;ghost&#x27;</span>, <span class="string">&#x27;dashed&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>, <span class="string">&#x27;link&#x27;</span>, <span class="string">&#x27;text&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">setter</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">componentName</span>: <span class="string">&#x27;SelectSetter&#x27;</span>,</span><br><span class="line">                <span class="attr">props</span>: &#123;</span><br><span class="line">                <span class="attr">options</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;主按钮&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;primary&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;虚线框按钮&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;dashed&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;危险按钮&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;danger&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;链接按钮&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;link&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;类文本按钮&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;text&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;VariableSetter&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;size&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;尺寸&#x27;</span>,</span><br><span class="line">            <span class="attr">tip</span>: <span class="string">&#x27;size | 设置按钮大小&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">propType</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;oneOf&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: [<span class="string">&#x27;large&#x27;</span>, <span class="string">&#x27;middle&#x27;</span>, <span class="string">&#x27;small&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">setter</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">componentName</span>: <span class="string">&#x27;RadioGroupSetter&#x27;</span>,</span><br><span class="line">                <span class="attr">props</span>: &#123;</span><br><span class="line">                <span class="attr">options</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;大&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;large&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;中&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;middle&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;小&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;small&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;VariableSetter&#x27;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">defaultValue</span>: <span class="string">&#x27;middle&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;shape&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;形状&#x27;</span>,</span><br><span class="line">            <span class="attr">tip</span>: <span class="string">&#x27;shape | 设置按钮形状，可选值为 `circle`、 `round` 或者不设&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">propType</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;oneOf&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>: [<span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;circle&#x27;</span>, <span class="string">&#x27;round&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">defaultValue</span>: <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">            <span class="attr">setter</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">componentName</span>: <span class="string">&#x27;RadioGroupSetter&#x27;</span>,</span><br><span class="line">                <span class="attr">props</span>: &#123;</span><br><span class="line">                <span class="attr">options</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;默认&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;default&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;圆形&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;circle&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;圆角&#x27;</span>,</span><br><span class="line">                    <span class="attr">value</span>: <span class="string">&#x27;round&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;VariableSetter&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;icon&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;图标&#x27;</span>,</span><br><span class="line">            <span class="attr">tip</span>: <span class="string">&#x27;icon | 设置按钮的图标组件&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">propType</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">            <span class="attr">setter</span>: &#123;</span><br><span class="line">            <span class="attr">componentName</span>: <span class="string">&#x27;SlotSetter&#x27;</span>,</span><br><span class="line">            <span class="attr">initialValue</span>: &#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;JSSlot&#x27;</span>,</span><br><span class="line">                <span class="attr">value</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">componentName</span>: <span class="string">&#x27;Icon&#x27;</span>,</span><br><span class="line">                    <span class="attr">props</span>: &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;SearchOutlined&#x27;</span>,</span><br><span class="line">                    <span class="attr">size</span>: <span class="number">14</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;block&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;自适应&#x27;</span>,</span><br><span class="line">            <span class="attr">tip</span>: <span class="string">&#x27;block | 将按钮宽度调整为其父宽度的选项&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">propType</span>: <span class="string">&#x27;bool&#x27;</span>,</span><br><span class="line">            <span class="attr">setter</span>: <span class="string">&#x27;BoolSetter&#x27;</span>,</span><br><span class="line">            <span class="attr">defaultValue</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;danger&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;危险按钮&#x27;</span>,</span><br><span class="line">            <span class="attr">tip</span>: <span class="string">&#x27;danger | 设置危险按钮&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">propType</span>: <span class="string">&#x27;bool&#x27;</span>,</span><br><span class="line">            <span class="attr">setter</span>: <span class="string">&#x27;BoolSetter&#x27;</span>,</span><br><span class="line">            <span class="attr">defaultValue</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;ghost&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;幽灵属性&#x27;</span>,</span><br><span class="line">            <span class="attr">tip</span>: <span class="string">&#x27;ghost | 幽灵属性，使按钮背景透明&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">propType</span>: <span class="string">&#x27;bool&#x27;</span>,</span><br><span class="line">            <span class="attr">setter</span>: <span class="string">&#x27;BoolSetter&#x27;</span>,</span><br><span class="line">            <span class="attr">defaultValue</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">        <span class="attr">display</span>: <span class="string">&#x27;block&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;group&#x27;</span>,</span><br><span class="line">        <span class="attr">items</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;loading&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;载入状态&#x27;</span>,</span><br><span class="line">            <span class="attr">tip</span>: <span class="string">&#x27;loading | 设置按钮载入状态&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">propType</span>: <span class="string">&#x27;bool&#x27;</span>,</span><br><span class="line">            <span class="attr">setter</span>: [<span class="string">&#x27;BoolSetter&#x27;</span>, <span class="string">&#x27;VariableSetter&#x27;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;disabled&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;是否禁用&#x27;</span>,</span><br><span class="line">            <span class="attr">tip</span>: <span class="string">&#x27;disabled | 是否为禁用状态&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">propType</span>: <span class="string">&#x27;bool&#x27;</span>,</span><br><span class="line">            <span class="attr">setter</span>: [<span class="string">&#x27;BoolSetter&#x27;</span>, <span class="string">&#x27;VariableSetter&#x27;</span>],</span><br><span class="line">            <span class="attr">defaultValue</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;事件&#x27;</span>,</span><br><span class="line">        <span class="attr">display</span>: <span class="string">&#x27;block&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;group&#x27;</span>,</span><br><span class="line">        <span class="attr">items</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;onClick&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;点击回调&#x27;</span>,</span><br><span class="line">            <span class="attr">tip</span>: <span class="string">&#x27;点击按钮时的回调&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">propType</span>: <span class="string">&#x27;func&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">configure</span>: &#123;</span><br><span class="line">    <span class="attr">supports</span>: &#123;</span><br><span class="line">        <span class="attr">events</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;onClick&#x27;</span>,</span><br><span class="line">            <span class="attr">template</span>:</span><br><span class="line">            <span class="string">&quot;onClick(event,$&#123;extParams&#125;)&#123;\n// 点击按钮时的回调\nconsole.log(&#x27;onClick&#x27;, event);&#125;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">style</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">npm</span>: &#123;</span><br><span class="line">    <span class="attr">package</span>: <span class="string">&#x27;@alilc/lowcode-materials&#x27;</span>,</span><br><span class="line">    <span class="attr">version</span>: <span class="string">&#x27;1.0.3&#x27;</span>,</span><br><span class="line">    <span class="attr">exportName</span>: <span class="string">&#x27;Button&#x27;</span>,</span><br><span class="line">    <span class="attr">main</span>: <span class="string">&#x27;build/antd-lowcode/view.js&#x27;</span>,</span><br><span class="line">    <span class="attr">destructuring</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">group</span>: &#123;</span><br><span class="line">    <span class="attr">zh_CN</span>: <span class="string">&#x27;默认分组&#x27;</span>,</span><br><span class="line">    <span class="attr">en_US</span>: <span class="string">&#x27;DefaultGroup&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;i18n&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">priority</span>: <span class="number">0</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>其中基本上涵盖了绝大部分我们编码过程中可能需要的属性参数，从物料就可以看见他与渲染器，属性设置器之间的关联，</p><ul><li><p><code>snippets 代码片段</code> 定义了组件不同状态下的低代码 schema (可以有多个)，用户从组件面板拖入组件到设置器时会向页面 schema 中插入 snippets 中定义的组件低代码 schema</p></li><li><p><code>props 组件属性信息</code> 定义了属性设置器需要的参数，包含了每一个属性的 setter，参数默认值等等，</p></li><li><p><code>configure 编辑体验增强</code> 定义各种定制编辑能力的配置信息</p><ul><li><p>props 属性面板配置</p><blockquote><p>用于属性面板能力描述</p></blockquote></li><li><p>component 组件能力配置</p><blockquote><p>与组件相关的能力、约束、行为等描述，有些信息可从组件视图实例上直接获取</p></blockquote></li><li><p>supports 通用扩展配置能力支持性</p><blockquote><p>用于通用扩展面板能力描述</p></blockquote></li><li><p>advanced 高级特性配置</p><blockquote><p>用户可以在这些配置通过引擎上下文控制组件在设置器中的表现，例如自动初始化组件的子组件、截获组件的操作事件进行个性化处理等</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;configure&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// 支持的事件枚举</span></span><br><span class="line">    <span class="string">&quot;supports&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// 支持事件列表</span></span><br><span class="line">    <span class="string">&quot;events&quot;</span>: [<span class="string">&quot;onClick&quot;</span>, <span class="string">&quot;onChange&quot;</span>],</span><br><span class="line">    <span class="comment">// 支持循环设置</span></span><br><span class="line">    <span class="string">&quot;loop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 支持条件设置</span></span><br><span class="line">    <span class="string">&quot;condition&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 支持样式设置</span></span><br><span class="line">    <span class="string">&quot;styles&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="什么是设置器？"><a href="#什么是设置器？" class="headerlink" title="什么是设置器？"></a>什么是设置器？</h2><p>设置器主要用于低代码组件属性值的设置，顾名思义叫”设置器”，又称为 Setter。由于组件的属性有各种类型，需要有与之对应的设置器支持，每一个设置器对应一个值的类型。</p><p>其中包含四类设置器：</p><ul><li>属性：展示该物料常规的属性</li><li>样式：展示该物料样式的属性</li><li>事件：如果该物料有声明事件，则会出现事件面板，用于绑定事件。</li><li>高级：两个逻辑相关的属性，条件渲染和循环</li></ul><p><img src="/static/articles/setter.png" alt="物料"></p><p>刚才我们在物料中看见的<code>setter</code> 配置就是给设置器的，Low-Code Engine 官方提供了常用的设置器，当然也可以自定义，</p><p><a href="https://www.yuque.com/lce/doc/oc220p?view=doc_embed&from=kb&from=kb&outline=1&title=1#fl46">Low-Code Engine 设置器列表</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;type&#x27;</span>,</span><br><span class="line">   <span class="attr">title</span>: &#123;</span><br><span class="line">   <span class="attr">label</span>: <span class="string">&#x27;类型&#x27;</span>,</span><br><span class="line">   <span class="attr">tip</span>: <span class="string">&#x27;type | 设置按钮类型&#x27;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">propType</span>: &#123;</span><br><span class="line">   <span class="attr">type</span>: <span class="string">&#x27;oneOf&#x27;</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">setter</span>: [</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="attr">componentName</span>: <span class="string">&#x27;SelectSetter&#x27;</span>,</span><br><span class="line">       <span class="attr">props</span>: &#123;</span><br><span class="line">       <span class="attr">options</span>: [</span><br><span class="line">           ...</span><br><span class="line">         ]</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">&#x27;VariableSetter&#x27;</span></span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么是渲染器？"><a href="#什么是渲染器？" class="headerlink" title="什么是渲染器？"></a>什么是渲染器？</h3><p>渲染器就是画布，提供物料编排能力，交互能力。物料的 <code>snippets</code> 提供的渲染器的基本渲染视图描述</p><blockquote><p>渲染依赖于 schema 和 components。其中 schema 和 components 需要一一对应，schema 中使用到的组件都需要在 components 中进行声明，否则无法正常渲染。</p></blockquote><h4 id="重要组成"><a href="#重要组成" class="headerlink" title="重要组成"></a>重要组成</h4><ul><li><p>schema</p><blockquote><p>搭建基础协议数据，渲染模块将基于 schema 中的内容进行实时渲染。</p></blockquote></li><li><p>components</p><blockquote><p>渲染模块渲染页面需要用到的组件依赖的实例，components 对象中的 Key 需要和搭建 schema 中的 componentName 字段对应。</p></blockquote></li><li><p>componentsMap</p><blockquote><p>配置规范参见《低代码引擎搭建协议规范》，主要在搭建场景中使用，用于提升用户搭建体验。</p></blockquote><ul><li><p>属性配置校验：用户可以配置组件特定属性的 propTypes，在搭建场景中用户输入的属性值不满足 propType 配置时，渲染模块会将当前属性设置为 undefined，避免组件抛错导致编辑器崩溃；</p></li><li><p>isContainer 标记：当组件被设置为容器组件且当前容器组件内没有其他组件时，用户可以通过拖拽方式将组件直接添加到容器组件内部；</p></li><li><p>parentRule 校验：当用户使用的组件未出现在组件配置的 parentRule 组件内部时，渲染模块会使用 visualDom 组件进行占位，避免组件抛错的同时在下钻编辑场景也能够不阻塞用户配置，典型的场景如 Step.Item、Table.Column、Tab.Item 等等。</p></li></ul></li><li><p>appHelper</p><blockquote><p>appHelper 主要用于设置渲染模块的全局上下文，目前 appHelper 支持设置以下上下文：</p></blockquote><ul><li>utils：全局公共函数</li><li>constants：全局常量</li><li>location：react-router 的 location 实例</li><li>history：react-router 的 history 实例</li></ul></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>兵马未动，粮草先行，Low-Code Engine 定义了基础协议，致力于解决低代码平台概念不通、物料孤岛、生态隔离的一系列问题，其实做任务复杂系统都可以如此，先设计，在编码，好过瞎弄一通，最后发现开始就错了，又推翻重来。</p><ul><li><p>先思考，后动手 🍖</p></li><li><p>先规范，后实现 🌮</p></li><li><p>先摸鱼、后摆烂 🍛</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 低代码系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 低代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【低代码系列之万物之初】重生之梦回Dreamweaver？</title>
      <link href="/f9eb0a0659ea/"/>
      <url>/f9eb0a0659ea/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>上期，简单了说了一下低代码平台的现状以及认识,有小伙伴说这不就是 Dreamweaver 吗？拖拉拽，生成代码。只能说是这样也不是这样，Dreamweaver 能算作可视化编程的一个解决方案吧，但不能完全代表低代码平台。笔者并没有使用过 Dreamweaver（入手便是 vscode🥭）。所以网上冲浪了一下看网友的总结 Dreamweaver:</p><ul><li>1.生成的代码基本无法维护，生成一坨屎， 如果下一个接手这个项目的人不用 DW， 那人就蒙圈了</li><li>2.无法使用前端生态，与什么 vue，React 之类的框架水土不服，npm 你都不好引入</li><li>3.不利于开发者自身发展，对代码的认识很非常浅，长期 DW 会导致不能深入技术</li><li>4.不能编写复杂的系统，比如一些没有 UI 的算法库</li></ul><p>这基本也是开发低代码平台的难点，这一期来说说，怎么搭建一个低代码平台吧。浅析一下阿里低代码引擎（ Low-Code Engine）到底做了些什么。他们怎么解决这些难题的。</p><p><img src="/static/articles/lowcode1.png" alt="image.png"></p><h2 id="标准化协议"><a href="#标准化协议" class="headerlink" title="标准化协议"></a>标准化协议</h2><p>协议对于开发来说并不陌生，我们常见的什么 HTTP 协议、DNS 协议、TCP&#x2F;IP 协议等等，一份优秀的协议能未后面省去不少麻烦。也能规范多人协作的效率。</p><p>在<a href="https://developer.aliyun.com/ebook/read/7507">《低代码引擎技术白皮书》</a>中介绍了什么是协议</p><blockquote><p>从建设背景出发，共建小组明确了低代码引擎的建设理念：协议先行，最小内核，最强生态。<br>协议先行<br>一份共同遵守的协议是整个体系的基石，决定了整个体系是否能够足够包容，兼容足够多的上层场景，同时也是整体技术体系能否足够稳定发展的基石，后续所有的引擎实现都是服务于协议的。</p></blockquote><ul><li><p>打破物料孤岛 🥝</p></li><li><p>低代码生态的基础 🍌</p></li><li><p>低代码引擎实现标准 🍉</p></li></ul><h3 id="协议链接"><a href="#协议链接" class="headerlink" title="协议链接"></a>协议链接</h3><p><a href="https://lowcode-engine.cn/lowcode">《低代码引擎搭建协议规范》</a></p><p><a href="https://lowcode-engine.cn/material">《低代码引擎物料协议规范》</a></p><p><a href="https://lowcode-engine.cn/assets">《低代码引擎资产包协议规范》</a></p><h2 id="最小内核"><a href="#最小内核" class="headerlink" title="最小内核"></a>最小内核</h2><p>Low-Code Engine 把低代码平台拆分出四个核心模块,涵盖了低代码平台的整个生命周期。</p><ul><li><p>入料模块</p><blockquote><p>入料能力，让组件在低代码平台使用更容易</p></blockquote></li><li><p>编排模块</p><blockquote><p>精心打造的编排模块，让拖拽、配置能力集成变得更简单</p></blockquote></li><li><p>渲染模块</p><blockquote><p>运行时渲染，快速提供协议的渲染能力</p></blockquote></li><li><p>出码模块</p><blockquote><p>出码能力，提升低代码的扩展性和性能</p></blockquote></li></ul><h2 id="最强生态"><a href="#最强生态" class="headerlink" title="最强生态"></a>最强生态</h2><ul><li><p>物料生态<br>物料是页面搭建的原料也是低代码的基础</p><p><img src="/static/articles/material.png" alt="image.png"></p></li><li><p>设计器生态<br>设计器优化基础物料的编排属性</p><p><img src="/static/articles/setter.png" alt="image.png"></p></li><li><p>插件生态<br>插件功能赋予低代码引擎更高的灵活性，低代码引擎的生态提供了一些官方的插件，但是无法满足所有人的需求，所以提供了强大的插件定制功能。<br>通过定制插件，在和低代码引擎解耦的基础上，我们可以和引擎核心模块进行交互，从而满足多样化的功能。不仅可以自定义插件的 UI，还可以实现一些非 UI 的逻辑：</p><p><img src="/static/articles/plugin.png" alt="image.png"></p></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>看完 Low-Code Engine 的设计，还觉得低代码平台就是简单的拖拉拽吗？下期再说说看 Low-Code Engine 怎么打通物料，渲染器，设计器，怎么优雅的数据通信。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li><a href="https://lowcode-engine.cn/">低代码引擎</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 低代码系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 低代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【低代码系列之序章】打翻前端的狗碗？</title>
      <link href="/9a12a4b1740b/"/>
      <url>/9a12a4b1740b/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是低代码平台"><a href="#什么是低代码平台" class="headerlink" title="什么是低代码平台"></a>什么是低代码平台</h2><p>让我们先看一下来着百度词条是怎么解释的：</p><p>低代码开发平台（LCDP）是无需编码（0 代码）或通过少量代码就可以快速生成应用程序的开发平台。通过可视化进行应用程序开发的方法（参考<a href="https://baike.baidu.com/item/%E5%8F%AF%E8%A7%86%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/22722596">可视编程语言</a>），使具有不同经验水平的开发人员可以通过图形化的用户界面，使用拖拽组件和模型驱动的逻辑来创建网页和移动应用程序。低代码开发平台（LCDP）的正式名称直到 2014 年 6 月才正式确定，整个低代码开发领域却可以追溯到更早前<a href="https://baike.baidu.com/item/%E7%AC%AC%E5%9B%9B%E4%BB%A3%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/7686026">第四代编程语言</a>和快速应用开发工具。</p><p><strong>【看完】呃呃呃…. 什么玩意</strong></p><h2 id="前端眼中的低代码"><a href="#前端眼中的低代码" class="headerlink" title="前端眼中的低代码"></a>前端眼中的低代码</h2><p>广义上的低代码平台包括低代码平台和零代码平台，它们都属于 APaaS（Application Platform as a Service  应用平台即服务），两者的主要区别在于对代码的依赖程度：</p><ul><li>低代码平台：通过自动代码生成和可视化编程，只需要少量代码，即可快速搭建各种应用</li><li>零代码平台：零开发经验的业务人员通过拖拽等方式，无需编写代码，即可快速搭建各种应用</li></ul><p>到底啥是低代码，在我看来就是<strong>拖拉拽，呼呼呼，一通操作，搞出一套能跑的系统，前端，后端，数据库，一把梭哈</strong>。当然这可能是最终目标，</p><p>现阶段市面上的低代码平台，大多基于一个具体化的场景来做的，比如从阿里钉钉跨平台协作方式，再到飞书上的审批流程，以及目前我们接触到的表单审批、投票的模板，这些都是关于低代码的实现方式。</p><p>我们来看一下阿里的开源低代码引擎</p><p><img src="/static/articles/lowcode.png" alt="image.png"></p><p>风格看起来也是更偏向于中后台管理系统的生成，有物料区，渲染区，和属性编辑区组成，相信大部分的低代码平台也是如此。</p><p><strong>低代码平台还有很长的路需要走</strong></p><h2 id="有低代码后就不要开发了？"><a href="#有低代码后就不要开发了？" class="headerlink" title="有低代码后就不要开发了？"></a>有低代码后就不要开发了？</h2><p>显而易见不管是什么低代码平台都取代不了，开发的地位，这个就像是问先有鸡还是先有蛋一样。但低代码平台的确会取代一些简单，场景固定化的工作，但不能做到取代的地步，结合，人工智能发展起来后或许会有可能，取代大部分开发。</p><ul><li><p><strong>低代码的形式是“可视化编程”，核心是“复用”</strong></p></li><li><p><strong>成也复用，败也复用</strong></p></li><li><p><strong>低代码的未来是拥抱人工智能</strong></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单来说就像是以前的手工制作产品，到后来工厂流水线加工产品一样，常规开发和低代码开发的关系大概也是也是如此，钉钉曾经就在发布会表示：“低代码开发是云计算之后的下一场 IT 革命。”，我相信这并不是危言耸听之词，那前端这个行业会消失吗？答案肯定是不会的，那是以前的手工师傅消失了吗？并没有只不过叫做产品设计师，或者其他更深入技术含量更高的工作中了而已，假象一下，未来低代码平台完全取代普通系统开发，那这些低代码平台就不需要维护，更新了吗？自我更新？我想这个应该属于人工智能的范畴了，当然这其中也有跟不上时代变化的人，消失在这个 IT 革命之中，就像当年的 jquery 一样成为过去式，作为技术应该时刻保持学习的心态，换句话说就是为了以接更美好的明天，哈哈哈，</p><ul><li><p><strong>低代码平台不可能导致前端行业的消失，反而会促进前端生态的发展</strong></p></li><li><p><strong>始终保持学习的心态，才不会被行业的淘汰（卷王之王？）</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 低代码系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 低代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>✨每个前端都应该拥有自己的快速模板CLI工具</title>
      <link href="/a9af31f1db6e/"/>
      <url>/a9af31f1db6e/</url>
      
        <content type="html"><![CDATA[<h2 id="✨-每个前端都应该拥有自己的快速模板-CLI-工具"><a href="#✨-每个前端都应该拥有自己的快速模板-CLI-工具" class="headerlink" title="✨ 每个前端都应该拥有自己的快速模板 CLI 工具"></a>✨ 每个前端都应该拥有自己的快速模板 CLI 工具</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>作为工作一年的前端小码农，也写了不少项目，就想着是不是应该有个总结，正好最近在写脚手架工具，就给以前的项目，弄了一套快速生成模板的工具，再也不用担心，每次开新项目，环境配置半天，都还没有还是写代码。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ul><li><p>可以配置 eslint，husky 等项目配套设施</p></li><li><p>需要快速生成对应项目模板（如：谷歌插件，node-cli 等）</p></li><li><p>模板与 cli 分解，更新模板不需要更新 cli</p></li></ul><h3 id="万物之初"><a href="#万物之初" class="headerlink" title="万物之初"></a>万物之初</h3><p>首先我们介绍 kolorist、minimist、prompts 三个必不可少的开源库</p><ul><li><p><a href="https://github.com/marvinhagemeister/kolorist">kolorist</a> 改变控制台颜色,可以看着 chalk 的替代品</p><p><img src="/static/articles/kolorist.svg" alt="kolorist"></p></li><li><p><a href="https://github.com/substack/minimist">minimist</a> 极简的命令行解析工具</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> argv = <span class="built_in">require</span>(<span class="string">&#x27;minimist&#x27;</span>)(process.<span class="property">argv</span>.<span class="title function_">slice</span>(<span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(argv);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node example/parse.js -a beep -b boop</span></span><br><span class="line">&#123; _: [], a: &#x27;beep&#x27;, b: &#x27;boop&#x27; &#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz</span></span><br><span class="line">&#123; _: [ &#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27; ],</span><br><span class="line">x: 3,</span><br><span class="line">y: 4,</span><br><span class="line">n: 5,</span><br><span class="line">a: true,</span><br><span class="line">b: true,</span><br><span class="line">c: true,</span><br><span class="line">beep: &#x27;boop&#x27; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/terkelg/prompts">prompts</a> 轻量级、美观且用户友好的交互式提示</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prompts = <span class="built_in">require</span>(<span class="string">&#x27;prompts&#x27;</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">prompts</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;number&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;How old are you?&#x27;</span>,</span><br><span class="line">    <span class="attr">validate</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> (value &lt; <span class="number">18</span> ? <span class="string">`Nightclub is 18+ only`</span> : <span class="literal">true</span>),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response); <span class="comment">// =&gt; &#123; value: 24 &#125;</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><img src="/static/articles/prompts.gif" alt="prompts"></p><h3 id="撸起袖子开干"><a href="#撸起袖子开干" class="headerlink" title="撸起袖子开干"></a>撸起袖子开干</h3><blockquote><p>有了上面三个工具库，一个脚手架工具就变得特别简单了</p></blockquote><h4 id="首先分析一下一个-cli-脚手架。"><a href="#首先分析一下一个-cli-脚手架。" class="headerlink" title="首先分析一下一个 cli 脚手架。"></a>首先分析一下一个 cli 脚手架。</h4><ul><li><p>就是一段脚本文件，用 node 只需要在文件头部加入声明<code>#!/usr/bin/env node</code> 即可</p></li><li><p>然后再 package.json 用 bin 声明命令</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;bin&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><ul><li><p>现在我们重点来写我们的逻辑 index.js 文件</p><ul><li><p>远程更新方案，通过 git clone 克隆模板仓库，替换本地模板即可，一些配置文件也可以分离到模板库里</p></li><li><p>只要需工具 prompts 提问获取的用户配置根据配置渲染模板即可</p></li></ul></li></ul><h4 id="主要逻辑代码，其他关联函数可访问仓库查看"><a href="#主要逻辑代码，其他关联函数可访问仓库查看" class="headerlink" title="主要逻辑代码，其他关联函数可访问仓库查看"></a>主要逻辑代码，其他关联函数可访问仓库查看</h4><p><a href="https://github.com/alqmc/mangosteen">Mangosteen（山竹)</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; join, resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; existsSync, mkdirSync, writeFileSync &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> minimist <span class="keyword">from</span> <span class="string">&#x27;minimist&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bgGreen, bgYellow, green &#125; <span class="keyword">from</span> <span class="string">&#x27;kolorist&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getUserConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;./generator/question&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; emptyDir, formatTargetDir &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils/utils&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&#x27;./generator/render&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; run &#125; <span class="keyword">from</span> <span class="string">&#x27;./generator/shell&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> moPkg <span class="keyword">from</span> <span class="string">&#x27;./package.json&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; downloadRepo &#125; <span class="keyword">from</span> <span class="string">&#x27;./generator/update&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> cwd = process.<span class="title function_">cwd</span>();</span><br><span class="line"><span class="keyword">const</span> def = &#123;</span><br><span class="line">  <span class="attr">defaultTargetDir</span>: <span class="string">&#x27;mangosteen-project&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 人口函数，别人用刚才我们声明的bin时候就会走到这里</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">init</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 这里通过刚才说明minimist库解析命令行参数</span></span><br><span class="line">  <span class="keyword">const</span> argv = <span class="title function_">minimist</span>(process.<span class="property">argv</span>.<span class="title function_">slice</span>(<span class="number">2</span>), &#123;</span><br><span class="line">    <span class="attr">string</span>: [<span class="string">&#x27;_&#x27;</span>],</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="attr">version</span>: [<span class="string">&#x27;v&#x27;</span>],</span><br><span class="line">      <span class="attr">update</span>: [<span class="string">&#x27;up&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// update的时候，调用更新模板函数</span></span><br><span class="line">  <span class="keyword">if</span> (argv.<span class="property">_</span>[<span class="number">0</span>] === <span class="string">&#x27;update&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">downloadRepo</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// -v version 返回版本号</span></span><br><span class="line">  <span class="keyword">if</span> (argv.<span class="property">version</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`v<span class="subst">$&#123;moPkg.version&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取prompts的问题结果</span></span><br><span class="line">  <span class="keyword">const</span> config = <span class="keyword">await</span> <span class="title function_">getUserConfig</span>(&#123; <span class="attr">targetDir</span>: <span class="title function_">formatTargetDir</span>(argv.<span class="property">_</span>[<span class="number">0</span>]) &#125;);</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    targetDir,</span><br><span class="line">    overwrite,</span><br><span class="line">    projectName,</span><br><span class="line">    packageName = projectName ?? def.<span class="property">defaultTargetDir</span>,</span><br><span class="line">    description,</span><br><span class="line">    author,</span><br><span class="line">    eslint,</span><br><span class="line">    template,</span><br><span class="line">    commitlint,</span><br><span class="line">    stylelint,</span><br><span class="line">    readme,</span><br><span class="line">    packageManager = <span class="string">&#x27;pnpm&#x27;</span>,</span><br><span class="line">  &#125; = config;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> root = <span class="title function_">join</span>(cwd, targetDir ?? def.<span class="property">defaultTargetDir</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">existsSync</span>(root) &amp;&amp; overwrite) &#123;</span><br><span class="line">    <span class="title function_">emptyDir</span>(root);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="title function_">existsSync</span>(root)) &#123;</span><br><span class="line">    <span class="title function_">mkdirSync</span>(root);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pkg = &#123;</span><br><span class="line">    <span class="attr">name</span>: packageName,</span><br><span class="line">    <span class="attr">description</span>: description ?? <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">author</span>: author ?? <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">writeFileSync</span>(<span class="title function_">resolve</span>(root, <span class="string">&#x27;package.json&#x27;</span>), <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(pkg, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> templateRoot = <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;mo-templates/templates&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">existsSync</span>(templateRoot)) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">downloadRepo</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (template) &#123;</span><br><span class="line">    <span class="title function_">render</span>(root, templateRoot, <span class="string">`<span class="subst">$&#123;template&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (eslint) &#123;</span><br><span class="line">    <span class="title function_">render</span>(root, templateRoot, <span class="string">&#x27;eslint&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (stylelint) &#123;</span><br><span class="line">    <span class="title function_">render</span>(root, templateRoot, <span class="string">&#x27;stylelint&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (readme) &#123;</span><br><span class="line">    <span class="title function_">render</span>(root, templateRoot, <span class="string">&#x27;readme&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (commitlint) &#123;</span><br><span class="line">    <span class="title function_">render</span>(root, templateRoot, <span class="string">&#x27;commitlint&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;bgGreen(<span class="string">&#x27;mangosteen&#x27;</span>)&#125;</span>: 模板渲染成功`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;bgYellow(<span class="string">&#x27;mangosteen&#x27;</span>)&#125;</span>: git初始化...`</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">run</span>(<span class="string">&#x27;git init&#x27;</span>, root);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;bgGreen(<span class="string">&#x27;mangosteen&#x27;</span>)&#125;</span>: git初始化成功`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;bgYellow(<span class="string">&#x27;mangosteen&#x27;</span>)&#125;</span>: 依赖安装中...`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (packageManager === <span class="string">&#x27;yarn&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">run</span>(<span class="string">`<span class="subst">$&#123;packageManager&#125;</span>`</span>, root);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">run</span>(<span class="string">`<span class="subst">$&#123;packageManager&#125;</span> install`</span>, root);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;bgGreen(<span class="string">&#x27;mangosteen&#x27;</span>)&#125;</span>: 依赖安装成功`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\n\t<span class="subst">$&#123;green(<span class="string">`cd <span class="subst">$&#123;targetDir&#125;</span>`</span>)&#125;</span>`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\t<span class="subst">$&#123;green(<span class="string">`<span class="subst">$&#123;packageManager&#125;</span> run serve`</span>)&#125;</span>\n`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Mangosteen（山竹"><a href="#Mangosteen（山竹" class="headerlink" title="Mangosteen（山竹)"></a><a href="https://github.com/alqmc/mangosteen">Mangosteen（山竹)</a></h3><blockquote><p>本项目支持</p></blockquote><ul><li><p>谷歌插件项目快速模板</p></li><li><p>node-cli 项目快速模板</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、<a href="https://github.com/vuejs/create-vue">create-vue</a> vue 官方脚手架工具</p><p>2、<a href="https://github.com/vitejs/vite/tree/main/packages/create-vite">create-vite</a> vite 官方脚手架工具</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CLI </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vitepress+github page 快速搭建个人博客</title>
      <link href="/4453e405a94f/"/>
      <url>/4453e405a94f/</url>
      
        <content type="html"><![CDATA[<h2 id="vitepress-github-page-快速搭建个人博客"><a href="#vitepress-github-page-快速搭建个人博客" class="headerlink" title="vitepress+github page 快速搭建个人博客"></a>vitepress+github page 快速搭建个人博客</h2><h3 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h3><p>呃呃呃，初衷就是两个字没钱 😀，哈哈哈，最近学生时期买的腾讯云服务过期了，没钱不想续费了，还有腾讯云比起阿里云的确还是有些差距（这两种服务器都用过。不是云玩家，虽然是学生机，便宜货），所以准备白嫖 github pages。花了两天不到时间就搞定了，虽然有些粗糙了 😀</p><p>预览地址：<a href="alqmc.github.io">@阿乐去买菜</a></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="主页部分"><a href="#主页部分" class="headerlink" title="主页部分"></a>主页部分</h4><p><img src="/static/articles/blog.jpg" alt="阿乐去买菜"></p><h4 id="文章部分"><a href="#文章部分" class="headerlink" title="文章部分"></a>文章部分</h4><p><img src="/static/articles/blog2.jpg" alt="阿乐去买菜"></p><h4 id="项目部分"><a href="#项目部分" class="headerlink" title="项目部分"></a>项目部分</h4><p><img src="/static/articles/blog1.jpg" alt="阿乐去买菜"></p><h4 id="个人部分"><a href="#个人部分" class="headerlink" title="个人部分"></a>个人部分</h4><p><img src="/static/articles/blog3.jpg" alt="阿乐去买菜"></p><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><p>以前的老博客是 vue2+node 做的，感觉太麻烦了，这次就用了 vitepress 来做，也不需要后端了，不得不说体验咻咻的 😂</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- config 主要是一些配置信息</span><br><span class="line">- docs 打包产物</span><br><span class="line">- script 脚本工具，用来将 md 文件自动创建目录索引</span><br><span class="line">- src</span><br><span class="line">  - .vitepress vitepress 相关配置</span><br><span class="line">  - components 公共组件</span><br><span class="line">  - public 静态资源</span><br><span class="line">  - type 类型文件</span><br><span class="line">  - views md 文件</span><br><span class="line">  - index.md 首页</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>有兴趣的小伙伴可以自行克隆，做精细一点，也可以给个 star</p><ul><li><a href="https://github.com/alqmc/alqmc.github.io">github 地址</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vitepress </tag>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【gacm】傻瓜式git账号管理工具</title>
      <link href="/62d8977b4f3e/"/>
      <url>/62d8977b4f3e/</url>
      
        <content type="html"><![CDATA[<h2 id="【gacm】傻瓜式-git-账号管理工具"><a href="#【gacm】傻瓜式-git-账号管理工具" class="headerlink" title="【gacm】傻瓜式 git 账号管理工具"></a>【gacm】傻瓜式 git 账号管理工具</h2><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>最近多个项目老是需要切换 git 账号，git 命令都输入烦了，就想能不能像 nvm，或者 nrm 一样管理 git 账户，正好最近写了一个 node-cli 的模板，正好有用武之地，说干就干。</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05cf68ef26d34d28a3480043ac980f2c~tplv-k3u1fbpfcp-watermark.image" alt="动画.gif"></p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>just like nvm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">gacm ls</span><br><span class="line"></span><br><span class="line">gacm use xxx ---local</span><br><span class="line"></span><br><span class="line">gacm use xxx ---global</span><br><span class="line"></span><br><span class="line">gacm add --name xxx --email xxx</span><br><span class="line"></span><br><span class="line">gacm delate user</span><br></pre></td></tr></table></figure><h3 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h3><ul><li>切换 git 账户（包含当前项目，全局用户，系统用户）</li><li>增加用户</li><li>删除用户</li><li>查看用户列表</li></ul><h3 id="获取-cli-模板"><a href="#获取-cli-模板" class="headerlink" title="获取 cli 模板"></a>获取 cli 模板</h3><p>拉取一下我的模板工具<a href="https://github.com/alqmc/template-node-cli">template-node-cli</a></p><ul><li>内置了基于 typescript+rollup+gulp 的打包工具</li><li>给出了一些简单模板</li></ul><h3 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3><ul><li>通过 cli 执行 shell 命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --xxx user.name xxxx</span><br><span class="line">git config --xxx user.email xxxx</span><br></pre></td></tr></table></figure><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ul><li><a href="https://github.com/alqmc/gacm">github</a></li><li><a href="https://gitee.com/Y_onghu/gacm">gitee</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git账号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【前端必备】极简的 API 代理工具!</title>
      <link href="/520f50bc0ed8/"/>
      <url>/520f50bc0ed8/</url>
      
        <content type="html"><![CDATA[<h2 id="【前端必备】极简的-API-代理工具"><a href="#【前端必备】极简的-API-代理工具" class="headerlink" title="【前端必备】极简的 API 代理工具!"></a>【前端必备】极简的 API 代理工具!</h2><p>极简的 API 代理工具!</p><p>背景：不想写 mock，mock 语法老忘记！并不需要多真实的数据，只需要一个模板数据，简单更改，所以写了这个插件！前段时间看见有人分享了 Ajax Interceptor 的 chrome 插件，就想着自己也可以写一个试试，就做了这个插件</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>该插件未发布至谷歌商店，可以直接下载 version 文件夹里的最新版本，解压安装即可</li><li>也可自行 fork 源码 build</li></ul><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24d98c2f40754a2eabe6c54e78d8e689~tplv-k3u1fbpfcp-zoom-1.image" alt="juejin"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d77d1c14541b450ba0752aa1b72543e6~tplv-k3u1fbpfcp-zoom-1.image" alt="juejin"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/841b0421239740e6a982ffb8c53841c4~tplv-k3u1fbpfcp-zoom-1.image" alt="juejin"></p><h3 id="请求拦截"><a href="#请求拦截" class="headerlink" title="请求拦截"></a>请求拦截</h3><ul><li>拦截 fetch 请求</li><li>拦截 xmrhttprequest 请求</li><li>请求参数可配置</li><li>响应参数可配置</li><li>Json 可视化编辑</li><li>请求头暂时只支持追加</li><li>响应头不支持修改</li></ul><h3 id="后续计划"><a href="#后续计划" class="headerlink" title="后续计划"></a>后续计划</h3><ul><li>增加 mock 语法支持</li><li>优化参数，请求头，响应头配置</li></ul><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><ul><li>重写 fetch 和 XMLHttpRequest 对象</li></ul><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="https://gitee.com/Y_onghu/api_proxy_pro">gitee 地址</a></p><p><a href="https://github.com/HitStarrySky/api_proxy">githup 地址</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://github.com/YGYOOO/ajax-interceptor">Ajax Interceptor</a></li><li><a href="https://github.com/nuysoft/Mock">Mock</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业北漂前端菜鸟的2021年终总结</title>
      <link href="/454c8f444673/"/>
      <url>/454c8f444673/</url>
      
        <content type="html"><![CDATA[<h2 id="毕业北漂前端菜鸟的-2021-年终总结"><a href="#毕业北漂前端菜鸟的-2021-年终总结" class="headerlink" title="毕业北漂前端菜鸟的 2021 年终总结"></a>毕业北漂前端菜鸟的 2021 年终总结</h2><h3 id="2021-关键字：启程、远方"><a href="#2021-关键字：启程、远方" class="headerlink" title="2021 关键字：启程、远方"></a>2021 关键字：启程、远方</h3><p>2021 年已经过去了，回想年初还在学校写论文，如今已是一位职场菜鸟了，从毕业到现在也工作了大半年了，所以找个机会写一下年终总结。也算有一个全新的开始吧。</p><div class='article-cover'><p><img src="/static/articles/2021.webp" alt="毕业北漂前端菜鸟的2021年终总结"></p></div><h3 id="学业"><a href="#学业" class="headerlink" title="| 学业"></a>| 学业</h3><p>2021 年正式结束了我的大学生活，在论文答辩的时候，我都还在感叹时间过得好快，现在做年终总结的时候已经又去的大半年了，对于我的学业，有遗憾也有满足吧，我很想感谢我大学的两位老师，一位带我找到职业的方向，另一位，教会了我很多做人做事的道理。希望他们身体健康，吉祥如意吧。</p><p>我的大学，经历了翟天临事件 🙂，论文要求更加严格了，也经历了疫情 🦠，回想起封校的生活，如今也历历在目。</p><p>大学一去不复返，小菜鸟已经去远方。</p><h3 id="工作"><a href="#工作" class="headerlink" title="| 工作"></a>| 工作</h3><p>对于工作，算上我的实习经历，一共呆过三家公司吧。</p><ul><li><p>在我大二下的时候就因为一次偶然机会遇到了我上面感谢的那位老师，让我去他的公司实习，他们公司是做教育辅助类软件的，那时候才是一窍不通，老师也很耐心的指导我，我接触到了 vue，在哪里我找到了我未来的职业方向，也从哪里踏上了我的前端生涯，遗憾的是可能没有给老师带来什么收益，还留一下了一个胎死腹中的项目，不过好在还是成功参与并完成了几个其他项目。</p></li><li><p>第二家公司是我大四下的毕业实习，找了一家使用 angular 的公司，这个公司是做与高校合作实验设备管理，我在这里呆了三个月，这里的 leader 人也挺好的，常常一起玩游戏，没有领导架子，算是过的很愉快，工作上也并没有是因为 angular（入职前从来没有接触过），而完不成工作，每次需要都保质保量的完成了。现在也经常有联系，当然是游戏，哈哈哈。</p></li><li><p>第三家公司，也就是我现在的公司，我现在都还不知道是什么勇气，让我一毕业就选择去北京，成为北漂一族的一员，没错我的第三家公司在北京，我毕业就和女朋友一起来到北京了，我很感谢我的女朋友，他没有北京的 offer 还是和我一起来了，当时我们来北京，坐了 29 小时的火车 🚆（别问为什么坐火车问就是没钱），跌跌撞撞的到了北京，已经是半夜了，定了一个酒店就睡了，第二天，就去公司附近租房子。房子定下来后，还没有到入职时间，陪她去找工作面试。</p></li></ul><p>现在基本已经稳定了下来，我也转正了，在这里我感觉自己是进步的最快的时候，每天都过的很充实，周末和女朋友在家做饭，感觉也蛮好的。</p><h3 id="技术"><a href="#技术" class="headerlink" title="| 技术"></a>| 技术</h3><ul><li>关于技术，在工作中开始使用 Typescript Vue3，虽然不能说精通，但日常需求肯定是没有太大问题。</li><li>工作之余还写了两个谷歌插件，一个是开发账号管理，一个是<a href="https://github.com/HitStarrySky/test-monster">chorme 脚本自动化录制</a>与回放的,有兴趣的可以看看，写的一般。</li><li>也参与了公司基础组件库的虽然只是几个简单的组件，但也很开心了。</li><li>在掘金也产出了 30+的文章，写的不怎么样，但是也在努力，就算了一种记录吧</li><li>githup 好久没有更新了，还是毕业的时候写的一个<a href="https://github.com/HitStarrySky/simmind-mindMap">思维导图插件</a>,仅仅只有 5 个 star，哈哈哈，还是感谢在 5 个小伙伴。希望 2022 年能造出更好的东西，也多参与到开源项目中去。</li></ul><h3 id="生活"><a href="#生活" class="headerlink" title="| 生活"></a>| 生活</h3><ul><li>来北京后感觉也没有什么不习惯的，可能最不习惯的就是在外面的太冷了，手都不能拿出来 📱.</li><li>吃的也还可以，就是不怎么辣，很多吃的都是甜的，让家里邮寄的辣椒，哈哈 😊</li><li>如果一个人北漂肯定很无聊，还好我是两个人 🥰</li><li>租房子，确实遇到过坑，如果有小伙伴北漂，记得擦亮眼睛，多去问问，一套房子，可能很多中介在代理，而且价格不一样。</li></ul><p>总体来说还是比较满意现在的生活</p><h3 id="2022-flag"><a href="#2022-flag" class="headerlink" title="| 2022 flag"></a>| 2022 flag</h3><ul><li>和女朋友订婚。👩‍❤️‍👨</li><li>产出一个 50-100star 的开源项目。🤠</li><li>关注学习财经类知识。🏴‍☠️</li><li>工作能更进一步。💰</li></ul>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2021 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷歌插件思维导图整理</title>
      <link href="/c547e35bfe45/"/>
      <url>/c547e35bfe45/</url>
      
        <content type="html"><![CDATA[<h2 id="谷歌插件思维导图整理"><a href="#谷歌插件思维导图整理" class="headerlink" title="谷歌插件思维导图整理"></a>谷歌插件思维导图整理</h2><p><img src="/static/articles/2.png" alt="chrome扩展.png"></p>]]></content>
      
      
      <categories>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>粘贴板之二维码复制</title>
      <link href="/5c9399fc4886/"/>
      <url>/5c9399fc4886/</url>
      
        <content type="html"><![CDATA[<h2 id="粘贴板之二维码复制"><a href="#粘贴板之二维码复制" class="headerlink" title="粘贴板之二维码复制"></a>粘贴板之二维码复制</h2><p><img src="/static/articles/4.webp" alt="粘贴板之二维码复制"></p><h3 id="说一点废话"><a href="#说一点废话" class="headerlink" title="说一点废话"></a>说一点废话</h3><p>复制网页上的二维码，并分享到的聊天工具中,是特别常见的功能。在网上找了很多资料，大部分都是坑。</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><ul><li>使用 navigator.permissions api 查询浏览器是否支持粘贴板操作</li><li>使用 fetch 请求二维码 文件流</li><li>将文件流转化为 blob</li><li>使用 navigator.clipboard.write 将文件 blob 写入粘贴板</li></ul><h3 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a>未解决的问题</h3><ul><li>粘贴板在不安全的环境中会有限制，可能导致复制失败。建议在 https 环境中使用</li><li>老旧项目慎重 CV，具有一定的兼容性问题</li></ul><h3 id="查询浏览器是否支持访问粘贴板权限"><a href="#查询浏览器是否支持访问粘贴板权限" class="headerlink" title="查询浏览器是否支持访问粘贴板权限"></a>查询浏览器是否支持访问粘贴板权限</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getAuthClipboard</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">    navigator.<span class="property">permissions</span>.<span class="title function_">query</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;clipboard-write&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>( <span class="keyword">async</span> permissionStatus =&gt; &#123;</span><br><span class="line">      <span class="comment">// permissionStatus.state 的值是 &#x27;granted&#x27;、&#x27;denied&#x27;、&#x27;prompt&#x27;:</span></span><br><span class="line">      <span class="keyword">if</span> (permissionStatus.<span class="property">state</span> === <span class="string">&#x27;granted&#x27;</span>) &#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="title function_">copyQRcode</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">error</span>(<span class="string">&#x27;没有获得粘贴板读取权限&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (navigator.<span class="property">permissions</span>.<span class="property">request</span>) &#123;</span><br><span class="line">        <span class="comment">// 尝试请求获取，navigator.permissions.request API有些浏览器不支持</span></span><br><span class="line">          navigator.<span class="property">permissions</span>.<span class="title function_">request</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;clipboard-write&#x27;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="复制二维码"><a href="#复制二维码" class="headerlink" title="复制二维码"></a>复制二维码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">copyQRcode</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> request = &#123;</span><br><span class="line">     <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">     <span class="attr">headers</span>: &#123;</span><br><span class="line">       <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/octet-stream;charset=UTF-8&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;Authorization&#x27;</span>: <span class="title class_">StorageUtil</span>.<span class="title function_">getLocalStorage</span>(<span class="string">&#x27;token&#x27;</span>), <span class="comment">//携带自己的token</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="variable language_">this</span>.<span class="property">QRcode</span>, request);</span><br><span class="line">   <span class="keyword">const</span> blob = <span class="keyword">await</span> data.<span class="title function_">blob</span>();</span><br><span class="line">   <span class="keyword">await</span> navigator.<span class="property">clipboard</span>.<span class="title function_">write</span>([</span><br><span class="line">     <span class="keyword">new</span> <span class="title class_">ClipboardItem</span>(&#123;</span><br><span class="line">       [blob.<span class="property">type</span>]: blob</span><br><span class="line">     &#125;)</span><br><span class="line">   ]).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">error</span>(<span class="string">&#x27;复制失败&#x27;</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">success</span>(<span class="string">&#x27;复制成功&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【拿来吧你】装饰器</title>
      <link href="/631a6430ba1f/"/>
      <url>/631a6430ba1f/</url>
      
        <content type="html"><![CDATA[<h2 id="【拿来吧你】装饰器"><a href="#【拿来吧你】装饰器" class="headerlink" title="【拿来吧你】装饰器"></a>【拿来吧你】装饰器</h2><p>许多面向对象的语言都有修饰器（Decorator）函数，用来修改，或者注释类的行为。js 也不例外。</p><h3 id="装饰器能做什么"><a href="#装饰器能做什么" class="headerlink" title="装饰器能做什么"></a>装饰器能做什么</h3><ul><li>传入参数的类型判断</li><li>返回值的排序、过滤</li><li>对函数添加节流、防抖或其他的功能性代码</li><li>基于多个类的继承，各种各样的与函数逻辑本身无关的、重复性的代码</li><li>等等。。。</li></ul><h3 id="装饰器基本语法"><a href="#装饰器基本语法" class="headerlink" title="装饰器基本语法"></a>装饰器基本语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@decorator</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;&#125;</span><br><span class="line">A = <span class="title function_">decorator</span>(<span class="title class_">MyClass</span>) || <span class="title class_">MyClass</span>;</span><br></pre></td></tr></table></figure><p>从上面就可以看出，修饰器是一个对类进行处理的函数。修饰器函数的第一个参数，就是所要修饰的目标类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">decorator</span>(<span class="params">target</span>) &#123;</span><br><span class="line">     这里可以对类添加一些属性，或者方法，其他一些对类的操作。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="装饰器的执行顺序"><a href="#装饰器的执行顺序" class="headerlink" title="装饰器的执行顺序"></a>装饰器的执行顺序</h3><p>同一处的多个装饰器是按照洋葱模型，由外到内进入，再由内到外执行（和 Koa 的洋葱模型一致）</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91778da674e2476bbba8a25f4eb82dac~tplv-k3u1fbpfcp-watermark.image" alt="src=http___image1.bubuko.com_info_202005_20200508002820794838.png&amp;refer=http___image1.bubuko.jpg"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dec</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;evaluated&#x27;</span>, id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">  @<span class="title function_">dec</span>(<span class="number">1</span>)</span><br><span class="line">  @<span class="title function_">dec</span>(<span class="number">2</span>)</span><br><span class="line">  <span class="title function_">method</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// evaluated 1</span></span><br><span class="line"><span class="comment">// evaluated 2</span></span><br></pre></td></tr></table></figure><h3 id="修饰类的方法（实现一个对属性的-readonly-装饰器）"><a href="#修饰类的方法（实现一个对属性的-readonly-装饰器）" class="headerlink" title="修饰类的方法（实现一个对属性的 readonly 装饰器）"></a>修饰类的方法（实现一个对属性的 readonly 装饰器）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  @readonly</span><br><span class="line">  <span class="title function_">name</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;我是xxx&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readonly</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="comment">// target对象原来的值如下</span></span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//   value: specifiedFunction,</span></span><br><span class="line">  <span class="comment">//   enumerable: false,</span></span><br><span class="line">  <span class="comment">//   configurable: true,</span></span><br><span class="line">  <span class="comment">//   writable: true</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line">  target.<span class="property">writable</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>装饰器在 js 中仅仅可以修饰类和属性，不能修饰独立的函数，函数存在变量提升。</li><li>装饰器对类的行为的改变，是代表编译时发生的，而不是在运行时。</li><li>装饰器能在编译阶段运行代码。</li><li>装饰器的顺序十分重要。</li><li>合理利用装饰器可以极大的提高开发效率，对一些非逻辑相关的代码进行封装提炼能够帮助我们快速完成重复性的工作，节省时间。</li><li>大量的装饰器可能会导致不可读性增强，谨慎食用。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1、<a href="https://juejin.cn/post/6844903506562777101">JS 装饰器（Decorator）场景实战</a></p><p>2、<a href="https://es6.ruanyifeng.com/#docs/decorator">ECMAScript 6 入门—阮一峰</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插件一键去水印，岂不妙哉！</title>
      <link href="/134a648e29b9/"/>
      <url>/134a648e29b9/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="插件一键去水印，岂不妙哉！"><a href="#插件一键去水印，岂不妙哉！" class="headerlink" title="插件一键去水印，岂不妙哉！"></a>插件一键去水印，岂不妙哉！</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>前端做一些个人项目，没有 UI 实在太难搞了，PS 又需要学习成本，就想着用一些设计网站做一些图，做好之后发现要 Vip，想着个人项目不商用，截个图，做一下效果，做着做着就想是不是做一个插件自动去一下水印岂不是更好。</p><h3 id="说干就干"><a href="#说干就干" class="headerlink" title="说干就干"></a>说干就干</h3><ul><li>粗略的学习了一下谷歌插件<ul><li><a href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html">【干货】Chrome 插件(扩展)开发全攻略</a></li></ul></li><li>分析一下某站的水印位置（明水印，听大佬说有暗水印，暂不考虑）<ul><li>手动分析（F12 直接看，哈哈）</li></ul></li><li>发现水印处于 image-watermark 该类名的背景图片位置</li><li>还有一些可能是一个单独的元素。</li><li>接下来就是找到该元素删除即可（手动删除也可以，以前就是这样干的）</li></ul><h3 id="谷歌插件"><a href="#谷歌插件" class="headerlink" title="谷歌插件"></a>谷歌插件</h3><ul><li>编写一些简单的操作界面（popup.html）</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77a94128224a4f8abebfb3916545ae2e~tplv-k3u1fbpfcp-watermark.image" alt="c419bbd0143a4b2a8e21d0114676b2bd_tplv-k3u1fbpfcp-watermark.png"></p><ul><li><p>采用 html2canvas 来下载图</p><ul><li>将 dom 转成图片</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">downloadPng</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span>(!shareContent) <span class="keyword">return</span></span><br><span class="line"><span class="keyword">let</span> rect = shareContent.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line"><span class="keyword">let</span> opts = &#123;</span><br><span class="line">    <span class="attr">x</span>: rect.<span class="property">left</span>,</span><br><span class="line">    <span class="attr">y</span>: rect.<span class="property">top</span>,</span><br><span class="line">    <span class="attr">scale</span>: <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>*<span class="number">2</span>,</span><br><span class="line">    <span class="attr">useCORS</span>: <span class="literal">true</span> ,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">html2canvas</span>(shareContent, opts).<span class="title function_">then</span>(<span class="function"><span class="params">canvas</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    img.<span class="property">src</span> = canvas.<span class="title function_">toDataURL</span>();</span><br><span class="line">    <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    a.<span class="property">download</span> = <span class="string">&#x27;无水印图&#x27;</span></span><br><span class="line">    a.<span class="property">href</span> = img.<span class="property">src</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a);</span><br><span class="line">    a.<span class="title function_">click</span>();</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(a);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>html2canvas 的坑实在有点多，图片跨域问题设置 useCORS: true</p></li><li><p>部分样式问题，暂无法解决</p></li><li><p>就简单的 popup.js 与 content.j 简单的通信一些就可以完成</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendMessageToContentScript</span>(<span class="params">message, callback</span>) &#123;</span><br><span class="line">  chrome.<span class="property">tabs</span>.<span class="title function_">query</span>(&#123; <span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">currentWindow</span>: <span class="literal">true</span> &#125;, <span class="keyword">function</span> (<span class="params">tabs</span>) &#123;</span><br><span class="line">    chrome.<span class="property">tabs</span>.<span class="title function_">sendMessage</span>(tabs[<span class="number">0</span>].<span class="property">id</span>, message, <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (callback) <span class="title function_">callback</span>(response);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onMessage</span>.<span class="title function_">addListener</span>(<span class="function">(<span class="params">request, sender, sendResponse</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.<span class="property">remove</span>) &#123;</span><br><span class="line">    <span class="title function_">removeFigureMonster</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (request.<span class="property">download</span>) &#123;</span><br><span class="line">    <span class="title function_">downloadPng</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>manifest.json 文件是插件核心文件</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;manifest_version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;去水印！&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;去除主流作图网站的明水印，并下载！&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;16&quot;</span><span class="punctuation">:</span> <span class="string">&quot;libs/icon/logo1.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;48&quot;</span><span class="punctuation">:</span> <span class="string">&quot;libs/icon/logo1.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;128&quot;</span><span class="punctuation">:</span> <span class="string">&quot;libs/icon/logo1.png&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;page&quot;</span><span class="punctuation">:</span> <span class="string">&quot;libs/html/background.html&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;browser_action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default_icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;libs/icon/logo1.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;default_title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;去除主流作图网站的明水印，并下载！&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;default_popup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;libs/html/popup.html&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content_scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;matches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;all_urls&gt;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;js&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/libs/plugin/htmltocanvas.js&quot;</span><span class="punctuation">,</span> <span class="string">&quot;libs/js/content.js&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;run_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;document_start&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;contextMenus&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="自此一个谷歌插件就简单的完成"><a href="#自此一个谷歌插件就简单的完成" class="headerlink" title="自此一个谷歌插件就简单的完成"></a>自此一个谷歌插件就简单的完成</h3><ul><li>可以一键去水印然后下载</li><li>应该其他设计网站大同小异</li></ul><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><ul><li><a href="https://github.com/aqlmc/remove-watermask">源代码,随手写的不用 star，自取</a></li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>以上仅仅为技术交流~ 大家不要在实际的场景盲目使用，使用正规的途径。商用还需购买版权，支持原创！</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>1、<a href="https://juejin.cn/post/6900713052270755847">从破解某设计网站谈前端水印(详细教程)</a></p><p>2、<a href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html">【干货】Chrome 插件(扩展)开发全攻略</a></p>]]></content>
      
      
      <categories>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 Hook 到底是啥黑魔法？</title>
      <link href="/d8651ee84835/"/>
      <url>/d8651ee84835/</url>
      
        <content type="html"><![CDATA[<p>早就听说，<code>React</code>社区，已经全面拥抱<code>Hook</code>。<code>Vue3</code>的发布也支持了自定义<code>Hook</code>，作为只会<code>Vue</code>的前端小码农自然要去看看<code>Vue3 Hook</code>到底是啥黑魔法？</p><p>个人博客网站欢迎交流：<a href="https://blog.xkongkeji.com/">萤火之森：https://blog.xkongkeji.com</a></p><h3 id="从不了解React-Hook的角度来看一下啥是Hook？"><a href="#从不了解React-Hook的角度来看一下啥是Hook？" class="headerlink" title="从不了解React Hook的角度来看一下啥是Hook？"></a>从不了解React Hook的角度来看一下啥是Hook？</h3><ul><li>Vue 官方给出的自定义 <code>Hook</code> 的例子是这样的：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useMousePosition</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> y = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    x.<span class="property">value</span> = e.<span class="property">pageX</span>;</span><br><span class="line">    y.<span class="property">value</span> = e.<span class="property">pageY</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, update);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, update);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; x, y &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件中使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useMousePosition &#125; <span class="keyword">from</span> <span class="string">&quot;./mouse&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; x, y &#125; = <span class="title function_">useMousePosition</span>();</span><br><span class="line">    <span class="keyword">return</span> &#123; x, y &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相信写<code>vue2</code>的小伙伴应该都有被<code>Mixin</code>支配过，特别是拿到应该不熟悉的项目的时候，简直是噩梦，各种<code>Mixin</code>，各种变量，方法，完全看不出从哪来的。</p><p>从代码中使用中可以清晰的找到鼠标位置<code>X</code>,<code>Y</code>来自于<code>useMousePosition</code>函数，<code>useMousePosition</code>就是一个函数，使用了<code>composition-api</code>定义了响应式数据<code>X</code>，<code>Y</code>然后导出，个人感觉是将<code>mixin</code>拆分了，将导入的操作交给了开发者，以前是vue直接帮我们把数据合并在了一起，反而导致了数据无从溯源的问题。</p><h4 id="个人理解，欢迎纠正"><a href="#个人理解，欢迎纠正" class="headerlink" title="个人理解，欢迎纠正"></a>个人理解，欢迎纠正</h4><ul><li><code>hook</code>可以当作以前<code>mixin</code>的来用</li><li><code>hook</code>是一个函数，<code>mixin</code>是一个对象</li><li><code>hook</code>就是拆分版的<code>mixin</code>，将导入操作交给开发者，<code>mixin</code>是根据对应的<code>options Api</code>直接merge到组件了</li><li><code>hook</code>可以借用<code>composition-api</code>完全使用<code>vue</code>的能力，简而言之就是你在<code>setup</code>函数用能用的<code>hook</code>都能用.</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1、[精读《Vue3.0 Function API》] <a href="https://juejin.cn/post/6844903877574295560">https://juejin.cn/post/6844903877574295560</a></p><p>2、[Vue3 究竟好在哪里？（和 React Hook 的详细对比）])]<a href="https://segmentfault.com/a/1190000022616689">https://segmentfault.com/a/1190000022616689</a></p>]]></content>
      
      
      <categories>
          
          <category> Vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> Hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鼠标拖拽建立选区，选中元素</title>
      <link href="/60c2005e51b6/"/>
      <url>/60c2005e51b6/</url>
      
        <content type="html"><![CDATA[<p>近段时间做一个编辑器，就需要一个鼠标拖拽选区的功能，方便批量选中元素，进行相应操作，所有就有了这篇文章。</p><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24bade2b81104b6e8b2e874445214281~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af27fb546f2941ea8ebe7e12f656818b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="建立选区组件"><a href="#建立选区组件" class="headerlink" title="建立选区组件"></a>建立选区组件</h3><p>1、要想选中元素，肯定要先建立选区</p><ul><li>根据两个坐标点确定选区位置，并绘制出选区</li><li>根据两个坐标删除选区的宽与高</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> size = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> width =</span><br><span class="line">    props.<span class="property">endPoint</span>.<span class="property">x</span> === <span class="number">0</span></span><br><span class="line">      ? <span class="number">0</span></span><br><span class="line">      : <span class="title class_">Math</span>.<span class="title function_">abs</span>(props.<span class="property">startPoint</span>.<span class="property">x</span> - props.<span class="property">endPoint</span>.<span class="property">x</span>);</span><br><span class="line">  <span class="keyword">const</span> height =</span><br><span class="line">    props.<span class="property">endPoint</span>.<span class="property">y</span> === <span class="number">0</span></span><br><span class="line">      ? <span class="number">0</span></span><br><span class="line">      : <span class="title class_">Math</span>.<span class="title function_">abs</span>(props.<span class="property">startPoint</span>.<span class="property">y</span> - props.<span class="property">endPoint</span>.<span class="property">y</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    width,</span><br><span class="line">    height,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>确定起始坐标点<ul><li>不管从何处点击都需要找到两个坐标点所绘制的矩形的左上角的坐标点。</li><li>左上角的坐标点，很明显是所有坐标的最小值，也就是 X,Y 取最小的值的点（如下）</li><li>还需要考虑终点还没有产生时的情况，也就是排除终点为初始值也就是 0 的情况</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Point</span> = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> x =</span><br><span class="line">    props.<span class="property">endPoint</span>.<span class="property">x</span> === <span class="number">0</span></span><br><span class="line">      ? props.<span class="property">startPoint</span>.<span class="property">x</span></span><br><span class="line">      : <span class="title class_">Math</span>.<span class="title function_">min</span>(props.<span class="property">startPoint</span>.<span class="property">x</span>, props.<span class="property">endPoint</span>.<span class="property">x</span>);</span><br><span class="line">  <span class="keyword">const</span> y =</span><br><span class="line">    props.<span class="property">endPoint</span>.<span class="property">y</span> === <span class="number">0</span></span><br><span class="line">      ? props.<span class="property">startPoint</span>.<span class="property">y</span></span><br><span class="line">      : <span class="title class_">Math</span>.<span class="title function_">min</span>(props.<span class="property">startPoint</span>.<span class="property">y</span>, props.<span class="property">endPoint</span>.<span class="property">y</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    x,</span><br><span class="line">    y,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>这样就可绘制出一个选区</li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23bbd40e8ac84f689ca434e0df18fac9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>2、根据选区，筛选出选中的元素</p><ul><li>筛选选区的元素主要是根据 nodeType 选中出编辑区所有可选择的元素节点。</li><li>怎么才算可选元素，这就得看自己需要，我在元素节点上标注了 canChecked，通过这个属性排除非可选元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取该元素下可以被选中的元素集合</span></span><br><span class="line"><span class="comment"> * @param parentElement 父元素</span></span><br><span class="line"><span class="comment"> * @param keyCode 可选元素标识</span></span><br><span class="line"><span class="comment"> * @returns</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getChildrens</span>(<span class="params">parentElement: HTMLElement, keyCode: string</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ary = [];</span><br><span class="line">  <span class="keyword">const</span> childs = parentElement.<span class="property">childNodes</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; childs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (childs[i].<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((childs[i] <span class="keyword">as</span> <span class="title class_">HTMLElement</span>).<span class="title function_">getAttribute</span>(keyCode) !== <span class="literal">null</span>) &#123;</span><br><span class="line">        ary.<span class="title function_">push</span>(childs[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ary <span class="keyword">as</span> <span class="title class_">Array</span>&lt;<span class="title class_">HTMLElement</span>&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、判断节点是否在选区内</p><ul><li>这个主要根据 getBoundingClientRect 方法返回的信息</li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62e7e3fc2e13479f980cebf410316f9e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li>当选区的 top 与 left 小于判断元素，bottom 与大于判断元素，即认为该元素在选区内。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断元素是否在选区内</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> selectBoxElement 选区元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> canCheckedElements  可选中元素列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">judgeContainElement</span>(<span class="params"></span></span><br><span class="line"><span class="params">  selectBoxElement: HTMLElement,</span></span><br><span class="line"><span class="params">  canCheckedElements: <span class="built_in">Array</span>&lt;HTMLElement&gt;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">ContainElement</span>: <span class="title class_">Array</span>&lt;<span class="title class_">HTMLElement</span>&gt; = [];</span><br><span class="line">  <span class="keyword">const</span> &#123; left, right, bottom, top &#125; = selectBoxElement.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">  canCheckedElements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> child = item.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      child.<span class="property">left</span> &gt; left &amp;&amp;</span><br><span class="line">      child.<span class="property">top</span> &gt; top &amp;&amp;</span><br><span class="line">      child.<span class="property">bottom</span> &lt; bottom &amp;&amp;</span><br><span class="line">      child.<span class="property">right</span> &lt; right</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="title class_">ContainElement</span>.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">ContainElement</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、至此我们已经可以获得到选区内选中元素了，然后就可对选中元素做需要的操作了，也就是如效果图所示&#x2F;</p><h3 id="完整代码附上"><a href="#完整代码附上" class="headerlink" title="完整代码附上"></a>完整代码附上</h3><p>1、组件基础结构文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    id=&quot;select-area&quot;</span><br><span class="line">    class=&quot;select-area&quot;</span><br><span class="line">    :style=&quot;[</span><br><span class="line">      &#123; width: size.width + &#x27;px&#x27; &#125;,</span><br><span class="line">      &#123; height: size.height + &#x27;px&#x27; &#125;,</span><br><span class="line">      &#123; top: Point.y + &#x27;px&#x27; &#125;,</span><br><span class="line">      &#123; left: Point.x + &#x27;px&#x27; &#125;,</span><br><span class="line">    ]&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; computed, defineComponent &#125; from &#x27;vue&#x27;;</span><br><span class="line">import type &#123; PropType &#125; from &#x27;vue&#x27;;</span><br><span class="line">interface Point &#123;</span><br><span class="line">  x: number;</span><br><span class="line">  y: number;</span><br><span class="line">&#125;</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &#x27;SelectArea&#x27;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    startPoint: &#123;</span><br><span class="line">      type: Object as PropType&lt;Point&gt;,</span><br><span class="line">      required: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    endPoint: &#123;</span><br><span class="line">      type: Object as PropType&lt;Point&gt;,</span><br><span class="line">      required: true,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    const Point = computed(() =&gt; &#123;</span><br><span class="line">      const x =</span><br><span class="line">        props.endPoint.x === 0</span><br><span class="line">          ? props.startPoint.x</span><br><span class="line">          : Math.min(props.startPoint.x, props.endPoint.x);</span><br><span class="line">      const y =</span><br><span class="line">        props.endPoint.y === 0</span><br><span class="line">          ? props.startPoint.y</span><br><span class="line">          : Math.min(props.startPoint.y, props.endPoint.y);</span><br><span class="line">      return &#123;</span><br><span class="line">        x,</span><br><span class="line">        y,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    const size = computed(() =&gt; &#123;</span><br><span class="line">      const width =</span><br><span class="line">        props.endPoint.x === 0</span><br><span class="line">          ? 0</span><br><span class="line">          : Math.abs(props.startPoint.x - props.endPoint.x);</span><br><span class="line">      const height =</span><br><span class="line">        props.endPoint.y === 0</span><br><span class="line">          ? 0</span><br><span class="line">          : Math.abs(props.startPoint.y - props.endPoint.y);</span><br><span class="line">      return &#123;</span><br><span class="line">        width,</span><br><span class="line">        height,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    return &#123;</span><br><span class="line">      Point,</span><br><span class="line">      size,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.select-area &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  background-color: rgba(255, 192, 203, 0.1);</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">  z-index: 9;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>2、导出组件文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createVNode, render &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SelectAreaConstructor</span> <span class="keyword">from</span> <span class="string">&#x27;./SelectArea.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">instence</span>: <span class="title class_">HTMLElement</span> | <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> instenceIsExit = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">SelectArea</span> = <span class="keyword">function</span>(<span class="params">options: any</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (instenceIsExit) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(instence <span class="keyword">as</span> <span class="title class_">HTMLElement</span>);</span><br><span class="line">    instenceIsExit = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="title function_">createVNode</span>(<span class="title class_">SelectAreaConstructor</span>, options);</span><br><span class="line">  <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  <span class="title function_">render</span>(vm, container);</span><br><span class="line">  instence = container.<span class="property">firstElementChild</span> <span class="keyword">as</span> <span class="title class_">HTMLElement</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(instence);</span><br><span class="line">  instenceIsExit = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> instence;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">close</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (instenceIsExit) &#123;</span><br><span class="line">    <span class="comment">// eslint-disable-next-line @typescript-eslint/no-unused-vars</span></span><br><span class="line">    instenceIsExit = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(instence <span class="keyword">as</span> <span class="title class_">HTMLElement</span>);</span><br><span class="line">    instence = <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">SelectArea</span>, close &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、应用文件 setup 部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> selectProps = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">     <span class="attr">startPoint</span>: &#123;</span><br><span class="line">       <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">       <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">endPoint</span>: &#123;</span><br><span class="line">       <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">       <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">let</span> mouseKey = <span class="title function_">ref</span>(<span class="literal">false</span>); <span class="comment">// 是否监听鼠标移动（移出编辑区范围，不再监听鼠标移动事件）</span></span><br><span class="line">   <span class="keyword">let</span> mouseComplete = <span class="title function_">ref</span>(<span class="literal">false</span>); <span class="comment">// 鼠标移动事件是否完成（鼠标按下到抬起的流程）</span></span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">headleMouseDown</span> = (<span class="params">e: MouseEvent</span>) =&gt; &#123;</span><br><span class="line">     <span class="title function_">close</span>();</span><br><span class="line">     selectProps.<span class="property">startPoint</span>.<span class="property">x</span> = e.<span class="property">clientX</span>;</span><br><span class="line">     selectProps.<span class="property">startPoint</span>.<span class="property">y</span> = e.<span class="property">clientY</span>;</span><br><span class="line">     <span class="title class_">SelectArea</span>(selectProps);</span><br><span class="line">     mouseKey.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">     mouseComplete.<span class="property">value</span> = <span class="literal">false</span>;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">headleMouseMove</span> = (<span class="params">e: MouseEvent</span>) =&gt; &#123;</span><br><span class="line">     <span class="keyword">if</span> (mouseKey.<span class="property">value</span> &amp;&amp; !mouseComplete.<span class="property">value</span>) &#123;</span><br><span class="line">       selectProps.<span class="property">endPoint</span>.<span class="property">x</span> = e.<span class="property">clientX</span>;</span><br><span class="line">       selectProps.<span class="property">endPoint</span>.<span class="property">y</span> = e.<span class="property">clientY</span>;</span><br><span class="line">       <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#select-area&#x27;</span>);</span><br><span class="line">       <span class="keyword">const</span> parent = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.edit-area&#x27;</span>);</span><br><span class="line">       <span class="keyword">const</span> containDiv = <span class="title function_">selectElement</span>(</span><br><span class="line">         parent <span class="keyword">as</span> <span class="title class_">HTMLElement</span>,</span><br><span class="line">         div <span class="keyword">as</span> <span class="title class_">HTMLElement</span>,</span><br><span class="line">         <span class="string">&#x27;canChecked&#x27;</span></span><br><span class="line">       );</span><br><span class="line">       containDiv.<span class="property">canCheckedElements</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">         item.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">       &#125;);</span><br><span class="line">       containDiv.<span class="property">containElements</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">         item.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&#x27;1px solid red&#x27;</span>;</span><br><span class="line">         item.<span class="property">style</span>.<span class="property">cursor</span> = <span class="string">&#x27;move&#x27;</span>;</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">headleDrag</span> = (<span class="params">e: MouseEvent</span>) =&gt; &#123;</span><br><span class="line">     <span class="comment">// 防止与拖动事件冲突</span></span><br><span class="line">     e.<span class="title function_">preventDefault</span>();</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">headleMouseUp</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">     mouseKey.<span class="property">value</span> = <span class="literal">false</span>;</span><br><span class="line">     mouseComplete.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">     selectProps.<span class="property">startPoint</span>.<span class="property">x</span> = <span class="number">0</span>;</span><br><span class="line">     selectProps.<span class="property">startPoint</span>.<span class="property">y</span> = <span class="number">0</span>;</span><br><span class="line">     selectProps.<span class="property">endPoint</span>.<span class="property">x</span> = <span class="number">0</span>;</span><br><span class="line">     selectProps.<span class="property">endPoint</span>.<span class="property">y</span> = <span class="number">0</span>;</span><br><span class="line">     <span class="title function_">close</span>();</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, headleMouseDown);</span><br><span class="line">   <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, headleMouseMove);</span><br><span class="line">   <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, headleMouseUp);</span><br><span class="line">   <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, headleMouseDown);</span><br><span class="line">     <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, headleMouseMove);</span><br><span class="line">     <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, headleMouseUp);</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">saveWeekly</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     headleMouseDown,</span><br><span class="line">     headleMouseMove,</span><br><span class="line">     headleMouseUp,</span><br><span class="line">     headleDrag,</span><br><span class="line">     saveWeekly,</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>4、辅助工具函数文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取该元素下可以被选中的元素集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parentElement 父元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> selectBoxElement 选择框元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyCode 可选元素标识</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">selectElement</span>(<span class="params"></span></span><br><span class="line"><span class="params">  parentElement: HTMLElement,</span></span><br><span class="line"><span class="params">  selectBoxElement: HTMLElement,</span></span><br><span class="line"><span class="params">  keyCode: string</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> canCheckedElements = <span class="title function_">getChildrens</span>(parentElement, keyCode);</span><br><span class="line">  <span class="keyword">const</span> containElements = <span class="title function_">judgeContainElement</span>(</span><br><span class="line">    selectBoxElement,</span><br><span class="line">    canCheckedElements</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    containElements,</span><br><span class="line">    canCheckedElements,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; selectElement &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 获取该元素下可以被选中的元素集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parentElement 父元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyCode 可选元素标识</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getChildrens</span>(<span class="params">parentElement: HTMLElement, keyCode: string</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ary = [];</span><br><span class="line">  <span class="keyword">const</span> childs = parentElement.<span class="property">childNodes</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; childs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (childs[i].<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((childs[i] <span class="keyword">as</span> <span class="title class_">HTMLElement</span>).<span class="title function_">getAttribute</span>(keyCode) !== <span class="literal">null</span>) &#123;</span><br><span class="line">        ary.<span class="title function_">push</span>(childs[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ary <span class="keyword">as</span> <span class="title class_">Array</span>&lt;<span class="title class_">HTMLElement</span>&gt;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">judgeContainElement</span>(<span class="params"></span></span><br><span class="line"><span class="params">  selectBoxElement: HTMLElement,</span></span><br><span class="line"><span class="params">  canCheckedElements: <span class="built_in">Array</span>&lt;HTMLElement&gt;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">ContainElement</span>: <span class="title class_">Array</span>&lt;<span class="title class_">HTMLElement</span>&gt; = [];</span><br><span class="line">  <span class="keyword">const</span> &#123; left, right, bottom, top &#125; = selectBoxElement.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">  canCheckedElements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> child = item.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      child.<span class="property">left</span> &gt; left &amp;&amp;</span><br><span class="line">      child.<span class="property">top</span> &gt; top &amp;&amp;</span><br><span class="line">      child.<span class="property">bottom</span> &lt; bottom &amp;&amp;</span><br><span class="line">      child.<span class="property">right</span> &lt; right</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="title class_">ContainElement</span>.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">ContainElement</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你还不知道怎么取消重复请求？</title>
      <link href="/b0ea68c9da8b/"/>
      <url>/b0ea68c9da8b/</url>
      
        <content type="html"><![CDATA[<h2 id="你还不知道怎么取消重复请求？"><a href="#你还不知道怎么取消重复请求？" class="headerlink" title="你还不知道怎么取消重复请求？"></a>你还不知道怎么取消重复请求？</h2><p><img src="/static/articles/1.webp" alt="你还不知道怎么取消重复请求？"></p><h3 id="什么是重复请求？"><a href="#什么是重复请求？" class="headerlink" title="什么是重复请求？"></a>什么是重复请求？</h3><p>在 web 开发过程中，我们经常遇见需要取消重复请求的需求，网络不好时，用户可能重复点击某个按钮就触发了多次相同请求。可能会造成数据错乱的问题。</p><h3 id="如何取消重复请求？"><a href="#如何取消重复请求？" class="headerlink" title="如何取消重复请求？"></a>如何取消重复请求？</h3><ul><li>axios 中提供了 cancelToken 的属性来取消请求。</li><li>原理就是利用了 XMLHttpRequest 对象上的 abort 方法来取消请求</li></ul><h3 id="什么样的请求是重复请求？"><a href="#什么样的请求是重复请求？" class="headerlink" title="什么样的请求是重复请求？"></a>什么样的请求是重复请求？</h3><ul><li>请求方式</li><li>请求地址</li><li>请求参数<br>以上三者完全一致即认为该请求完全相同</li></ul><h3 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h3><p>注意：这里序列化参数这里用了 JSON.stringify，仅做演示，JSON.stringify 存在的缺陷就不在这里赘述了，注意使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123; <span class="attr">timeout</span>: <span class="number">1000</span> * <span class="number">6</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> pending = [];</span><br><span class="line"><span class="keyword">const</span> cancelToken = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">removePending</span> = (<span class="params">config</span>) =&gt; &#123;</span><br><span class="line">  pending.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> requestFunc = config.<span class="property">url</span>.<span class="title function_">slice</span>(config.<span class="property">url</span>.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>); <span class="comment">//文件分片不用拦截</span></span><br><span class="line">    <span class="keyword">if</span> (requestFunc !== <span class="string">&#x27;filesectioning&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        item.<span class="property">requestFlag</span> ===</span><br><span class="line">        <span class="string">`<span class="subst">$&#123;config.url&#125;</span>&amp;<span class="subst">$&#123;config.method&#125;</span>&amp;<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(</span></span></span><br><span class="line"><span class="subst"><span class="string">          config.params</span></span></span><br><span class="line"><span class="subst"><span class="string">        )&#125;</span>&amp;<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(config.data)&#125;</span>`</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        item.<span class="title function_">cancel</span>(<span class="string">&#x27;取消重复请求&#x27;</span>);</span><br><span class="line">        pending.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">request</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">removePending</span>(request);</span><br><span class="line">    request.<span class="property">cancelToken</span> = <span class="keyword">new</span> <span class="title function_">cancelToken</span>(<span class="function">(<span class="params">cancel</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> requestFlag = <span class="string">`<span class="subst">$&#123;request.url&#125;</span>&amp;<span class="subst">$&#123;request.method&#125;</span>&amp;<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(</span></span></span><br><span class="line"><span class="subst"><span class="string">        request.params</span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span>&amp;<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(request.data)&#125;</span>`</span>;</span><br><span class="line">      pending.<span class="title function_">push</span>(&#123; requestFlag, cancel &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> request;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件下载之response header中获取文件名</title>
      <link href="/dd03fdf4170a/"/>
      <url>/dd03fdf4170a/</url>
      
        <content type="html"><![CDATA[<h2 id="文件下载-之-response-header-中获取文件名"><a href="#文件下载-之-response-header-中获取文件名" class="headerlink" title="文件下载 之 response header 中获取文件名"></a>文件下载 之 response header 中获取文件名</h2><h3 id="通过-post-获取文件流，并从中获取到文件信息。"><a href="#通过-post-获取文件流，并从中获取到文件信息。" class="headerlink" title="通过 post 获取文件流，并从中获取到文件信息。"></a>通过 post 获取文件流，并从中获取到文件信息。</h3><ul><li><p>fetch API</p></li><li><p>获取放在 Content-Disposition 的文件信息</p></li><li><p>需要<strong>后端跨域支持</strong>，不然会出现，<strong>响应头为空</strong>的情况,从而得不到文件信息。</p></li><li><p>附源码</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取文件流，并获取响应头中的文件信息，需要后端跨域支持</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">downloadFile</span>(<span class="params">url, params</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> request = &#123;</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(params),</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url, request);</span><br><span class="line">  <span class="keyword">const</span> filename = response.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&#x27;Content-Disposition&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>)[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">await</span> response.<span class="title function_">blob</span>()</span><br><span class="line">  <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  link.<span class="property">download</span> = <span class="built_in">decodeURIComponent</span>(filename);</span><br><span class="line">  link.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  link.<span class="property">href</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(link);</span><br><span class="line">  link.<span class="title function_">click</span>();</span><br><span class="line">  <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(link.<span class="property">href</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(link);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue自定义指令之v-loading（附源码，可CV）</title>
      <link href="/6108546b8a4e/"/>
      <url>/6108546b8a4e/</url>
      
        <content type="html"><![CDATA[<p>组件 API：<a href="http://tigerui.xkongkeji.com/#loading-%E5%8A%A0%E8%BD%BD">TigerUi：http://tigerui.xkongkeji.com</a></p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fda944b6929146fd86076ec5412e6e97~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34d8e9b2026041f4a1fffd87127f0185~tplv-k3u1fbpfcp-watermark.image" alt="soogif.gif"></p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div :class=&quot;[&#x27;ti-loading&#x27;, &#x27;ti-&#x27; + type]&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;loader-inner&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;loader-line-wrap&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;loader-line&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;loader-line-wrap&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;loader-line&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;loader-line-wrap&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;loader-line&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;loader-line-wrap&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;loader-line&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;loader-line-wrap&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;loader-line&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;span v-if=&quot;text&quot; class=&quot;loading-text&quot;&gt;&#123;&#123; text &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;TiLoading&#x27;,</span><br><span class="line">  props: [&#x27;text&#x27;, &#x27;type&#x27;],</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.ti-service &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  z-index: 99999;</span><br><span class="line">&#125;</span><br><span class="line">.ti-directive &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  z-index: 99999;</span><br><span class="line">&#125;</span><br><span class="line">.ti-loading &#123;</span><br><span class="line">  background: #000;</span><br><span class="line">  background: radial-gradient(#222, #000);</span><br><span class="line">  opacity: 0.5;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loader-inner &#123;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  height: 60px;</span><br><span class="line">  left: 0;</span><br><span class="line">  margin: auto;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  width: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.loading-text &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 50%;</span><br><span class="line">  bottom: -70px;</span><br><span class="line">  width: 200px;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">  text-align: center;</span><br><span class="line">  transform: translateX(-50%);</span><br><span class="line">  color: #409eff;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap &#123;</span><br><span class="line">  animation: spin 2000ms cubic-bezier(0.175, 0.885, 0.32, 1.275) infinite;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  height: 50px;</span><br><span class="line">  left: 0;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  transform-origin: 50% 100%;</span><br><span class="line">  width: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line &#123;</span><br><span class="line">  border: 4px solid transparent;</span><br><span class="line">  border-radius: 100%;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  height: 100px;</span><br><span class="line">  left: 0;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  width: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(1) &#123;</span><br><span class="line">  animation-delay: -50ms;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(2) &#123;</span><br><span class="line">  animation-delay: -100ms;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(3) &#123;</span><br><span class="line">  animation-delay: -150ms;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(4) &#123;</span><br><span class="line">  animation-delay: -200ms;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(5) &#123;</span><br><span class="line">  animation-delay: -250ms;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loader-line-wrap:nth-child(1) .loader-line &#123;</span><br><span class="line">  border-color: hsl(0, 80%, 60%);</span><br><span class="line">  height: 90px;</span><br><span class="line">  width: 90px;</span><br><span class="line">  top: 7px;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(2) .loader-line &#123;</span><br><span class="line">  border-color: hsl(60, 80%, 60%);</span><br><span class="line">  height: 76px;</span><br><span class="line">  width: 76px;</span><br><span class="line">  top: 14px;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(3) .loader-line &#123;</span><br><span class="line">  border-color: hsl(120, 80%, 60%);</span><br><span class="line">  height: 62px;</span><br><span class="line">  width: 62px;</span><br><span class="line">  top: 21px;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(4) .loader-line &#123;</span><br><span class="line">  border-color: hsl(180, 80%, 60%);</span><br><span class="line">  height: 48px;</span><br><span class="line">  width: 48px;</span><br><span class="line">  top: 28px;</span><br><span class="line">&#125;</span><br><span class="line">.loader-line-wrap:nth-child(5) .loader-line &#123;</span><br><span class="line">  border-color: hsl(240, 80%, 60%);</span><br><span class="line">  height: 34px;</span><br><span class="line">  width: 34px;</span><br><span class="line">  top: 35px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes spin &#123;</span><br><span class="line">  0%,</span><br><span class="line">  15% &#123;</span><br><span class="line">    transform: rotate(0);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: rotate(360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="服务开启模式"><a href="#服务开启模式" class="headerlink" title="服务开启模式"></a>服务开启模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> loadingBase <span class="keyword">from</span> <span class="string">&#x27;./main.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> loadingConstructor = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(loadingBase);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Function</span> open 打开loading</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Function</span> close 关闭lading</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">serviceLoading</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_instance_</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_parent_</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_loadingList_</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">overflow</span> = <span class="literal">false</span>; <span class="comment">// 判断滚动条是否处于禁用状态</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; options  加载信息（可选）</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; el  loading挂载的位置，默认挂载在body</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">open</span>(<span class="params">options, el = <span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> id = <span class="variable language_">this</span>.<span class="property">_loadingList_</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (!el) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_parent_</span> = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isHTMLElement</span>(el)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_parent_</span> = el;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_parent_</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!options.<span class="property">type</span>) options.<span class="property">type</span> = <span class="string">&#x27;service&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_instance_</span> = <span class="keyword">new</span> <span class="title function_">loadingConstructor</span>(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>),</span><br><span class="line">      <span class="attr">propsData</span>: options,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">type</span> === <span class="string">&#x27;service&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">parentNode</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;hidden&#x27;</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">overflow</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_parent_</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">_instance_</span>.<span class="property">$el</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_loadingList_</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">id</span>: id,</span><br><span class="line">      <span class="attr">parent</span>: <span class="variable language_">this</span>.<span class="property">_parent_</span>,</span><br><span class="line">      <span class="attr">_instance</span>: <span class="variable language_">this</span>.<span class="property">_instance_</span>,</span><br><span class="line">      <span class="attr">type</span>: options.<span class="property">type</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_parent_</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_instance_</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; num loading标识数字</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">close</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">_loadingList_</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Number</span>(id) === <span class="variable language_">this</span>.<span class="property">_loadingList_</span>[i].<span class="property">id</span> || !id) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_loadingList_</span>[i].<span class="property">parent</span>.<span class="title function_">removeChild</span>(</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">_loadingList_</span>[i].<span class="property">_instance</span>.<span class="property">$el</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">overflow</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">_loadingList_</span>[i].<span class="property">type</span> === <span class="string">&#x27;service&#x27;</span>) &#123;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">parentNode</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;auto&#x27;</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">overflow</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_loadingList_</span>.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isHTMLElement</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="property">nodeType</span> &amp;&amp; obj.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title function_">serviceLoading</span>();</span><br></pre></td></tr></table></figure><h3 id="指令开启模式"><a href="#指令开启模式" class="headerlink" title="指令开启模式"></a>指令开启模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> serviceLoading <span class="keyword">from</span> <span class="string">&#x27;./service&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> directiveLoading = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;loading&#x27;</span>,</span><br><span class="line">  <span class="attr">bindFunctions</span>: &#123;</span><br><span class="line">    <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el, binding</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (binding.<span class="property">value</span>) &#123;</span><br><span class="line">        el.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;ti-loading-parent&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> text = el.<span class="title function_">getAttribute</span>(<span class="string">&#x27;ti-loading-text&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> id = serviceLoading.<span class="title function_">open</span>(</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;directive&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: text,</span><br><span class="line">          &#125;,</span><br><span class="line">          el</span><br><span class="line">        );</span><br><span class="line">        el.<span class="title function_">setAttribute</span>(<span class="string">&#x27;loadingId&#x27;</span>, id);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params">el, binding</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!binding.<span class="property">value</span>) &#123;</span><br><span class="line">        el.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;ti-loading-parent&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> id = el.<span class="title function_">getAttribute</span>(<span class="string">&#x27;loadingId&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (id) &#123;</span><br><span class="line">          serviceLoading.<span class="title function_">close</span>(id);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        el.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;ti-loading-parent&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> text = el.<span class="title function_">getAttribute</span>(<span class="string">&#x27;ti-loading-text&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> id = serviceLoading.<span class="title function_">open</span>(</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;directive&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: text,</span><br><span class="line">          &#125;,</span><br><span class="line">          el</span><br><span class="line">        );</span><br><span class="line">        el.<span class="title function_">setAttribute</span>(<span class="string">&#x27;loadingId&#x27;</span>, id);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> directiveLoading;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket.io初体验</title>
      <link href="/4e22f7555f51/"/>
      <url>/4e22f7555f51/</url>
      
        <content type="html"><![CDATA[<h2 id="socket-io-初体验"><a href="#socket-io-初体验" class="headerlink" title="socket.io 初体验"></a>socket.io 初体验</h2><h3 id="什么是-socket-io"><a href="#什么是-socket-io" class="headerlink" title="什么是 socket.io"></a>什么是 socket.io</h3><p>Socket.IO 是一个封装了 Websocket、基于 Node 的 JavaScript 框架，包含 client 的 JavaScript 和 server 的 Node。其屏蔽了所有底层细节，让顶层调用非常简单。另外，Socket.IO 还有一个非常重要的好处。其不仅支持 WebSocket，还支持许多种轮询机制以及其他实时通信方式，并封装了通用的接口。这些方式包含 Adobe Flash Socket、Ajax 长轮询、Ajax multipart streaming 、持久 Iframe、JSONP 轮询等。换句话说，当 Socket.IO 检测到当前环境不支持 WebSocket 时，能够自动地选择最佳的方式来实现网络的实时通信。</p><h3 id="客户端（vue-vue-socket-io）"><a href="#客户端（vue-vue-socket-io）" class="headerlink" title="客户端（vue+vue-socket.io）"></a>客户端（vue+vue-socket.io）</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-socket.io --save</span><br></pre></td></tr></table></figure><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul><li>引入 vue-socket.io</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueSocketIO</span> <span class="keyword">from</span> <span class="string">&#x27;vue-socket.io&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">VueSocketIO</span>(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">connection</span>: <span class="string">&#x27;你的地址&#x27;</span>,</span><br><span class="line">    <span class="attr">vuex</span>: &#123;&#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>监听服务端自定义事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sockets</span>: &#123;</span><br><span class="line">   <span class="comment">// 服务器事件名字</span></span><br><span class="line">   <span class="attr">msg</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">   &#125;, <span class="comment">// 举个例子 服务器传来 msg消息</span></span><br><span class="line">   <span class="attr">online</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>注意：sockets 与 methods 同级 不在 methods 内</p><h4 id="可能遇到的问题链接请求跨域问题"><a href="#可能遇到的问题链接请求跨域问题" class="headerlink" title="可能遇到的问题链接请求跨域问题"></a>可能遇到的问题链接请求跨域问题</h4><ul><li>在 vue.config.js 配置一下代理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;/socket.io&#x27;</span>: &#123;</span><br><span class="line">     <span class="attr">target</span>: <span class="string">&#x27;http://localhost:9000&#x27;</span>,</span><br><span class="line">     <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;/sockjs-node&#x27;</span>: &#123;</span><br><span class="line">     <span class="attr">target</span>: <span class="string">&#x27;http://localhost:9000&#x27;</span>,</span><br><span class="line">     <span class="attr">ws</span>: <span class="literal">false</span>,</span><br><span class="line">     <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="node-服务端（express-socket-io）"><a href="#node-服务端（express-socket-io）" class="headerlink" title="node 服务端（express+socket.io）"></a>node 服务端（express+socket.io）</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install socket.io --save</span><br></pre></td></tr></table></figure><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)();</span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>).<span class="title class_">Server</span>(app);</span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)(server, &#123; <span class="attr">allowEIO3</span>: <span class="literal">true</span>, <span class="attr">cors</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决跨域问题</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;GET,HEAD,OPTIONS,POST,PUT&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">header</span>(</span><br><span class="line">    <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Origin, X-Requested-With, Content-Type, Accept, Authorization&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = [];</span><br><span class="line"><span class="keyword">let</span> userOnline = [];</span><br><span class="line">io.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span> (<span class="params">socket</span>) &#123;</span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&#x27;login&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (socket.<span class="property">client</span>.<span class="property">id</span> <span class="keyword">in</span> userOnline) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你已经来过了&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      user.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: socket.<span class="property">id</span>,</span><br><span class="line">        <span class="attr">name</span>: data.<span class="property">name</span>,</span><br><span class="line">        <span class="attr">socket</span>: socket,</span><br><span class="line">      &#125;);</span><br><span class="line">      userOnline.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: socket.<span class="property">id</span>,</span><br><span class="line">        <span class="attr">name</span>: data.<span class="property">name</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    socket.<span class="title function_">emit</span>(<span class="string">&#x27;online&#x27;</span>, &#123; <span class="attr">user</span>: userOnline &#125;);</span><br><span class="line">    socket.<span class="property">broadcast</span>.<span class="title function_">emit</span>(<span class="string">&#x27;msg&#x27;</span>, &#123; <span class="attr">user</span>: data.<span class="property">name</span> &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&#x27;submitmsg&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    socket.<span class="property">broadcast</span>.<span class="title function_">emit</span>(<span class="string">&#x27;msg&#x27;</span>, data);</span><br><span class="line">  &#125;);</span><br><span class="line">  socket.<span class="title function_">on</span>(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; userOnline.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (socket.<span class="property">id</span> === userOnline[i].<span class="property">id</span>) &#123;</span><br><span class="line">        userOnline.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; user.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (socket.<span class="property">id</span> === user[i].<span class="property">id</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(user[i].<span class="property">name</span> + <span class="string">&#x27;走了&#x27;</span>);</span><br><span class="line">        user.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>至此便实现了 socket 的简单通讯</li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/049cf13f737b46b586120eaa68eb0a17~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你真的了解prototype和__proto__吗</title>
      <link href="/8e023059efcc/"/>
      <url>/8e023059efcc/</url>
      
        <content type="html"><![CDATA[<h2 id="你真的了解-prototype-和proto吗"><a href="#你真的了解-prototype-和proto吗" class="headerlink" title="你真的了解 prototype 和proto吗"></a>你真的了解 prototype 和<strong>proto</strong>吗</h2><h3 id="一句话的图解：实例对象的隐式原型指向构造函数的的原型对象"><a href="#一句话的图解：实例对象的隐式原型指向构造函数的的原型对象" class="headerlink" title="一句话的图解：实例对象的隐式原型指向构造函数的的原型对象"></a>一句话的图解：<strong>实例对象的隐式原型指向构造函数的的原型对象</strong></h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc97d23d54324e74b8cb4e219c344aa0~tplv-k3u1fbpfcp-watermark.image" alt="原型.png"></p><h3 id="什么是-prototype"><a href="#什么是-prototype" class="headerlink" title="什么是 prototype"></a>什么是 prototype</h3><ul><li><p>javascript 只有函数默认拥有 prototype 属性，由构造函数构造出来的实例默认是不具有扩展的，除非手动给这个实例加上扩展（当然这已经不是 prototype 了，仅是一个名叫 prototype 的属性而已）。</p></li><li><p>在 JS 里，万物皆对象。方法(Function)是一个对象，方法的原型(Function.prototype)是对象。</p></li><li><p>prototype 是一个拥有 [[Construct]] 内部方法的对象才有的属性。</p><p>例如函数，对象的方法，ES6 中的类。注意 ES6 中的箭头函数没有 [[Construct]] 方法，因此没有 prototype 这个属性，除非你为它添加一个。</p></li></ul><h3 id="什么是proto"><a href="#什么是proto" class="headerlink" title="什么是proto"></a>什么是<strong>proto</strong></h3><ul><li><strong>proto</strong>就是连接两个实例与原型之间的桥梁，就是我们通常所说的原型链，<strong>proto</strong>指向构造函数的 prototype 。<strong>proto</strong>的作用是创建一个原型链，要通过<strong>proto</strong>，你才能不断的找到所谓的父原型。</li><li>每个对象都有一个<strong>proto</strong>属性</li></ul><h3 id="什么是原型链"><a href="#什么是原型链" class="headerlink" title="什么是原型链"></a>什么是原型链</h3><ul><li>JavaScript 可以通过 prototype 和<strong>proto</strong>在两个对象之间创建一个关联，使得一个对象就可以通过委托访问另一个对象的属性和函数。</li><li>这样的一个关联就是原型链，一个由对象组成的有限对象链，用于实现继承和共享属性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> prototype </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular你不得不了解的入门小知识</title>
      <link href="/ff10067c97cb/"/>
      <url>/ff10067c97cb/</url>
      
        <content type="html"><![CDATA[<h2 id="Angular-你不得不了解的入门小知识"><a href="#Angular-你不得不了解的入门小知识" class="headerlink" title="Angular 你不得不了解的入门小知识"></a>Angular 你不得不了解的入门小知识</h2><h3 id="highlight-androidstudio"><a href="#highlight-androidstudio" class="headerlink" title="highlight: androidstudio"></a>highlight: androidstudio</h3><p><strong>1. 一个 Angular 程序至少需要一个模块和一个组件。在我们新建项目的时候命令行已经默认生成出来了。</strong></p><ul><li>app.component.ts：这个文件表示组件</li><li>组件是 Angular 应用的基本构建模块，可以理解为一段带有业务逻辑和数据的 Html，vue 是 js，css，html 整合在一起，当然也可以分开，angular 是分开处理的</li></ul><p><strong>2. - 组件相关概念：类似于 Vue</strong></p><ul><li><p>组件元数据装饰器（@Component）<br>简称组件装饰器，用来告知 Angular 框架如何处理一个 TypeScript 类.<br>Component 装饰器包含多个属性，这些属性的值叫做元数据，Angular 会根据这些元数据的值来渲染组件并执行组件的逻辑</p></li><li><p>模板（Template）–&gt; html</p><p>我们可以通过组件自带的模板来定义组件的外观，模板以 html 的形式存在，告诉 Angular 如何来渲染组件，一般来 说，模板看起来很像 html，但是我们可以在模板中使用 Angular 的数据绑定语法，来呈现控制器中的数据。</p></li><li><p>控制器（controller）</p><p>控制器就是一个普通的 typescript 类，他会被@Component 来装饰，控制器会包含组件所有的属性和方法，绝大多数的业务逻辑都是写在控制器里的。控制器通过数据绑定与模板来通讯，模板展现控制器的数据，控制器处理模板上发生的事件。</p></li><li><p>装饰器 ：模板和控制器是组件的必备要素。还有一些可选的元素，比如：<br>输入属性（@inputs） 是用来接收外部传入的数据的,Angular 的程序结构就是一个组件树，输入属性允许在组件树 种传递数据</p></li><li><p>提供器（providers）： 这个是用来做依赖注入的<br>生命周期钩子（LifeCycle Hooks）： 一个组件从创建到销毁的过程中会有多个钩子会被触发，类似于 Android 中的 Activity 的生命周期</p></li><li><p>样式表：组件可以关联一些样式表<br>动画（Animations）： Angular 提供了一个动画包来帮助我们方便的创建一些跟组件相关的动画效果，比如淡入淡出等</p></li><li><p>输出属性（@Outputs）：</p><p>用来定义一些其他组件可能需要的事件或者用来在组件之间共享数据</p></li><li><p>app.module.ts 模块<br>与 AppComponent 类似，模块也需要装饰器来装饰。</p></li><li><p>Angular 常用命令</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ng new [name]</span><br><span class="line"></span><br><span class="line">ng serve --open</span><br><span class="line"></span><br><span class="line">// ng serve 命令会启动开发服务器、监视文件，并在这些文件发生更改时重建应用。</span><br><span class="line"></span><br><span class="line">// --open（或者只用 -o 缩写）选项会自动打开你的浏览器，并访问 http://localhost:4200/</span><br></pre></td></tr></table></figure><ul><li><p>模块<br>将其组件和一组相关代码（如服务）关联起来</p><p>ng generate module my-module-name</p><p>简写 ng g m my-module-name</p><p>配置 ng g m my-module-name-routing 创建带路由的模块</p><p>ng g &#x2F;&#x2F; 创建新的东西，如组件等<br>ng g component &#x2F;&#x2F; 创建新组件<br>ng g component components&#x2F;news &#x2F;&#x2F; 新建 news 组件。<br>ng g component components &#x2F;&#x2F; 执行这两个命令后，如下图</p></li><li><p>服务<br>对于与特定视图无关的，并且想跨组件共享的数据或逻辑，可以创建服务类。可作为依赖注入对象注入到使用的组建中<br>数据绑定</p><ul><li>在模板上通过标记语言，数据传给对应的组件&#x2F;指令，事件返回给使用者</li><li>[] 属性绑定</li><li>() 事件绑定</li><li>[()] 双向绑定</li><li>&lt;input [ngModel]&#x3D;”data” (ngModuleChange)&#x3D;”myFunc($event)” [(ngModel)]&#x3D;’data1’&gt;</li></ul><p>ng g m test1 &#x2F;&#x2F; 创建一个 test1 的 module</p><p>ng g m test2 –routing &#x2F;&#x2F; 创建一个带路由的 module</p><p>ng new my-project-name &#x2F;&#x2F; 创建一个新项目</p><p>ng build &#x2F;&#x2F; 构建&#x2F;编译应用</p><p>ng test &#x2F;&#x2F; 运行单元测试</p><p>ng e2e &#x2F;&#x2F; 运行端到端（end-to-end）测试</p><p>ng serve &#x2F;&#x2F; 启动一个小型 web 服务器，用于托管应用</p><p>ng –help &#x2F;&#x2F; 不懂的时候用这个查</p><p>ng xxx –help &#x2F;&#x2F; xxx 某个命令</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MessageComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./message/message.component&#x27;</span>;</span><br><span class="line">@<span class="title class_">NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">      <span class="title class_">MessageComponent</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Angular 项目目录结构,看起来和 Vue 并没有什么区别的地方，大同小异。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">node_modules        第三方依赖包存放目录</span><br><span class="line">e2e                 端到端的测试目录  用来做自动测试的</span><br><span class="line">src                 应用源代码目录</span><br><span class="line">.angular-cli.json   Angular命令行工具的配置文件。后期可能会去修改它，引一些其他的第三方的包  比如jquery等</span><br><span class="line">karma.conf.js      karma是单元测试的执行器，karma.conf.js是karma的配置文件</span><br><span class="line">package.json        npm工具的配置文件，这个文件里面列出了该应用程序所使用的第三方依赖包。在新建项目的时候，等半天就是在下载第三方依赖包。下载完成后会放在node_modules这个目录中，后期我们可能会修改这个文件。</span><br><span class="line">protractor.conf.js  也是一个做自动化测试的配置文件</span><br><span class="line">README.md           说明文件</span><br><span class="line">tslint.json         是tslint的配置文件，用来定义TypeScript代码质量检查的规则，不用管它</span><br><span class="line">复制代码src 目录</span><br><span class="line">app目录             包含应用的组件和模块，我们要写的代码都在这个目录</span><br><span class="line">assets目录      资源目录，存储静态资源的  比如图片</span><br><span class="line">environments目录    环境配置。Angular是支持多环境开发的，我们可以在不同的环境下（开发环境，测试环境，生产环境）共用一套代码，主要用来配置环境的</span><br><span class="line">index.html          入口。整个应用的根html，程序启动就是访问这个页面</span><br><span class="line">main.ts             整个项目的入口点，Angular通过这个文件来启动项目</span><br><span class="line">polyfills.ts        主要是用来导入一些必要库，为了让Angular能正常运行在老版本下</span><br><span class="line">styles.css          主要是放一些全局的样式</span><br><span class="line">tsconfig.app.json   TypeScript编译器的配置,添加第三方依赖的时候会修改这个文件</span><br><span class="line">tsconfig.spec.json  不用管</span><br><span class="line">test.ts             也是自动化测试用的</span><br><span class="line">typings.d.ts        不用管</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于XSS与CSRF你应该知道的</title>
      <link href="/733b2c0d957b/"/>
      <url>/733b2c0d957b/</url>
      
        <content type="html"><![CDATA[<h2 id="关于-XSS-与-CSRF-你应该知道的"><a href="#关于-XSS-与-CSRF-你应该知道的" class="headerlink" title="关于 XSS 与 CSRF 你应该知道的"></a>关于 XSS 与 CSRF 你应该知道的</h2><p>在 Web 安全领域中，XSS 和 CSRF 是最常见的攻击方式。接下来就简单的说一下他们该怎么防范。</p><h3 id="什么是-XSS"><a href="#什么是-XSS" class="headerlink" title="什么是 XSS"></a>什么是 XSS</h3><p>XSS 攻击是指攻击者在网站上注入恶意的客户端代码，通过恶意脚本对客户端网页进行篡改，从而在用户浏览网页时，对用户浏览器进行控制或者获取用户隐私数据的一种攻击方式。</p><h3 id="XSS-攻击的防范"><a href="#XSS-攻击的防范" class="headerlink" title="XSS 攻击的防范"></a>XSS 攻击的防范</h3><p>现在主流的浏览器内置了防范 XSS 的措施，例如 CSP。但对于开发者来说，也应该寻找可靠的解决方案来防止 XSS 攻击。</p><ul><li><p>HttpOnly 防止劫取 Cookie</p><p>HttpOnly 最早由微软提出，至今已经成为一个标准。浏览器将禁止页面的 Javascript 访问带有 HttpOnly 属性的 Cookie。严格来说，HttpOnly 并非阻止 XSS 攻击，而是能阻止 XSS 攻击后的 Cookie 劫持攻击。</p></li><li><p>输入检查</p><p>不要相信用户的任何输入。 对于用户的任何输入要进行检查、过滤和转义。建立可信任的字符和 HTML 标签白名单，对于不在白名单之列的字符或者标签进行过滤或编码。</p><p>补充：输入检查一般是检查用户输入的数据中是否包含 &lt;，&gt; 等特殊字符，如果存在，则对特殊字符进行过滤或编码，这种方式也称为 XSS Filter。</p></li><li><p>输出检查</p><p>用户的输入会存在问题，服务端的输出也会存在问题。一般来说，除富文本的输出外，在变量输出到 HTML 页面时，可以使用编码或转义的方式来防御 XSS 攻击。</p></li></ul><h3 id="什么是-CSRF"><a href="#什么是-CSRF" class="headerlink" title="什么是 CSRF"></a>什么是 CSRF</h3><p>CSRF，即 Cross Site Request Forgery，中译是跨站请求伪造，是一种劫持受信任用户向服务器发送非预期请求的攻击方式。</p><p>通常情况下，CSRF 攻击是攻击者借助受害者的 Cookie 骗取服务器的信任，可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击服务器，从而在并未授权的情况下执行在权限保护之下的操作。</p><h3 id="CSRF-攻击的防范"><a href="#CSRF-攻击的防范" class="headerlink" title="CSRF 攻击的防范"></a>CSRF 攻击的防范</h3><ul><li><p>验证码</p><p>验证码被认为是对抗 CSRF 攻击最简洁而有效的防御方法。</p><p>从上述示例中可以看出，CSRF 攻击往往是在用户不知情的情况下构造了网络请求。而验证码会强制用户必须与应用进行交互，才能完成最终请求。因为通常情况下，验证码能够很好地遏制 CSRF 攻击。</p><p>但验证码并不是万能的，因为出于用户考虑，不能给网站所有的操作都加上验证码。因此，验证码只能作为防御 CSRF 的一种辅助手段，而不能作为最主要的解决方案。</p></li><li><p>Referer 检查</p><p>根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。通过 Referer Check，可以检查请求是否来自合法的”源”。</p></li><li><p>添加 token 验证</p><p>CSRF 攻击之所以能够成功，是因为攻击者可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 Cookie 中，因此攻击者可以在不知道这些验证信息的情况下直接利用用户自己的 Cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入攻击者所不能伪造的信息，并且该信息不存在于 Cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题日记之链表中倒数第k个节点</title>
      <link href="/62416e3be383/"/>
      <url>/62416e3be383/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-刷题日记之链表中倒数第-k-个节点"><a href="#LeetCode-刷题日记之链表中倒数第-k-个节点" class="headerlink" title="LeetCode 刷题日记之链表中倒数第 k 个节点"></a>LeetCode 刷题日记之链表中倒数第 k 个节点</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e98f46351f84451804105231059ed4b~tplv-k3u1fbpfcp-watermark.image"></p><p>解题思路：遍历出链表长度，设置一个计数点，当找到倒数第 K 个节点时返回，链表（感觉走了笨办法）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getKthFromEnd = <span class="keyword">function</span> (<span class="params">head, k</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> conut = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> temp = head;</span><br><span class="line">  <span class="keyword">while</span> (temp &amp;&amp; temp.<span class="property">next</span>) &#123;</span><br><span class="line">    conut++;</span><br><span class="line">    temp = temp.<span class="property">next</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (head) &#123;</span><br><span class="line">    <span class="keyword">if</span> (conut - k + <span class="number">1</span> === index) &#123;</span><br><span class="line">      <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (head.<span class="property">next</span>) &#123;</span><br><span class="line">      index++;</span><br><span class="line">      head = head.<span class="property">next</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      head = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52936c070b394dc2b0c4059fad49f791~tplv-k3u1fbpfcp-watermark.image"></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题日记之顺时针打印矩阵</title>
      <link href="/3055d67bf091/"/>
      <url>/3055d67bf091/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-刷题日记之顺时针打印矩阵"><a href="#LeetCode-刷题日记之顺时针打印矩阵" class="headerlink" title="LeetCode 刷题日记之顺时针打印矩阵"></a>LeetCode 刷题日记之顺时针打印矩阵</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/114a757fe3824f88a5a9ccd156478563~tplv-k3u1fbpfcp-zoom-1.image"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ade6260330b640efbc1fd830d484fb9c~tplv-k3u1fbpfcp-zoom-1.image"><br>解题思路：把矩阵分为一个一个的圆环，顺时针遍历圆环即可（设置边界值，根据边界值，遍历圆环），只剩下一行，从左到右依次添加，只剩下一列时，从上到下依次添加。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d65014d568f1437b968f47a14bc7dcb8~tplv-k3u1fbpfcp-zoom-1.image"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> matrix = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">  [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">spiralOrder</span> = (<span class="params">matrix</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (matrix.<span class="property">length</span> == <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> top = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> bottom = matrix.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> right = matrix[<span class="number">0</span>].<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (top &lt; bottom &amp;&amp; left &lt; right) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = left; i &lt; right; i++) result.<span class="title function_">push</span>(matrix[top][i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = top; i &lt; bottom; i++) result.<span class="title function_">push</span>(matrix[i][right]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = right; i &gt; left; i--) result.<span class="title function_">push</span>(matrix[bottom][i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = bottom; i &gt; top; i--) result.<span class="title function_">push</span>(matrix[i][left]);</span><br><span class="line">    right--;</span><br><span class="line">    top++;</span><br><span class="line">    bottom--;</span><br><span class="line">    left++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 剩下一行，从左到右依次添加</span></span><br><span class="line">  <span class="keyword">if</span> (top == bottom) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(matrix[top][i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = top; i &lt;= bottom; i++) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(matrix[i][left]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">spiralOrder</span>(matrix));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题日记之找出数组中重复数字</title>
      <link href="/7a625fd6753d/"/>
      <url>/7a625fd6753d/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-刷题日记之找出数组中重复数字"><a href="#LeetCode-刷题日记之找出数组中重复数字" class="headerlink" title="LeetCode 刷题日记之找出数组中重复数字"></a>LeetCode 刷题日记之找出数组中重复数字</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d3e0fe55ffd4b7abd6e439dfdfb3e4e~tplv-k3u1fbpfcp-zoom-1.image"><br>对于一段程序，用不同的方法写消耗时间差距还是很大的，下面是本题的逐渐改进过程。</p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">let</span> findRepeatNumber = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> startIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">while</span> (startIndex &lt; nums.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> start = nums[startIndex];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = startIndex + <span class="number">1</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (start === nums[i]) &#123;</span><br><span class="line">        result = nums[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    startIndex++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da60c91ac7034fe283656d7d144fade1~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="减少时间复杂度，用-set-减少遍历次数"><a href="#减少时间复杂度，用-set-减少遍历次数" class="headerlink" title="减少时间复杂度，用 set 减少遍历次数"></a>减少时间复杂度，用 set 减少遍历次数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> findRepeatNumber = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">let</span> single = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (single.<span class="title function_">has</span>(nums[i])) &#123;</span><br><span class="line">      <span class="keyword">return</span> nums[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      single.<span class="title function_">add</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39185f7aaa334075957126ce3986c95e~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id="先排序，再使用方法二"><a href="#先排序，再使用方法二" class="headerlink" title="先排序，再使用方法二"></a>先排序，再使用方法二</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> findRepeatNumber = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  nums = nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> single = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (single.<span class="title function_">has</span>(nums[i])) &#123;</span><br><span class="line">      <span class="keyword">return</span> nums[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      single.<span class="title function_">add</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">findRepeatNumber</span>(nums));</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12296120a0dd43fda9f8eabaa15a9ab8~tplv-k3u1fbpfcp-zoom-1.image"></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于EventLoop的简单理解</title>
      <link href="/1a10de33feed/"/>
      <url>/1a10de33feed/</url>
      
        <content type="html"><![CDATA[<h2 id="关于-EventLoop-的简单理解"><a href="#关于-EventLoop-的简单理解" class="headerlink" title="关于 EventLoop 的简单理解"></a>关于 EventLoop 的简单理解</h2><h3 id="EventLoop-出现的目的"><a href="#EventLoop-出现的目的" class="headerlink" title="EventLoop 出现的目的"></a>EventLoop 出现的目的</h3><h4 id="js-单线程"><a href="#js-单线程" class="headerlink" title="js 单线程"></a>js 单线程</h4><p>众所周知 js 是单线程的，那为什么是单线程嘞，作为浏览器脚本语言，JavaScript 的主要用途是与用户互动，以及操作 DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定 JavaScript 同时有两个线程，一个线程在某个 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p><h4 id="单线程解决方案"><a href="#单线程解决方案" class="headerlink" title="单线程解决方案"></a>单线程解决方案</h4><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。如果排队是因为计算量大，CPU 忙不过来，倒也算了，但是很多时候 CPU 是闲着的，因为 IO 设备（输入输出设备）很慢（比如 Ajax 操作从网络读取数据），不得不等着结果出来，再往下执行。<strong>于是就有了 EventLoop 的出现。</strong></p><h3 id="宏任务与微任务从哪里来"><a href="#宏任务与微任务从哪里来" class="headerlink" title="宏任务与微任务从哪里来"></a>宏任务与微任务从哪里来</h3><h4 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h4><ul><li>Promise ，当调用 Promise.resolve() 或者 Promise.reject() 的时候，会产生微任务。</li><li>MutationObserver 接口，监听 DOM 节点发生改变的时候，就会产生 DOM 变化记录的微任务。</li><li>Process.nextTick（Node 独有）</li></ul><h4 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h4><ul><li>渲染事件（如解析 DOM、计算布局、绘制）</li><li>用户交互事件（如鼠标点击、滚动页面、放大缩小等）</li><li>JavaScript 脚本执行事件</li><li>网络请求完成、文件读写完成事件</li></ul><h3 id="执行顺序图解（图片来自网络）"><a href="#执行顺序图解（图片来自网络）" class="headerlink" title="执行顺序图解（图片来自网络）"></a>执行顺序图解（图片来自网络）</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9a2c34210054f06aa29468f17055207~tplv-k3u1fbpfcp-watermark.image"></p><h3 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h3><ul><li>js 会先执行主线程任务，遇到微任务就放进微任务队列，遇到宏任务就放入宏任务队列。</li><li>主线程代码执行完成后就会从微任务队列中去取微任务执行直到微任务队列清空，</li><li>微任务队列完成后就会从宏任务队列中取出宏任务执行，<strong>（个人理解：主线程代码就是第一个宏任务）</strong> 如主线程任务一般，遇到微任务放入微任务队列，遇到宏任务放入宏任务队列。</li><li>重复此过程，这就是事件循环机制。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EventLoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拜读vue官方文档</title>
      <link href="/d0091db415ea/"/>
      <url>/d0091db415ea/</url>
      
        <content type="html"><![CDATA[<h2 id="拜读-vue-官方文档"><a href="#拜读-vue-官方文档" class="headerlink" title="拜读 vue 官方文档"></a>拜读 vue 官方文档</h2><h3 id="1、不要在生命周期函数上使用箭函数"><a href="#1、不要在生命周期函数上使用箭函数" class="headerlink" title="1、不要在生命周期函数上使用箭函数"></a>1、不要在生命周期函数上使用箭函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">created</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">vm.$watch(<span class="string">&#x27;a&#x27;</span>, <span class="function">(<span class="params">newValue</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">myMethod</span>());</span><br></pre></td></tr></table></figure><p>因为箭头函数并没有 this，this 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之类的错误。</p><h3 id="2、v-show-不支持-template-元素，也不支持-v-else。"><a href="#2、v-show-不支持-template-元素，也不支持-v-else。" class="headerlink" title="2、v-show 不支持 template 元素，也不支持 v-else。"></a>2、v-show 不支持 template 元素，也不支持 v-else。</h3><h3 id="3、当-v-if-与-v-for-一起使用时，v-for-具有比-v-if-更高的优先级。"><a href="#3、当-v-if-与-v-for-一起使用时，v-for-具有比-v-if-更高的优先级。" class="headerlink" title="3、当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。"></a>3、当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。</h3><h3 id="4、使用修饰符时，顺序很重要（从左到右）"><a href="#4、使用修饰符时，顺序很重要（从左到右）" class="headerlink" title="4、使用修饰符时，顺序很重要（从左到右）"></a>4、使用修饰符时，顺序很重要（从左到右）</h3><ul><li>v-on:click.prevent.self 会阻止所有的点击，</li><li>v-on:click.self.prevent 只会阻止对元素自身的点击。</li></ul><h3 id="5、当一个-ViewModel-被销毁时，所有的事件处理器都会自动被删除。你无须担心如何清理它们。"><a href="#5、当一个-ViewModel-被销毁时，所有的事件处理器都会自动被删除。你无须担心如何清理它们。" class="headerlink" title="5、当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何清理它们。"></a>5、当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何清理它们。</h3><h3 id="6、prop-会在一个组件实例创建之前进行验证"><a href="#6、prop-会在一个组件实例创建之前进行验证" class="headerlink" title="6、prop 会在一个组件实例创建之前进行验证"></a>6、prop 会在一个组件实例创建之前进行验证</h3><p>所以实例的 property (如 data、computed 等) 在 default 或 validator 函数中是不可用的。</p><h3 id="7、-sync-修饰符的-v-bind-不能和表达式一起使用"><a href="#7、-sync-修饰符的-v-bind-不能和表达式一起使用" class="headerlink" title="7、.sync 修饰符的 v-bind 不能和表达式一起使用"></a>7、.sync 修饰符的 v-bind 不能和表达式一起使用</h3><ul><li>例如 v-bind:title.sync&#x3D;”doc.title + ‘!’” 是无效的。</li><li>当我们用一个对象同时设置多个 prop 的时候，也可以将这个 .sync 修饰符和 v-bind 配合使用：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text-document</span> <span class="attr">v-bind.sync</span>=<span class="string">&quot;doc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将 v-bind.sync 用在一个字面量的对象上，例如 v-bind.sync&#x3D;”{ title: doc.title }”，是无法正常工作的，因为在解析一个像这样的复杂表达式的时候，有很多边缘情况需要考虑。</p><h3 id="8、注意这个-keep-alive-要求被切换到的组件都有自己的名字，不论是通过组件的-name-选项还是局部-x2F-全局注册。"><a href="#8、注意这个-keep-alive-要求被切换到的组件都有自己的名字，不论是通过组件的-name-选项还是局部-x2F-全局注册。" class="headerlink" title="8、注意这个 keep-alive 要求被切换到的组件都有自己的名字，不论是通过组件的 name 选项还是局部&#x2F;全局注册。"></a>8、注意这个 keep-alive 要求被切换到的组件都有自己的名字，不论是通过组件的 name 选项还是局部&#x2F;全局注册。</h3><h3 id="9、refs-只会在组件渲染完成之后生效，并且它们不是响应式的。这仅作为一个用于直接操作子组件的“逃生舱”——你应该避免在模板或计算属性中访问-refs。"><a href="#9、refs-只会在组件渲染完成之后生效，并且它们不是响应式的。这仅作为一个用于直接操作子组件的“逃生舱”——你应该避免在模板或计算属性中访问-refs。" class="headerlink" title="9、refs 只会在组件渲染完成之后生效，并且它们不是响应式的。这仅作为一个用于直接操作子组件的“逃生舱”——你应该避免在模板或计算属性中访问 $refs。"></a>9、refs 只会在组件渲染完成之后生效，并且它们不是响应式的。这仅作为一个用于直接操作子组件的“逃生舱”——你应该避免在模板或计算属性中访问 $refs。</h3><h3 id="10、mixin-混入"><a href="#10、mixin-混入" class="headerlink" title="10、mixin 混入"></a>10、mixin 混入</h3><ul><li>数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先。</li><li>同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。</li><li>Vue.extend() 也使用同样的策略进行合并。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue插槽的基本使用</title>
      <link href="/edb568f17d38/"/>
      <url>/edb568f17d38/</url>
      
        <content type="html"><![CDATA[<h2 id="vue-插槽的基本使用"><a href="#vue-插槽的基本使用" class="headerlink" title="vue 插槽的基本使用"></a>vue 插槽的基本使用</h2><h3 id="vue-提供了三种插槽：匿名插槽，具名插槽，作用域插槽"><a href="#vue-提供了三种插槽：匿名插槽，具名插槽，作用域插槽" class="headerlink" title="vue 提供了三种插槽：匿名插槽，具名插槽，作用域插槽"></a>vue 提供了三种插槽：匿名插槽，具名插槽，作用域插槽</h3><h3 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h3><p>子组件定义了 solt，但未提供名字，这就是匿名插槽，也叫做默认插槽，只要出现的父组件中，未指定插槽名字的内容，都会默认放到匿名插槽里。</p><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&lt;slot&gt;&lt;/slot&gt;//匿名插槽&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;myComponent&gt;我被放进了插槽中&lt;/myComponent&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>当父组件没有提供内容的时候，会默认渲染插槽内的内容，传值则会被替换</p><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p>所谓具名插槽，就是给插槽命了名字，父组件放进来的内容，需要指定插槽的名称，这个时候才会被分发到这个具名插槽中。</p><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;slot1&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;slot1&quot;&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;!-- 名为“slot1”的具名插槽 --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;slot2&quot;&gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;!-- 匿名插槽 --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;myComponent&gt;</span><br><span class="line">      &lt;template v-slot:slot1&gt;</span><br><span class="line">        &lt;p&gt;名为slot1的具名插槽中&lt;/p&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;!-- 这个会放到solt1中 --&gt;</span><br><span class="line">      &lt;p&gt;啦啦啦啦德玛西亚&lt;/p&gt;</span><br><span class="line">      &lt;!-- 这个会放到默认插槽中 --&gt;</span><br><span class="line">    &lt;/myComponent&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><p>有时让插槽内容能够访问子组件中才有的数据是很有用的。所以提供了作用域插槽</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;</span><br><span class="line">  &lt;slot v-bind:user=&quot;user&quot;&gt;</span><br><span class="line">    &#123;&#123; user.lastName &#125;&#125;</span><br><span class="line">  &lt;/slot&gt;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>绑定在 <code>&lt;slot&gt;</code> 元素上的 attribute 被称为插槽 prop。现在在父级作用域中，我们可以使用带值的 v-slot 来定义我们提供的插槽 prop 的名字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user&gt;</span><br><span class="line">  &lt;template v-slot:default=&quot;slotProps&quot;&gt;</span><br><span class="line">    &#123;&#123; slotProps.user.firstName &#125;&#125;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/current-user&gt;</span><br></pre></td></tr></table></figure><h3 id="总结一点就是可以在父组件访问到子组件的数据-相当于函数传参。"><a href="#总结一点就是可以在父组件访问到子组件的数据-相当于函数传参。" class="headerlink" title="总结一点就是可以在父组件访问到子组件的数据,相当于函数传参。"></a>总结一点就是可以在父组件访问到子组件的数据,相当于函数传参。</h3><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>注意默认插槽的缩写语法不能和具名插槽混用，因为它会导致作用域不明确：</li><li>只要出现多个插槽，请始终为所有的插槽使用完整的语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;todo-list v-bind:todos=&quot;todos&quot;&gt;</span><br><span class="line">  &lt;template v-slot:todo=&quot;&#123; todo &#125;&quot;&gt;</span><br><span class="line">    &lt;span v-if=&quot;todo.isComplete&quot;&gt;✓&lt;/span&gt;</span><br><span class="line">    &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/todo-list&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
            <tag> slot </tag>
            
            <tag> 插槽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端校招面试题</title>
      <link href="/861545bc33cb/"/>
      <url>/861545bc33cb/</url>
      
        <content type="html"><![CDATA[<h2 id="前端校招面试题"><a href="#前端校招面试题" class="headerlink" title="前端校招面试题"></a>前端校招面试题</h2><h3 id="TCP-拥塞控制"><a href="#TCP-拥塞控制" class="headerlink" title="TCP 拥塞控制"></a>TCP 拥塞控制</h3><h3 id="css-盒子模型"><a href="#css-盒子模型" class="headerlink" title="css 盒子模型"></a>css 盒子模型</h3><ul><li><p>W3C 的标准盒模型</p><p>在标准的盒子模型中，width 指 content 部分的宽度</p></li><li><p>IE 的盒模型</p><p>在 IE 盒子模型中，width 表示 content+padding+border 这三个部分的宽度</p></li><li><p>box-sizing 的使用</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">box-sizing: content-box 是W3C盒子模型</span><br><span class="line">box-sizing: border-box 是IE盒子模型</span><br></pre></td></tr></table></figure><h3 id="固定宽高元素的水平垂直居中"><a href="#固定宽高元素的水平垂直居中" class="headerlink" title="固定宽高元素的水平垂直居中"></a>固定宽高元素的水平垂直居中</h3><ul><li>position:absolute、50%和 margin:-px</li><li>position:fixed、0 和 margin:auto</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* - position:absolute、0 和 margin:auto</span></span><br><span class="line"><span class="comment">- position:absolute、50%和 translate */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>css3 flex</li></ul><h3 id="跨域，常用方案"><a href="#跨域，常用方案" class="headerlink" title="跨域，常用方案"></a>跨域，常用方案</h3><p>浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域。</p><ul><li><p>通过 jsonp 跨域（只支持 get、利用 script 无同源限制，以函数参数形式获取返回值）</p><p>首先说一下 jsonp 的原理，例如我们平时写 html 的时候常常会使用<br><code>&lt;script src=&quot;www.b.com/js/jquery.js&quot;&gt;&lt;/script&gt;</code>这种方式去取放在另外服务器上的静态资源，这个是不受同源策略所限制的，所以我们利用这一点可以解决跨域的问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在www.a.com域名写下如下代码，去请求www.b.com域名的数据</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">creatElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">script.<span class="property">src</span> = <span class="string">&#x27;http://www.b.com/getdata?callback=demo&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params">res</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>nginx 代理跨域</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    # 监听<span class="number">8080</span>端口</span><br><span class="line">    listen <span class="number">8080</span>;</span><br><span class="line">    # 域名是localhost</span><br><span class="line">    server_name localhost;</span><br><span class="line">    #凡是<span class="attr">localhost</span>:<span class="number">8080</span>/api这个样子的，都转发到真正的服务端地址<span class="attr">http</span>:<span class="comment">//www.b.com:8080</span></span><br><span class="line">    location ^~ /api &#123;</span><br><span class="line">        proxy_pass <span class="attr">http</span>:<span class="comment">//www.b.com:8080;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：进行带有身份凭证的 CORS 请求</p><pre><code>（1）、默认情况下的跨域请求都是不会把 cookie 发送给服务器的，在需要发送的情况下，如果是 xhr，那么需要设置 xhr.withCredentials=true,（2）、如果是采用 fetch 获取的话，那么需要在 request 里面设置 credentials:&#39;include&#39;,（3）、但是如果服务器在预请求的时候没返回 Access-Control-Allow-Crenditials:true 的话，那么在实际请求的时候，cookie 是不会被发送给服务器端的，要特别注意对于简单的 get 请求，不会有预请求的过程，</code></pre><h3 id="http-缓存，强缓存-x2F-协商缓存"><a href="#http-缓存，强缓存-x2F-协商缓存" class="headerlink" title="http 缓存，强缓存&#x2F;协商缓存"></a>http 缓存，强缓存&#x2F;协商缓存</h3><p>HTTP Cache 是我们开发中接触最多的缓存，它分为强缓存和协商缓存。</p><ul><li><p>强缓存：直接从本地副本比对读取，不去请求服务器，返回的状态码是 200。</p><p>强缓存主要包括 expires 和 cache-control。</p></li><li><p>协商缓存：会去服务器比对，若没改变才直接读取本地缓存，返回的状态码是 304。</p><p>协商缓存主要包括 last-modified 和 etag</p></li><li><p>当 Cache-Control 设置为 max-age&#x3D;xx 并且同时设置 Expires 时，Cache-Control 的优先级更高</p></li><li><p>当 ETag 和 Last-Modified 同时存在时，服务器先会检查 ETag，然后再检查 Last-Modified，最终决定返回 304 还是 200</p></li></ul><h3 id="箭头函数和普通函数的区别"><a href="#箭头函数和普通函数的区别" class="headerlink" title="箭头函数和普通函数的区别"></a>箭头函数和普通函数的区别</h3><ul><li>箭头函数是匿名函数，不能作为构造函数，不能使用 new</li><li>箭头函数不能绑定 arguments</li><li>箭头函数没有原型属性</li><li>箭头函数的 this 永远指向其上下文的 this，没有办改变其指向，<br>普通函数的 this 指向调用它的对象</li><li>箭头函数不绑定 this，会捕获其所在的上下文的 this 值，作为自己的 this 值</li></ul><h3 id="JS-如何终止-forEach-循环-break-报错，return-跳不出循环"><a href="#JS-如何终止-forEach-循环-break-报错，return-跳不出循环" class="headerlink" title="JS 如何终止 forEach 循环 break 报错，return 跳不出循环"></a>JS 如何终止 forEach 循环 break 报错，return 跳不出循环</h3><ul><li><p>forEach 大概是没有办法中断了，我们可以采用其它的办法来实现循环</p><p>终止 forEach 可以使用 try catch 内部抛出错误，catch 捕获错误。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item === <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">&#x27;循环终止&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;e: &#x27;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Array.prototype.some</p><p>当 return true 的时候，会终止遍历</p></li><li><p>Array.prototype.every</p><p>当 return false 的时候，会终止遍历</p></li></ul><h3 id="for-in-和-for-of-的区别"><a href="#for-in-和-for-of-的区别" class="headerlink" title="for in 和 for of 的区别"></a>for in 和 for of 的区别</h3><ul><li>for in 遍历的是对象的下标并且会遍历原型链，</li><li>for of 遍历对象的值</li></ul><h3 id="null-typeof-为什么是-Object"><a href="#null-typeof-为什么是-Object" class="headerlink" title="null typeof 为什么是 Object"></a>null typeof 为什么是 Object</h3><ul><li>js 初版，使用的是 32 位系统，为了性能考虑使用低位存储了变量的类型信息</li><li>（二进制）000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object</li></ul><h3 id="判断这个对象是数组的方法"><a href="#判断这个对象是数组的方法" class="headerlink" title="判断这个对象是数组的方法"></a>判断这个对象是数组的方法</h3><ul><li>Array.isArray()</li><li>instanceof</li><li>Object.prototype.toString().call()</li></ul><h3 id="怎样实现跨域-AJAX-请求发送-Cookie"><a href="#怎样实现跨域-AJAX-请求发送-Cookie" class="headerlink" title="怎样实现跨域 AJAX 请求发送 Cookie"></a>怎样实现跨域 AJAX 请求发送 Cookie</h3><ul><li><p>第一步: 服务器必须在 Response Header 中设置:</p><p>Access-Control-Allow-Credentials: true</p></li><li><p>第二步: 客户端发起请求时需要将</p><p>xhr.withCredentials 设为: true;</p></li></ul><h3 id="CommonJS-模块与-ES6-模块的区别"><a href="#CommonJS-模块与-ES6-模块的区别" class="headerlink" title="CommonJS 模块与 ES6 模块的区别"></a>CommonJS 模块与 ES6 模块的区别</h3><ul><li>因为 CommonJS 的 require 语法是同步的，所以就导致了 CommonJS 模块规范只适合用在服务端，而 ES6 模块无论是在浏览器端还是服务端都是可以使用的，但是在服务端中，还需要遵循一些特殊的规则才能使用 ；</li><li>CommonJS 模块输出的是一个值的拷贝，而 ES6 模块输出的是值的引用；</li><li>CommonJS 模块是运行时加载，而 ES6 模块是编译时输出接口，使得对 JS 的模块进行静态分析成为了可能；</li><li>因为两个模块加载机制的不同，所以在对待循环加载的时候，它们会有不同的表现。CommonJS 遇到循环依赖的时候，只会输出已经执行的部分，后续的输出或者变化，是不会影响已经输出的变量。而 ES6 模块相反，使用 import 加载一个变量，变量不会被缓存，真正取值的时候就能取到最终的值；</li><li>关于模块顶层的 this 指向问题，在 CommonJS 顶层，this 指向当前模块；而在 ES6 模块中，this 指向 undefined；</li><li>关于两个模块互相引用的问题，在 ES6 模块当中，是支持加载 CommonJS 模块的。但是反过来，CommonJS 并不能 requireES6 模块，在 NodeJS 中，两种模块方案是分开处理的。</li></ul><h3 id="设置-0-5px-的边框线-将伪元素宽高设置为父元素的-200-，然后通过-scale-缩放-50"><a href="#设置-0-5px-的边框线-将伪元素宽高设置为父元素的-200-，然后通过-scale-缩放-50" class="headerlink" title="设置 0.5px 的边框线(将伪元素宽高设置为父元素的 200%，然后通过 scale 缩放 50%)"></a>设置 0.5px 的边框线(将伪元素宽高设置为父元素的 200%，然后通过 scale 缩放 50%)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.element &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  &amp;::before &#123;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    z-index: 1;</span><br><span class="line">    content: &#x27;&#x27;;</span><br><span class="line">    width: 200%;</span><br><span class="line">    height: 200%;</span><br><span class="line">    display: block;</span><br><span class="line">    position: absolute;</span><br><span class="line">    pointer-events: none;</span><br><span class="line">    transform-origin: 0 0;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    transform: scale(0.5, 0.5);</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的三种模块化规范</title>
      <link href="/0775b661448c/"/>
      <url>/0775b661448c/</url>
      
        <content type="html"><![CDATA[<h2 id="常用的三种模块化规范"><a href="#常用的三种模块化规范" class="headerlink" title="常用的三种模块化规范"></a>常用的三种模块化规范</h2><h3 id="ES6Moudle"><a href="#ES6Moudle" class="headerlink" title="ES6Moudle"></a>ES6Moudle</h3><ul><li>使用 import&#x2F;export 语法，在文件顶部导入需要的模块，特点是：静态化，在编译时候确定模块之间的以来关系，以及输入输出变量。</li><li>ES6 中 export 和 import 一般的用法有两种 （别名使用 as 关键字）<ul><li>命名导出（Named exports）</li><li>默认导出（Default exports）</li></ul></li></ul><p>ES6Moudle 在语言标准的层面上，实现了模块功能，而且实现得相当简单，未来大有可能完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//module-a.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>import 命令具有提升效果，会提升到整个模块的头部，首先执行。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//module-b.js</span></span><br><span class="line"><span class="keyword">const</span> b = a + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; a &#125; <span class="keyword">from</span> <span class="string">&#x27;./module-a&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><ul><li>commonJS 服务器端（nodeJS）的 js 模块规范,同步加载方式。因为 nodeJS 会被部署在服务端不存在 js 模块下载阻塞的问题，但是浏览器则是本地客户机存在下载 js 文件阻塞的问题。</li><li>(1）模块定义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>（2）模块引用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">&#x27;./add.js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">&#x27;config.js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="ADM"><a href="#ADM" class="headerlink" title="ADM"></a>ADM</h3><p>AMD 是 requireJS 倡导的一种模块化规范，<strong>推崇依赖前置</strong>；在 requireJS 中模块是通过 define 来进行定义的，如果模块之间相互依赖，需要先将依赖模块导入进来，待导入完毕之后，在通过回调函数的方式执行后面的代码，有效的解决了模块依赖的问题。</p><ul><li>(1)模块定义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">define</span>(&#123;</span><br><span class="line">  <span class="attr">method1</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="attr">method2</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">method1</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">method2</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>(2)模块引用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  a.<span class="title function_">method</span>();</span><br><span class="line">  b.<span class="title function_">method</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="当然还有什么-UMD、CMD-规范这里就不一样叙说了"><a href="#当然还有什么-UMD、CMD-规范这里就不一样叙说了" class="headerlink" title="当然还有什么 UMD、CMD 规范这里就不一样叙说了"></a>当然还有什么 UMD、CMD 规范这里就不一样叙说了</h4><h2 id="面试常问"><a href="#面试常问" class="headerlink" title="面试常问"></a>面试常问</h2><h3 id="前端模块化和服务端模块化有什么区别？"><a href="#前端模块化和服务端模块化有什么区别？" class="headerlink" title="前端模块化和服务端模块化有什么区别？"></a>前端模块化和服务端模块化有什么区别？</h3><p>服务端加载一个模块，直接就从硬盘或者内存中读取了，消耗时间可以忽略不计<br>浏览器需要从服务端下载这个文件，所以说如果用 CommonJS 的 require 方式加载模块，需要等代码模块下载完毕，并运行之后才能得到所需要的 API。</p><h3 id="为什么-CommonJS-不适用于前端模块？"><a href="#为什么-CommonJS-不适用于前端模块？" class="headerlink" title="为什么 CommonJS 不适用于前端模块？"></a>为什么 CommonJS 不适用于前端模块？</h3><p>如果我们在某个代码模块里使用 CommonJS 的方法 require 了一个模块，而这个模块需要通过 http 请求从服务器去取，如果网速很慢，而 CommonJS 又是同步的，所以将阻塞后面代码的执行，从而阻塞浏览器渲染页面，使得页面出现假死状态。<br>因此后面 AMD 规范随着 RequireJS 的推广被提出，异步模块加载，不阻塞后面代码执行的模块引入方式，就是解决了前端模块异步模块加载的问题。</p><h3 id="CommonJS-和-AMD-的对比："><a href="#CommonJS-和-AMD-的对比：" class="headerlink" title="CommonJS 和 AMD 的对比："></a>CommonJS 和 AMD 的对比：</h3><p>CommonJS 一般用于服务端，AMD 一般用于浏览器客户端<br>CommonJS 和 AMD 都是运行时加载</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手撕数据结构----队列与优先队列</title>
      <link href="/3467e88008e8/"/>
      <url>/3467e88008e8/</url>
      
        <content type="html"><![CDATA[<h2 id="手撕数据结构—-队列与优先队列"><a href="#手撕数据结构—-队列与优先队列" class="headerlink" title="手撕数据结构—-队列与优先队列"></a>手撕数据结构—-队列与优先队列</h2><h3 id="什么是队列（先进先出）"><a href="#什么是队列（先进先出）" class="headerlink" title="什么是队列（先进先出）"></a>什么是队列（先进先出）</h3><p>队列，和栈有点类似，但是又不太一样，队列遵循先进先出的原则。<br>列就是排队，在前面的人先享受服务，完后前面的人先走。</p><h3 id="普通队列"><a href="#普通队列" class="headerlink" title="普通队列"></a>普通队列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">push</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(val);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">shift</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">peck</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>.<span class="property">length</span> === <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 队列节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueueNode</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">data, priority</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = data;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">priority</span> = priority;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 带有优先级的队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PriorityQueue</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Queue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  val 值</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; priority 优先级(默认为0)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">push</span>(<span class="params">val, priority = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!val) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;need a parameter&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> newnode = <span class="keyword">new</span> <span class="title class_">QueueNode</span>(val, priority);</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">list</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">list</span>[i].<span class="property">priority</span> &lt; priority) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">splice</span>(i, <span class="number">0</span>, newnode);</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(newnode);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      result += <span class="string">&#x27;&#123;data:&#x27;</span> + item.<span class="property">data</span> + <span class="string">&#x27;,priority:&#x27;</span> + item.<span class="property">priority</span> + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 如何终止 forEach 循环</title>
      <link href="/456e38c7a404/"/>
      <url>/456e38c7a404/</url>
      
        <content type="html"><![CDATA[<h2 id="JS-如何终止-forEach-循环"><a href="#JS-如何终止-forEach-循环" class="headerlink" title="JS 如何终止 forEach 循环"></a>JS 如何终止 forEach 循环</h2><h3 id="JS-如何终止-forEach-循环-break-报错，return-跳不出循环"><a href="#JS-如何终止-forEach-循环-break-报错，return-跳不出循环" class="headerlink" title="JS 如何终止 forEach 循环 break 报错，return 跳不出循环"></a>JS 如何终止 forEach 循环 break 报错，return 跳不出循环</h3><ul><li><p>终止 forEach 可以使用 try catch 内部抛出错误，catch 捕获错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item === <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span>(<span class="string">&#x27;循环终止&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;e: &#x27;</span>, e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="当然我们大可以用其他方法代替"><a href="#当然我们大可以用其他方法代替" class="headerlink" title="当然我们大可以用其他方法代替"></a>当然我们大可以用其他方法代替</h3><ul><li><p>Array.prototype.some</p><p>当 return true 的时候，会终止遍历</p></li><li><p>Array.prototype.every</p><p>当 return false 的时候，会终止遍历</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>call、apply、bind详解</title>
      <link href="/afb96817ca9d/"/>
      <url>/afb96817ca9d/</url>
      
        <content type="html"><![CDATA[<h2 id="call、apply、bind-详解"><a href="#call、apply、bind-详解" class="headerlink" title="call、apply、bind 详解"></a>call、apply、bind 详解</h2><p>三者都是改变函数执行时的上下文，也就是就是改变 this 的指向。</p><h3 id="call-obj-arg1-arg2-x2F-x2F-call-的参数一个一个的传"><a href="#call-obj-arg1-arg2-x2F-x2F-call-的参数一个一个的传" class="headerlink" title="call(obj,arg1,arg2) &#x2F;&#x2F;call()的参数一个一个的传"></a>call(obj,arg1,arg2) &#x2F;&#x2F;call()的参数一个一个的传</h3><p>函数.call(第一个参数:想让函数中 this 指向谁,就传谁进来,<br>后面的参数:本身函数需要传递实参,需要几个实参,就一个一个的传递即可);<br>call 的作用: 1. 调用函数 2.指定函数中 this 指向</p><h3 id="apply-obj-arg1-arg2-x2F-x2F-apply-的第二个参数则是一个数组"><a href="#apply-obj-arg1-arg2-x2F-x2F-apply-的第二个参数则是一个数组" class="headerlink" title="apply(obj,[arg1,arg2] &#x2F;&#x2F;apply()的第二个参数则是一个数组"></a>apply(obj,[arg1,arg2] &#x2F;&#x2F;apply()的第二个参数则是一个数组</h3><p>函数.apply(第一个参数:想让函数中 this 指向谁,就传谁进来,<br>第二个参数:要求传入一个数组,数组中包含了函数需要的实参)<br>apply 的作用: 1. 调用函数 2, 指定函数中 this 的指向</p><h3 id="bind-this-x2F-x2F-bind-返回的其实是一个函数，并不会立即执行。"><a href="#bind-this-x2F-x2F-bind-返回的其实是一个函数，并不会立即执行。" class="headerlink" title="bind(this) &#x2F;&#x2F; bind()返回的其实是一个函数，并不会立即执行。"></a>bind(this) &#x2F;&#x2F; bind()返回的其实是一个函数，并不会立即执行。</h3><p>函数.bind(第一个参数:想让函数中 this 指向谁,就传谁进来,<br>后面的参数:本身函数需要传递实参,需要几个实参,就一个一个的传递即可)<br>bind 的作用: 1. 克隆当前函数,返回克隆出来的新的函数<br>　　　　 2. 新克隆出来的函数,这个函数的 this 被指定了</p><p>看下面例子就明白了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj  = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Thezero&quot;</span>,</span><br><span class="line">  <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;萤火之森&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">say</span>.<span class="title function_">apply</span>(obj2)); <span class="regexp">/ /</span>萤火之森</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">say</span>.<span class="title function_">call</span>(obj2)); <span class="comment">//  萤火之森</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">say</span>.<span class="title function_">bind</span>(obj2)); <span class="comment">// function()&#123;return this.age&#125;</span></span><br></pre></td></tr></table></figure><h2 id="手写实现-call"><a href="#手写实现-call" class="headerlink" title="手写实现 call"></a>手写实现 call</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span> (<span class="params">myThis, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;not a function!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>(<span class="string">&#x27;fn&#x27;</span>);</span><br><span class="line">  myThis = myThis || <span class="variable language_">window</span>;</span><br><span class="line">  myThis[fn] = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// this指向调用call的对象,即我们要改变this指向的函数</span></span><br><span class="line">  <span class="keyword">const</span> result = myThis[fn](...args);</span><br><span class="line">  <span class="comment">// 执行当前函数</span></span><br><span class="line">  <span class="keyword">delete</span> myThis[fn];</span><br><span class="line">  <span class="comment">// 删除我们声明的fn属性</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">  <span class="comment">// 返回函数执行结果</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="手写实现-apply"><a href="#手写实现-apply" class="headerlink" title="手写实现 apply"></a>手写实现 apply</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">myThis, args = []</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;not a function!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title class_">Symbol</span>(<span class="string">&#x27;fn&#x27;</span>);</span><br><span class="line">  myThis = myThis || <span class="variable language_">window</span>;</span><br><span class="line">  myThis[fn] = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// this指向调用call的对象,即我们要改变this指向的函数</span></span><br><span class="line">  <span class="keyword">const</span> result = myThis[fn](...args);</span><br><span class="line">  <span class="comment">// 执行当前函数</span></span><br><span class="line">  <span class="keyword">delete</span> myThis[fn];</span><br><span class="line">  <span class="comment">// 删除我们声明的fn属性</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">  <span class="comment">// 返回函数执行结果</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="手写实现-bind"><a href="#手写实现-bind" class="headerlink" title="手写实现 bind"></a>手写实现 bind</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">myThis, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;not a function!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> fbound = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    self.<span class="title function_">apply</span>(</span><br><span class="line">      <span class="variable language_">this</span> <span class="keyword">instanceof</span> self ? <span class="variable language_">this</span> : myThis,</span><br><span class="line">      args.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>))</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 继承原型上的属性和方法</span></span><br><span class="line">  fbound.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(self.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="keyword">return</span> fbound;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中的依赖注入 provide 和 inject</title>
      <link href="/78d2485a78f2/"/>
      <url>/78d2485a78f2/</url>
      
        <content type="html"><![CDATA[<h2 id="vue-中的依赖注入-provide-和-inject"><a href="#vue-中的依赖注入-provide-和-inject" class="headerlink" title="vue 中的依赖注入 provide 和 inject"></a>vue 中的依赖注入 provide 和 inject</h2><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f3167467ed314cf88e3766c92629e8d7~tplv-k3u1fbpfcp-zoom-1.image" alt="vue.jpg"><br>provide 选项允许我们指定我们想要提供给后代组件的数据&#x2F;方法。</p><p><strong>下面是一个组价刷新的案列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div &gt;</span><br><span class="line">    &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">      &lt;router-view v-if=&quot;isRouterAlive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isRouterAlive: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  provide() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      reload: this.reload</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reload() &#123;</span><br><span class="line">      this.isRouterAlive = false</span><br><span class="line">      this.$nextTick(function() &#123;</span><br><span class="line">        this.isRouterAlive = true</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在任何后代组件里，我们都可以使用 inject 选项来接收指定的我们想要添加在这个实例上的属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inject: [&#x27;reload&#x27;]</span><br></pre></td></tr></table></figure><p>注：依赖注入所提供的属性是非响应式</p>]]></content>
      
      
      <categories>
          
          <category> Vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端常见单位</title>
      <link href="/f0782ecdc0da/"/>
      <url>/f0782ecdc0da/</url>
      
        <content type="html"><![CDATA[<h2 id="前端常见单位"><a href="#前端常见单位" class="headerlink" title="前端常见单位"></a>前端常见单位</h2><p>前端开发过程常常会遇到不同的单位，这些单位你真的了解过吗？</p><h3 id="px"><a href="#px" class="headerlink" title="px"></a>px</h3><p>屏幕像素</p><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>根据根节点改变自身大小，默认根字体大小为 屏幕宽度&#x2F;根结点</p><h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><p>根据父节点改变自身大小</p><h3 id="vh"><a href="#vh" class="headerlink" title="vh"></a>vh</h3><p>viewpoint height，视窗高度，1vh 等于视窗高度的 1%</p><h3 id="vw"><a href="#vw" class="headerlink" title="vw"></a>vw</h3><p>viewpoint width，视窗宽度，1vw 等于视窗宽度的 1%</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript 前端单位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ互联避坑指南</title>
      <link href="/aca9ecaba3a7/"/>
      <url>/aca9ecaba3a7/</url>
      
        <content type="html"><![CDATA[<h1 id="QQ-互联避坑指南"><a href="#QQ-互联避坑指南" class="headerlink" title="QQ 互联避坑指南"></a>QQ 互联避坑指南</h1><h2 id="申请-APPID"><a href="#申请-APPID" class="headerlink" title="申请 APPID"></a>申请 APPID</h2><p>在 QQ 互联官网 h【ttp:&#x2F;&#x2F;connect.qq.com&#x2F;】申请,根据项目需要，申请相应的接入。</p><h3 id="按照官网指示操作注册成为开发者"><a href="#按照官网指示操作注册成为开发者" class="headerlink" title="按照官网指示操作注册成为开发者"></a>按照官网指示操作注册成为开发者</h3><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75886935efc0429c97bc490083376df9~tplv-k3u1fbpfcp-zoom-1.image" alt="QQ图片20200913104031.png"></p><h4 id="注册成功后就可以创建自己的应用"><a href="#注册成功后就可以创建自己的应用" class="headerlink" title="注册成功后就可以创建自己的应用"></a>注册成功后就可以创建自己的应用</h4><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/109325c623df4722a26ead7545df8758~tplv-k3u1fbpfcp-zoom-1.image" alt="QQ图片20200913104407.png"></p><h4 id="审核成功后就可以得到自己的-APPID-与-APP-KEY-这两个都会在后续接入中用到"><a href="#审核成功后就可以得到自己的-APPID-与-APP-KEY-这两个都会在后续接入中用到" class="headerlink" title="审核成功后就可以得到自己的 APPID 与 APP KEY 这两个都会在后续接入中用到"></a>审核成功后就可以得到自己的 APPID 与 APP KEY 这两个都会在后续接入中用到</h4><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d1c3955af5894ccba52401220188f6d0~tplv-k3u1fbpfcp-zoom-1.image" alt="QQ图片20200913103738.png"></p><h2 id="放置-QQ-登录按钮"><a href="#放置-QQ-登录按钮" class="headerlink" title="放置 QQ 登录按钮"></a>放置 QQ 登录按钮</h2><p>网站需要下载“QQ 登录”按钮图片，并按照 UI 规范将按钮放置在页面合适的位置。</p><h2 id="获取-Authorization-Code"><a href="#获取-Authorization-Code" class="headerlink" title="获取 Authorization Code"></a>获取 Authorization Code</h2><h4 id="打开浏览器，访问如下地址（请将-client-id，redirect-uri，scope-等参数值替换为你自己的）："><a href="#打开浏览器，访问如下地址（请将-client-id，redirect-uri，scope-等参数值替换为你自己的）：" class="headerlink" title="打开浏览器，访问如下地址（请将 client_id，redirect_uri，scope 等参数值替换为你自己的）："></a>打开浏览器，访问如下地址（请将 client_id，redirect_uri，scope 等参数值替换为你自己的）：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=[YOUR_APPID]&amp;redirect_uri=[YOUR_REDIRECT_URI]&amp;scope=[THE_SCOPE]</span><br></pre></td></tr></table></figure><h4 id="如果用户已经有登录态，会弹出提示一个确认页。如果还没有登录，会弹出登录页"><a href="#如果用户已经有登录态，会弹出提示一个确认页。如果还没有登录，会弹出登录页" class="headerlink" title="如果用户已经有登录态，会弹出提示一个确认页。如果还没有登录，会弹出登录页"></a>如果用户已经有登录态，会弹出提示一个确认页。如果还没有登录，会弹出登录页</h4><h4 id="成功登录后，弹出授权框引导用户授权（仅在第一次成功登录，以及第一次访问某个未授权的-OpenAPI-时会出现授权页）"><a href="#成功登录后，弹出授权框引导用户授权（仅在第一次成功登录，以及第一次访问某个未授权的-OpenAPI-时会出现授权页）" class="headerlink" title="成功登录后，弹出授权框引导用户授权（仅在第一次成功登录，以及第一次访问某个未授权的 OpenAPI 时会出现授权页）"></a>成功登录后，弹出授权框引导用户授权（仅在第一次成功登录，以及第一次访问某个未授权的 OpenAPI 时会出现授权页）</h4><p>注：<br>如果用户点击“跳过”，则跳转到回调地址，返回默认的头像、昵称和性别。<br>建议第三方应用控制授权项，即参数 scope 中只传入必须使用的 OpenAPI 名称。因为授权项越多，用户越有可能拒绝授权。</p><h4 id="如果用户点击“确认”授权，则成功跳转到指定的-redirect-uri，并跟上-Authorization-Code（注意此-code-会在-10-分钟内过期）。"><a href="#如果用户点击“确认”授权，则成功跳转到指定的-redirect-uri，并跟上-Authorization-Code（注意此-code-会在-10-分钟内过期）。" class="headerlink" title="如果用户点击“确认”授权，则成功跳转到指定的 redirect_uri，并跟上 Authorization Code（注意此 code 会在 10 分钟内过期）。"></a>如果用户点击“确认”授权，则成功跳转到指定的 redirect_uri，并跟上 Authorization Code（注意此 code 会在 10 分钟内过期）。</h4><p>例如回调地址是：<a href="http://www.qq.com/qq%EF%BC%8C%E5%88%99%E4%BC%9A%E8%B7%B3%E8%BD%AC%E5%88%B0%EF%BC%9A">www.qq.com/qq，则会跳转到：</a><br><strong><a href="http://www.qq.com/qq?code=520DD95263C1CFEA0870FBB66E">http://www.qq.com/qq?code=520DD95263C1CFEA0870FBB66E</a></strong></p><h2 id="通过-Authorization-Code-获取-Access-Token"><a href="#通过-Authorization-Code-获取-Access-Token" class="headerlink" title="通过 Authorization Code 获取 Access Token"></a>通过 Authorization Code 获取 Access Token</h2><h4 id="发送请求到如下地址（请将参数值替换为你自己的）："><a href="#发送请求到如下地址（请将参数值替换为你自己的）：" class="headerlink" title="发送请求到如下地址（请将参数值替换为你自己的）："></a>发送请求到如下地址（请将参数值替换为你自己的）：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://graph.qq.com/oauth2.0/token?grant_type=authorization_code&amp;client_id=[YOUR_APP_ID]&amp;client_secret=[YOUR_APP_Key]&amp;code=[The_AUTHORIZATION_CODE]&amp;redirect_uri=[YOUR_REDIRECT_URI]</span><br></pre></td></tr></table></figure><h4 id="即可获取到-Access-Token："><a href="#即可获取到-Access-Token：" class="headerlink" title="即可获取到 Access Token："></a>即可获取到 Access Token：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_token=YOUR_ACCESS_TOKEN&amp;expires_in=3600</span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">AccessToken</span> = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>:</span><br><span class="line">    <span class="string">&#x27;https://graph.qq.com/oauth2.0/token?grant_type=authorization_code&amp;client_id=101905280&amp;client_secret=[自己的APPKEY]&amp;code=&#x27;</span> +</span><br><span class="line">    req.<span class="property">query</span>.<span class="property">code</span> +</span><br><span class="line">    <span class="string">&#x27;&amp;redirect_uri=&#x27;</span> +</span><br><span class="line">    <span class="built_in">encodeURI</span>(<span class="string">&#x27;http://www.xkongkeji.com/qq&#x27;</span>),</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注：返回值需要自己根据需要重新处理</p><h2 id="使用-Access-Token-来获取用户的-OpenID"><a href="#使用-Access-Token-来获取用户的-OpenID" class="headerlink" title="使用 Access Token 来获取用户的 OpenID"></a>使用 Access Token 来获取用户的 OpenID</h2><h4 id="发送请求到如下地址（请将-access-token-等参数值替换为你自己的）："><a href="#发送请求到如下地址（请将-access-token-等参数值替换为你自己的）：" class="headerlink" title="发送请求到如下地址（请将 access_token 等参数值替换为你自己的）："></a>发送请求到如下地址（请将 access_token 等参数值替换为你自己的）：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://graph.qq.com/oauth2.0/me?access_token=YOUR_ACCESS_TOKEN</span><br></pre></td></tr></table></figure><h4 id="获取到用户-OpenID，返回包如下："><a href="#获取到用户-OpenID，返回包如下：" class="headerlink" title="获取到用户 OpenID，返回包如下："></a>获取到用户 OpenID，返回包如下：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">callback</span>(&#123; <span class="attr">client_id</span>: <span class="string">&#x27;YOUR_APPID&#x27;</span>, <span class="attr">openid</span>: <span class="string">&#x27;YOUR_OPENID&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">OpenId</span> = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;https://graph.qq.com/oauth2.0/me?access_token=&#x27;</span> + <span class="title class_">AccessToken</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注：返回值需要自己根据需要重新处理</p><h2 id="使用-Access-Token-以及-OpenID-来访问用户数据"><a href="#使用-Access-Token-以及-OpenID-来访问用户数据" class="headerlink" title="使用 Access Token 以及 OpenID 来访问用户数据"></a>使用 Access Token 以及 OpenID 来访问用户数据</h2><h4 id="建议网站在用户登录后，即调用-get-user-info-接口，获得该用户的头像、昵称并显示在网站上，使用户体验统一。"><a href="#建议网站在用户登录后，即调用-get-user-info-接口，获得该用户的头像、昵称并显示在网站上，使用户体验统一。" class="headerlink" title="建议网站在用户登录后，即调用 get_user_info 接口，获得该用户的头像、昵称并显示在网站上，使用户体验统一。"></a>建议网站在用户登录后，即调用 get_user_info 接口，获得该用户的头像、昵称并显示在网站上，使用户体验统一。</h4><h4 id="发送请求到-get-user-info-的-URL（请将-access-token，appid-等参数值替换为你自己的）："><a href="#发送请求到-get-user-info-的-URL（请将-access-token，appid-等参数值替换为你自己的）：" class="headerlink" title="发送请求到 get_user_info 的 URL（请将 access_token，appid 等参数值替换为你自己的）："></a>发送请求到 get_user_info 的 URL（请将 access_token，appid 等参数值替换为你自己的）：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://graph.qq.com/user/get_user_info?access_token=YOUR_ACCESS_TOKEN&amp;oauth_consumer_key=YOUR_APP_ID&amp;openid=YOUR_OPENID</span><br></pre></td></tr></table></figure><h4 id="成功返回后，即可获取到用户数据："><a href="#成功返回后，即可获取到用户数据：" class="headerlink" title="成功返回后，即可获取到用户数据："></a>成功返回后，即可获取到用户数据：</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;ret&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span><span class="string">&quot;YOUR_NICK_NAME&quot;</span><span class="punctuation">,</span></span><br><span class="line">   ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">UserInfo</span> = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">`https://graph.qq.com/user/get_user_info?access_token=<span class="subst">$&#123;AccessToken&#125;</span>&amp;oauth_consumer_key=<span class="subst">$&#123;APPID&#125;</span>&amp;openid=<span class="subst">$&#123;OpenIdObj.openid&#125;</span>`</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>至此我们就得到了用户信息，可以进行自己的相关逻辑操作</p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QQ互联 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中使用rem移动端适配方案</title>
      <link href="/288fefa74381/"/>
      <url>/288fefa74381/</url>
      
        <content type="html"><![CDATA[<p>Vue 中使用 rem 移动端适配方案</p><ol><li>安装依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-pxtorem -D</span><br></pre></td></tr></table></figure><ol start="2"><li>初始化根标签字体大小，设置 px 与 rem 的关系</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> baseSize = <span class="number">46</span>; <span class="comment">//根据UI尺寸决定</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setRem</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> scale = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span> / <span class="number">1080</span>; <span class="comment">//UI尺寸决定</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="property">fontSize</span> =</span><br><span class="line">    baseSize * <span class="title class_">Math</span>.<span class="title function_">min</span>(scale, <span class="number">2</span>) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setRem</span>();</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">setRem</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>在 main 引入文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./utils/rem.js&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>设置规则（更改 postcss.config.js,该文件为使用 vue-cli3 自动创建的文件）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="attr">autoprefixer</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-pxtorem&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">rootValue</span>: <span class="number">46</span>,</span><br><span class="line">      <span class="attr">propList</span>: [<span class="string">&#x27;*&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node发送邮件</title>
      <link href="/dc1ee2f7270c/"/>
      <url>/dc1ee2f7270c/</url>
      
        <content type="html"><![CDATA[<h2 id="node-发送邮件"><a href="#node-发送邮件" class="headerlink" title="node 发送邮件"></a>node 发送邮件</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>为了实现这个功能，你首先要有一个邮箱；由于需要使用 SMTP 方式发送，你还需要开启相关功能。你可以登录你的邮箱，然后开启这个设置，以 QQ 邮箱为例（其他邮箱也差不多，主要开启服务获取到授权码就可以了）：</p><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c248fbe0ed3a44f1af8e90ae2d9f623a~tplv-k3u1fbpfcp-zoom-1.image" alt="QQ图片20200929192327.png"></p><p><strong>2.安装模块 nodemailer（当然也有其他的邮件模块，可以自行选择）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install nodemailer --save</span><br></pre></td></tr></table></figure><h3 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">&#x27;nodemailer&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="简单配置（这里只是一些简单的配置项，更多配置请查看官网，其实都是大同小异，需要什么添加什么就可以了）"><a href="#简单配置（这里只是一些简单的配置项，更多配置请查看官网，其实都是大同小异，需要什么添加什么就可以了）" class="headerlink" title="简单配置（这里只是一些简单的配置项，更多配置请查看官网，其实都是大同小异，需要什么添加什么就可以了）"></a>简单配置（这里只是一些简单的配置项，更多配置请查看官网，其实都是大同小异，需要什么添加什么就可以了）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> config = &#123;</span><br><span class="line">  <span class="attr">service</span>: <span class="string">&#x27;qq&#x27;</span>,</span><br><span class="line">  <span class="comment">// host: &quot;smtp.qq.com&quot;, //邮箱服务的主机，如smtp.qq.com</span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;465&#x27;</span>, <span class="comment">//对应的端口号</span></span><br><span class="line">  <span class="attr">secureConnection</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">//secureConnection:false,</span></span><br><span class="line">  <span class="comment">//用户信息</span></span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;前期准备的邮箱&#x27;</span>,</span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&#x27;授权码&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> transporter = nodemailer.<span class="title function_">createTransport</span>(config);</span><br></pre></td></tr></table></figure><h3 id="当然你也可以单独抽离为一个模块方便后期使用-email-js"><a href="#当然你也可以单独抽离为一个模块方便后期使用-email-js" class="headerlink" title="当然你也可以单独抽离为一个模块方便后期使用(email.js)"></a>当然你也可以单独抽离为一个模块方便后期使用(email.js)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">&#x27;nodemailer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置邮箱配置</span></span><br><span class="line"><span class="keyword">let</span> config = &#123;</span><br><span class="line">  <span class="attr">service</span>: <span class="string">&#x27;qq&#x27;</span>,</span><br><span class="line">  <span class="comment">// host: &quot;smtp.qq.com&quot;, //邮箱服务的主机，如smtp.qq.com</span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">&#x27;465&#x27;</span>, <span class="comment">//对应的端口号</span></span><br><span class="line">  <span class="attr">secureConnection</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">//secureConnection:false,</span></span><br><span class="line">  <span class="comment">//用户信息</span></span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;前期准备的邮箱&#x27;</span>,</span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&#x27;授权码&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> transporter = nodemailer.<span class="title function_">createTransport</span>(config);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sendQQemail = <span class="keyword">function</span> (<span class="params">mailOptions</span>) &#123;</span><br><span class="line">  transporter.<span class="title function_">sendMail</span>(mailOptions, <span class="function">(<span class="params">error, info</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Message: <span class="subst">$&#123;info.messageId&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`sent: <span class="subst">$&#123;info.response&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sendQQemail</span> = sendQQemail;</span><br></pre></td></tr></table></figure><p>到这里你就可以完成一些简单的邮件发送了。</p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> email </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 异步解决方案 async 函数</title>
      <link href="/b5c01f7465dc/"/>
      <url>/b5c01f7465dc/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6-异步解决方案-async-函数"><a href="#ES6-异步解决方案-async-函数" class="headerlink" title="ES6 异步解决方案 async 函数"></a>ES6 异步解决方案 async 函数</h2><h3 id="Generator-函数"><a href="#Generator-函数" class="headerlink" title="Generator 函数"></a>Generator 函数</h3><p>要说到 async 函数就得从 Generator 函数说起，Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。Generator 函数有多种理解角度。从语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</p><p>形式上，Generator 函数是一个普通函数，但是有两个特征。一是，function 关键字与函数名之间有一个星号；二是，函数体内部使用 yield 语句，定义不同的内部状态（yield 语句在英语里的意思就是“产出”）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title class_">ImGenerator</span>() &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;ending&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun = <span class="title class_">ImGenerator</span>();</span><br></pre></td></tr></table></figure><p>上面代码定义了一个<strong>Generator</strong>函数 ImGenerator，它内部有两个<strong>yield</strong>语句“hello”和“world”，即该函数有三个状态：hello，world 和 return 语句（结束执行）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">fun.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// &#123; value: &#x27;world&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">fun.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// &#123; value: &#x27;ending&#x27;, done: true &#125;</span></span><br><span class="line"></span><br><span class="line">fun.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象必须调用遍历器对象的 next 方法，使得指针移向下一个状态。也就是说，每次调用 next 方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个 yield 语句（或 return 语句）为止。换言之，Generator 函数是分段执行的，yield 语句是暂停执行的标记，而 next 方法可以恢复执行。</p><p><strong>yield 语句</strong>,由于 Generator 函数返回的遍历器对象，只有调用 next 方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。yield 语句就是暂停标志。</p><p>（1）遇到 yield 语句，就暂停执行后面的操作，并将紧跟在 yield 后面的那个表达式的值，作为返回的对象的 value 属性值。</p><p>（2）下一次调用 next 方法时，再继续往下执行，直到遇到下一个 yield 语句。</p><p>（3）如果没有再遇到新的 yield 语句，就一直运行到函数结束，直到 return 语句为止，并将 return 语句后面的表达式的值，作为返回的对象的 value 属性值。</p><p>（4）如果该函数没有 return 语句，则返回的对象的 value 属性值为 undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">123</span> + <span class="number">456</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，yield 后面的表达式 123 + 456，不会立即求值，只会在 next 方法将指针移到这一句时，才会求值。yield 语句后面的表达式，只有当调用 next 方法、内部指针指向该语句时才会执行，因此等于为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。</p><p>yield 语句与 return 语句既有相似之处，也有区别。相似之处在于，都能返回紧跟在语句后面的那个表达式的值。区别在于每次遇到 yield，函数暂停执行，下一次再从该位置继续向后执行，而 return 语句不具备位置记忆的功能。一个函数里面，只能执行一次（或者说一个）return 语句，但是可以执行多次（或者说多个）yield 语句。正常函数只能返回一个值，因为只能执行一次 return；Generator 函数可以返回一系列的值，因为可以有任意多个 yield。从另一个角度看，也可以说 Generator 生成了一系列的值，这也就是它的名称的来历（在英语中，generator 这个词是“生成器”的意思）。</p><p>Generator 函数可以不用 yield 语句，这时就变成了一个单纯的暂缓执行函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行了！&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> generator = <span class="title function_">f</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  generator.<span class="title function_">next</span>();</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p>函数 f 如果是普通函数，在为变量 generator 赋值时就会执行。但是，函数 f 是一个 Generator 函数，就变成只有调用 next 方法时，函数 f 才会执行。</p><p>另外需要注意，yield 语句不能用在普通函数中，否则会报错。</p><h3 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h3><p>ES7 提供了 async 函数，使得异步操作变得更加方便。async 函数是什么？一句话，async 函数就是前文 Generator 函数的语法糖。</p><p>前文有一个 Generator 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title class_">ImGenerator</span>() &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title class_">Fun1</span>();</span><br><span class="line">  <span class="keyword">yield</span> <span class="title class_">Fun2</span>();</span><br><span class="line">  <span class="keyword">yield</span> <span class="title class_">Fun3</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun = <span class="title class_">ImGenerator</span>();</span><br></pre></td></tr></table></figure><p>写成 async 函数，就是下面这样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title class_">ImGenerator</span>() &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Fun1</span>();</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Fun2</span>();</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Fun3</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun = <span class="title class_">ImGenerator</span>();</span><br></pre></td></tr></table></figure><p>一比较就会发现，async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已。</p><p>async 函数对 Generator 函数的改进，体现在以下四点。</p><p>（1）内置执行器。Generator 函数的执行必须靠执行器，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行。<br>(上面的代码调用了 ImGenerator 函数，然后它就会自动执行，输出最后结果。这完全不像 Generator 函数，需要调用 next 方法，才能得到真正执行，得到最后结果。)</p><p>（2）更好的语义。async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。</p><p>（4）返回值是 Promise。async 函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用 then 方法指定下一步的操作。</p><p>进一步说，async 函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而 await 命令就是内部 then 命令的语法糖。</p><h3 id="async-函数简单用法"><a href="#async-函数简单用法" class="headerlink" title="async 函数简单用法"></a>async 函数简单用法</h3><p>async 函数的语法规则总体上比较简单，难点是错误处理机制</p><p>（1）async 函数返回一个 Promise 对象,async 函数内部 return 语句返回的值，会成为 then 方法回调函数的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Fun</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v));</span><br><span class="line"><span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，函数 Fun 内部 return 命令返回的值，会被 then 方法回调函数接收到。</p><p>async 函数内部抛出错误，会导致返回的 Promise 对象变为 reject 状态。抛出的错误对象会被 catch 方法回调函数接收到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Fun</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v));</span><br><span class="line"><span class="comment">// Error: 出错了</span></span><br></pre></td></tr></table></figure><p>（2）async 函数返回的 Promise 对象，必须等到内部所有 await 命令的 Promise 对象执行完，才会发生状态改变。也就是说，只有 async 函数内部的异步操作执行完，才会执行 then 方法指定的回调函数。</p><p>（3）正常情况下，await 命令后面是一个 Promise 对象。如果不是，会被转成一个立即 resolve 的 Promise 对象。</p><h3 id="async-函数简单实现（Generator-函数）"><a href="#async-函数简单实现（Generator-函数）" class="headerlink" title="async 函数简单实现（Generator 函数）"></a>async 函数简单实现（Generator 函数）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">spawn</span>(<span class="keyword">function</span>* () &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>(1) await 命令后面的 Promise 对象，运行结果可能是 rejected，所以最好把 await 命令放在 try…catch 代码块中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">somethingThatReturnsAPromise</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">somethingThatReturnsAPromise</span>()</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)多个 await 命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。</p><p>(3) await 命令只能用在 async 函数之中，如果用在普通函数，就会报错。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 ASYNC </tag>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6异步解决方案async函数</title>
      <link href="/7e60b22fec73/"/>
      <url>/7e60b22fec73/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6-异步解决方案-async-函数"><a href="#ES6-异步解决方案-async-函数" class="headerlink" title="ES6 异步解决方案 async 函数"></a>ES6 异步解决方案 async 函数</h2><h3 id="Generator-函数"><a href="#Generator-函数" class="headerlink" title="Generator 函数"></a>Generator 函数</h3><p>要说到 async 函数就得从 Generator 函数说起，Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。Generator 函数有多种理解角度。从语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</p><p>形式上，Generator 函数是一个普通函数，但是有两个特征。一是，function 关键字与函数名之间有一个星号；二是，函数体内部使用 yield 语句，定义不同的内部状态（yield 语句在英语里的意思就是“产出”）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title class_">ImGenerator</span>() &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;ending&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun = <span class="title class_">ImGenerator</span>();</span><br></pre></td></tr></table></figure><p>上面代码定义了一个<strong>Generator</strong>函数 ImGenerator，它内部有两个<strong>yield</strong>语句“hello”和“world”，即该函数有三个状态：hello，world 和 return 语句（结束执行）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">fun.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// &#123; value: &#x27;world&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">fun.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// &#123; value: &#x27;ending&#x27;, done: true &#125;</span></span><br><span class="line"></span><br><span class="line">fun.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象必须调用遍历器对象的 next 方法，使得指针移向下一个状态。也就是说，每次调用 next 方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个 yield 语句（或 return 语句）为止。换言之，Generator 函数是分段执行的，yield 语句是暂停执行的标记，而 next 方法可以恢复执行。</p><p><strong>yield 语句</strong>,由于 Generator 函数返回的遍历器对象，只有调用 next 方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。yield 语句就是暂停标志。</p><p>（1）遇到 yield 语句，就暂停执行后面的操作，并将紧跟在 yield 后面的那个表达式的值，作为返回的对象的 value 属性值。</p><p>（2）下一次调用 next 方法时，再继续往下执行，直到遇到下一个 yield 语句。</p><p>（3）如果没有再遇到新的 yield 语句，就一直运行到函数结束，直到 return 语句为止，并将 return 语句后面的表达式的值，作为返回的对象的 value 属性值。</p><p>（4）如果该函数没有 return 语句，则返回的对象的 value 属性值为 undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">123</span> + <span class="number">456</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，yield 后面的表达式 123 + 456，不会立即求值，只会在 next 方法将指针移到这一句时，才会求值。yield 语句后面的表达式，只有当调用 next 方法、内部指针指向该语句时才会执行，因此等于为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。</p><p>yield 语句与 return 语句既有相似之处，也有区别。相似之处在于，都能返回紧跟在语句后面的那个表达式的值。区别在于每次遇到 yield，函数暂停执行，下一次再从该位置继续向后执行，而 return 语句不具备位置记忆的功能。一个函数里面，只能执行一次（或者说一个）return 语句，但是可以执行多次（或者说多个）yield 语句。正常函数只能返回一个值，因为只能执行一次 return；Generator 函数可以返回一系列的值，因为可以有任意多个 yield。从另一个角度看，也可以说 Generator 生成了一系列的值，这也就是它的名称的来历（在英语中，generator 这个词是“生成器”的意思）。</p><p>Generator 函数可以不用 yield 语句，这时就变成了一个单纯的暂缓执行函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行了！&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> generator = <span class="title function_">f</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  generator.<span class="title function_">next</span>();</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p>函数 f 如果是普通函数，在为变量 generator 赋值时就会执行。但是，函数 f 是一个 Generator 函数，就变成只有调用 next 方法时，函数 f 才会执行。</p><p>另外需要注意，yield 语句不能用在普通函数中，否则会报错。</p><h3 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h3><p>ES7 提供了 async 函数，使得异步操作变得更加方便。async 函数是什么？一句话，async 函数就是前文 Generator 函数的语法糖。</p><p>前文有一个 Generator 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title class_">ImGenerator</span>() &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title class_">Fun1</span>();</span><br><span class="line">  <span class="keyword">yield</span> <span class="title class_">Fun2</span>();</span><br><span class="line">  <span class="keyword">yield</span> <span class="title class_">Fun3</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun = <span class="title class_">ImGenerator</span>();</span><br></pre></td></tr></table></figure><p>写成 async 函数，就是下面这样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title class_">ImGenerator</span>() &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Fun1</span>();</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Fun2</span>();</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Fun3</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun = <span class="title class_">ImGenerator</span>();</span><br></pre></td></tr></table></figure><p>一比较就会发现，async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已。</p><p>async 函数对 Generator 函数的改进，体现在以下四点。</p><p>（1）内置执行器。Generator 函数的执行必须靠执行器，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行。<br>(上面的代码调用了 ImGenerator 函数，然后它就会自动执行，输出最后结果。这完全不像 Generator 函数，需要调用 next 方法，才能得到真正执行，得到最后结果。)</p><p>（2）更好的语义。async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。</p><p>（4）返回值是 Promise。async 函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用 then 方法指定下一步的操作。</p><p>进一步说，async 函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而 await 命令就是内部 then 命令的语法糖。</p><h3 id="async-函数简单用法"><a href="#async-函数简单用法" class="headerlink" title="async 函数简单用法"></a>async 函数简单用法</h3><p>async 函数的语法规则总体上比较简单，难点是错误处理机制</p><p>（1）async 函数返回一个 Promise 对象,async 函数内部 return 语句返回的值，会成为 then 方法回调函数的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Fun</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v));</span><br><span class="line"><span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，函数 Fun 内部 return 命令返回的值，会被 then 方法回调函数接收到。</p><p>async 函数内部抛出错误，会导致返回的 Promise 对象变为 reject 状态。抛出的错误对象会被 catch 方法回调函数接收到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Fun</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v));</span><br><span class="line"><span class="comment">// Error: 出错了</span></span><br></pre></td></tr></table></figure><p>（2）async 函数返回的 Promise 对象，必须等到内部所有 await 命令的 Promise 对象执行完，才会发生状态改变。也就是说，只有 async 函数内部的异步操作执行完，才会执行 then 方法指定的回调函数。</p><p>（3）正常情况下，await 命令后面是一个 Promise 对象。如果不是，会被转成一个立即 resolve 的 Promise 对象。</p><h3 id="async-函数简单实现（Generator-函数）"><a href="#async-函数简单实现（Generator-函数）" class="headerlink" title="async 函数简单实现（Generator 函数）"></a>async 函数简单实现（Generator 函数）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">spawn</span>(<span class="keyword">function</span>* () &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>(1) await 命令后面的 Promise 对象，运行结果可能是 rejected，所以最好把 await 命令放在 try…catch 代码块中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">somethingThatReturnsAPromise</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">somethingThatReturnsAPromise</span>()</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)多个 await 命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。</p><p>(3) await 命令只能用在 async 函数之中，如果用在普通函数，就会报错。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6异步解决方案Promise</title>
      <link href="/6aa800e65137/"/>
      <url>/6aa800e65137/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6-异步解决方案-Promise"><a href="#ES6-异步解决方案-Promise" class="headerlink" title="ES6 异步解决方案 Promise"></a>ES6 异步解决方案 Promise</h2><h2 id="Parmise"><a href="#Parmise" class="headerlink" title="Parmise"></a>Parmise</h2><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。</p><p><strong>Promise 对象有以下两个特点。</strong></p><p>（1）对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和 Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 Promise 这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p><p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p><p>有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数<br>（<strong>回调地狱</strong>）。此外，Promise 对象提供统一的接口，使得控制异步操作更加容易。</p><p>Promise 也有一些缺点。首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。第三，当处于 Pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ES6 规定，Promise 对象是一个构造函数，用来生成 Promise 实例。Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 和 reject。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p><p><strong>resolve 函数</strong>的作用是，将 Promise 对象的状态从“<strong>未完成</strong>”变为“<strong>成功</strong>”（即从 Pending 变为 Resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；<strong>reject 函数</strong>的作用是，将 Promise 对象的状态从“<strong>未完成</strong>”变为“<strong>失败</strong>”（即从 Pending 变为 Rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p>Promise 实例生成以后，可以用 then 方法分别指定 Resolved 状态和 Reject 状态的回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// failure</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>then 方法可以接受两个回调函数作为参数。第一个回调函数是 Promise 对象的状态变为 Resolved 时调用，第二个回调函数是 Promise 对象的状态变为 Reject 时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受 Promise 对象传出的值作为参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, ms, <span class="string">&#x27;done&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">timeout</span>(<span class="number">100</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise 新建后就会立即执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Promise&#x27;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Resolved.&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise</span></span><br><span class="line"><span class="comment">// Hi!</span></span><br><span class="line"><span class="comment">// Resolved</span></span><br></pre></td></tr></table></figure><h3 id="Promise-简单封装-Ajax"><a href="#Promise-简单封装-Ajax" class="headerlink" title="Promise 简单封装 Ajax"></a>Promise 简单封装 Ajax</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Ajax</span> = <span class="keyword">function</span> (<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> client = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    client.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line">    client.<span class="property">onreadystatechange</span> = handleFunction;</span><br><span class="line">    client.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line">    client.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Accept&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>);</span><br><span class="line">    client.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> !== <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Ajax</span>(url).<span class="title function_">then</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Contents: &#x27;</span> + res);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;出错了&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果调用 resolve 函数和 reject 函数时带有参数，那么它们的参数会被传递给回调函数。reject 函数的参数通常是 Error 对象的实例，表示抛出的错误；resolve 函数的参数除了正常的值以外，还可能是另一个 Promise 实例，表示异步操作的结果有可能是一个值，也有可能是另一个异步操作，比如像下面这样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="title function_">resolve</span>(p1);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，p1 和 p2 都是 Promise 的实例，但是 p2 的 resolve 方法将 p1 作为参数，即一个异步操作的结果是返回另一个异步操作。</p><p><strong>注意</strong>:这时 p1 的状态就会传递给 p2，也就是说，p1 的状态决定了 p2 的状态。如果 p1 的状态是 Pending，那么 p2 的回调函数就会等待 p1 的状态改变；如果 p1 的状态已经是 Resolved 或者 Rejected，那么 p2 的回调函数将会立刻执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;fail&#x27;</span>)), <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(p1), <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result)).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error));</span><br><span class="line"><span class="comment">// Error: fail</span></span><br></pre></td></tr></table></figure><p>上面代码中，p1 是一个 Promise，3 秒之后变为 rejected。p2 的状态在 1 秒之后改变，resolve 方法返回的是 p1。此时，由于 p2 返回的是另一个 Promise，所以后面的 then 语句都变成针对后者（p1）。又过了 2 秒，p1 变为 rejected，导致触发 catch 方法指定的回调函数。</p><p><strong>Promise.prototype.then()</strong></p><p>当 promise 状态改变为成功的时候调用。</p><p>then 方法返回的是一个新的 Promise 实例（注意，不是原来那个 Promise 实例）。因此可以采用链式写法，即 then 方法后面再调用另一个 then 方法。</p><p><strong>Promise.prototype.catch()</strong></p><p>当 promise 状态改变为失败的时候调用，</p><p><strong>注意</strong>：连续调用 then 的情况下，它们之中任何一个抛出的错误，都会被最后一个 catch 捕获。<br>一般来说，不要在 then 方法里面定义 Reject 状态的回调函数（即 then 的第二个参数），总是使用 catch 方法。</p><p><strong>Promise.all()</strong> <strong>有一个失败就失败，全部成功才成功</strong></p><p>Promise.all 参数，如果不是 Promise 实例，就会先调用下面讲到的 Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理。</p><p>Promise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><p><strong>Promise.resolve()</strong></p><p>有时需要将现有对象转为 Promise 对象，Promise.resolve 方法就起到这个作用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let jsPromise = Promise.resolve($.ajax(&#x27;/whatever.json&#x27;));</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p>（1）如果参数是 Promise 实例，那么 Promise.resolve 将不做任何修改、原封不动地返回这个实例。</p><p>（2）参数是一个 thenable 对象，thenable 对象指的是具有 then 方法的对象。Promise.resolve 方法会将这个对象转为 Promise 对象，然后就立即执行 thenable 对象的 then 方法</p><p>（3）参数不是具有 then 方法的对象，或根本就不是对象，如果参数是一个原始值，或者是一个不具有 then 方法的对象，则 Promise.resolve 方法返回一个新的 Promise 对象，状态为 Resolved。</p><p>（4）不带有任何参数，Promise.resolve 方法允许调用时不带参数，直接返回一个 Resolved 状态的 Promise 对象。所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用 Promise.resolve 方法。</p><p><strong>Promise.reject()</strong></p><p>Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为 rejected。它的参数用法与 Promise.resolve 方法完全一致。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let p = Promise.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>p 的状态由 p1、p2、p3 决定，分成两种情况。</p><p>（1）只有 p1、p2、p3 的状态都变成成功，p 的状态才会变成成功，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。</p><p>（2）只要 p1、p2、p3 之中有一个被失败，p 的状态就变成失败，此时第一个被 reject 的实例的返回值，会传递给 p 的回调函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var promises = [url1, url2, url3, url4, url5, url6].map(function (url) &#123;</span><br><span class="line">  return Ajax(url);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.all(promises).then(function (posts) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;).catch(function(reason)&#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，promises 是包含 6 个 Promise 实例的数组，只有这 6 个实例的状态都变成成功，或者其中有一个变为失败，才会调用 Promise.all 方法后面的回调函数。</p><p><strong>Promise.race()</strong> <strong>有一个成功就成功有一个失败就失败</strong></p><p>Promise.race 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p><p>Promise.race()参数，如果不是 Promise 实例，就会先调用下面讲到的 Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let p = Promise.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>上面代码中，只要 p1、p2、p3 之中有一个实例率先改变状态，p 的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给 p 的回调函数。</p><p><strong>done()</strong></p><p>不管以 then 方法或 catch 方法结尾，要是最后一个方法抛出错误，都有可能无法捕捉到（因为 Promise 内部的错误不会冒泡到全局）。因此，我们可以提供一个 done 方法，总是处于回调链的尾端，保证抛出任何可能出现的错误。</p><p><strong>finally()</strong></p><p>finally 方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。它与 done 方法的最大区别，它接受一个普通的回调函数作为参数，该函数不管怎样都必须执行。</p><p><strong>Promise.try()</strong></p><p>Promise.try 就是模拟 try 代码块，就像 promise.catch 模拟的是 catch 代码块。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6之对象方法</title>
      <link href="/2a1badf96f5a/"/>
      <url>/2a1badf96f5a/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6-之对象方法"><a href="#ES6-之对象方法" class="headerlink" title="ES6 之对象方法"></a>ES6 之对象方法</h2><h3 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a><a name="Object.is()">Object.is()</a></h3><p>与严格比较运算符（&#x3D;&#x3D;&#x3D;）的行为基本一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="string">&#x27;obj&#x27;</span>, <span class="string">&#x27;obj&#x27;</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(&#123;&#125;, &#123;&#125;)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>不同之处只有两个：一是+0 不等于-0，二是 NaN 等于自身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span> === -<span class="number">0</span> <span class="comment">//true</span></span><br><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>, -<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>当然我们也可以用 ES5 的方法来实现该方法，原理还是利用严格运算符（&#x3D;&#x3D;&#x3D;），只是特殊的情况进行特殊处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Object</span>, <span class="string">&#x27;is&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="keyword">function</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">      <span class="comment">// 针对+0 不等于 -0的情况</span></span><br><span class="line">      <span class="keyword">return</span> x !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 针对NaN的情况</span></span><br><span class="line">    <span class="keyword">return</span> x !== x &amp;&amp; y !== y;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a><a name="Object.assign()">Object.assign()</a></h3><p>Object.assign 方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。可以实现浅拷贝。（浅拷贝，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source1, source2);</span><br><span class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure><p>注意：</p><pre><code>（0）：Object.assign方法的第一个参数是目标对象，后面的参数都是源对象。（1）：如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性（2）：如果只有一个参数，Object.assign会直接返回该参数。（3）：如果该参数不是对象，则会先转成对象，然后返回。（4）：由于undefined和null无法转成对象，所以如果它们作为target，就会报错。如果非对象参数出现在source的位置（即非首参数），那么处理规则有所不同。首先，这些参数都会转成对象，如果无法转成对象，就会跳过。这意味着，如果undefined和null不在首参数，就不会报错。（5）：其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。</code></pre><p>Object.assign 拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="string">&#x27;c&#x27;</span>, <span class="attr">d</span>: <span class="string">&#x27;e&#x27;</span> &#125; &#125;</span><br><span class="line"><span class="keyword">var</span> source = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="string">&#x27;hello&#x27;</span> &#125; &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source)</span><br><span class="line"><span class="comment">// &#123; a: &#123; b: &#x27;hello&#x27; &#125; &#125;</span></span><br></pre></td></tr></table></figure><p>对于这种嵌套的对象，一旦遇到同名属性，Object.assign 的处理方法是替换，而不是添加。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment">// [4, 5, 3]</span></span><br></pre></td></tr></table></figure><p>Object.assign 可以用来处理数组，但是会把数组视为对象。上面代码中，Object.assign 把数组视为属性名为 0、1、2 的对象，因此目标数组的 0 号属性 4 覆盖了原数组的 0 号属性 1。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
